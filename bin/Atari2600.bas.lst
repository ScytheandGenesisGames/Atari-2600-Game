------- FILE c:\Users\start\OneDrive\Documents\Visual Code Workspace\Atari-2600-Game\Atari2600.bas.asm LEVEL 1 PASS 2
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE c:\Users\start\OneDrive\Documents\Visual Code Workspace\Atari-2600-Game\Atari2600.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE c:\Users\start\OneDrive\Documents\Visual Code Workspace\Atari-2600-Game\Atari2600.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 ec	   _Bit0_Reset_Restrainer =	y
      5  5000 ????
      6  5000 ????	       00 ec	   _BitOp_01  =	y
      7  5000 ????
      8  5000 ????	       00 01	   PFcolors   =	1
      9  5000 ????	       00 01	   backgroundchange =	1
     10  5000 ????	       00 01	   player1colors =	1
     11  5000 ????	       00 01	   player1colors =	1
     12  5000 ????	       00 01	   playercolors =	1
     13  5000 ????	       00 2b	   vblank_time =	43
     14  5000 ????	       00 25	   overscan_time =	37
     15  5000 ????	       00 03	   bs_mask    =	3
     16  5000 ????	       00 10	   bankswitch =	16
     17  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE 2600basic.h
      7  5000 ????
      8  5000 ????	       00 80	   player0x   =	$80
      9  5000 ????	       00 81	   player1x   =	$81
     10  5000 ????	       00 82	   missile0x  =	$82
     11  5000 ????	       00 83	   missile1x  =	$83
     12  5000 ????	       00 84	   ballx      =	$84
     13  5000 ????
     14  5000 ????	       00 85	   objecty    =	$85
     15  5000 ????	       00 85	   player0y   =	$85
     16  5000 ????	       00 86	   player1y   =	$86
     17  5000 ????	       00 87	   missile1height =	$87
     18  5000 ????	       00 88	   missile1y  =	$88
     19  5000 ????	       00 89	   bally      =	$89
     20  5000 ????
     21  5000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  5000 ????
     23  5000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  5000 ????	       00 8a	   player0pointerlo =	$8A
     25  5000 ????	       00 8b	   player0pointerhi =	$8B
     26  5000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  5000 ????	       00 8c	   player1pointerlo =	$8C
     28  5000 ????	       00 8d	   player1pointerhi =	$8D
     29  5000 ????
     30  5000 ????	       00 8e	   player0height =	$8E
     31  5000 ????	       00 8f	   player1height =	$8F
     32  5000 ????	       00 90	   missile0height =	$90
     33  5000 ????	       00 91	   missile0y  =	$91
     34  5000 ????	       00 92	   ballheight =	$92
     35  5000 ????
     36  5000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  5000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  5000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  5000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  5000 ????
     41  5000 ????	       00 93	   score      =	$93	; $93-$95
     42  5000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  5000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  5000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  5000 ????	       00 9e	   temp3      =	$9E
     46  5000 ????	       00 9f	   temp4      =	$9F
     47  5000 ????	       00 a0	   temp5      =	$A0
     48  5000 ????	       00 a1	   temp6      =	$A1
     49  5000 ????
     50  5000 ????	       00 a2	   rand       =	$A2
     51  5000 ????	       00 a3	   scorecolor =	$A3
     52  5000 ????
     53  5000 ????	       00 a4	   var0       =	$A4
     54  5000 ????	       00 a5	   var1       =	$A5
     55  5000 ????	       00 a6	   var2       =	$A6
     56  5000 ????	       00 a7	   var3       =	$A7
     57  5000 ????	       00 a8	   var4       =	$A8
     58  5000 ????	       00 a9	   var5       =	$A9
     59  5000 ????	       00 aa	   var6       =	$AA
     60  5000 ????	       00 ab	   var7       =	$AB
     61  5000 ????	       00 ac	   var8       =	$AC
     62  5000 ????	       00 ad	   var9       =	$AD
     63  5000 ????	       00 ae	   var10      =	$AE
     64  5000 ????	       00 af	   var11      =	$AF
     65  5000 ????	       00 b0	   var12      =	$B0
     66  5000 ????	       00 b1	   var13      =	$B1
     67  5000 ????	       00 b2	   var14      =	$B2
     68  5000 ????	       00 b3	   var15      =	$B3
     69  5000 ????	       00 b4	   var16      =	$B4
     70  5000 ????	       00 b5	   var17      =	$B5
     71  5000 ????	       00 b6	   var18      =	$B6
     72  5000 ????	       00 b7	   var19      =	$B7
     73  5000 ????	       00 b8	   var20      =	$B8
     74  5000 ????	       00 b9	   var21      =	$B9
     75  5000 ????	       00 ba	   var22      =	$BA
     76  5000 ????	       00 bb	   var23      =	$BB
     77  5000 ????	       00 bc	   var24      =	$BC
     78  5000 ????	       00 bd	   var25      =	$BD
     79  5000 ????	       00 be	   var26      =	$BE
     80  5000 ????	       00 bf	   var27      =	$BF
     81  5000 ????	       00 c0	   var28      =	$C0
     82  5000 ????	       00 c1	   var29      =	$C1
     83  5000 ????	       00 c2	   var30      =	$C2
     84  5000 ????	       00 c3	   var31      =	$C3
     85  5000 ????	       00 c4	   var32      =	$C4
     86  5000 ????	       00 c5	   var33      =	$C5
     87  5000 ????	       00 c6	   var34      =	$C6
     88  5000 ????	       00 c7	   var35      =	$C7
     89  5000 ????	       00 c8	   var36      =	$C8
     90  5000 ????	       00 c9	   var37      =	$C9
     91  5000 ????	       00 ca	   var38      =	$CA
     92  5000 ????	       00 cb	   var39      =	$CB
     93  5000 ????	       00 cc	   var40      =	$CC
     94  5000 ????	       00 cd	   var41      =	$CD
     95  5000 ????	       00 ce	   var42      =	$CE
     96  5000 ????	       00 cf	   var43      =	$CF
     97  5000 ????	       00 d0	   var44      =	$D0
     98  5000 ????	       00 d1	   var45      =	$D1
     99  5000 ????	       00 d2	   var46      =	$D2
    100  5000 ????	       00 d3	   var47      =	$D3
    101  5000 ????
    102  5000 ????	       00 d4	   A	      =	$d4
    103  5000 ????	       00 d4	   a	      =	$d4
    104  5000 ????	       00 d5	   B	      =	$d5
    105  5000 ????	       00 d5	   b	      =	$d5
    106  5000 ????	       00 d6	   C	      =	$d6
    107  5000 ????	       00 d6	   c	      =	$d6
    108  5000 ????	       00 d7	   D	      =	$d7
    109  5000 ????	       00 d7	   d	      =	$d7
    110  5000 ????	       00 d8	   E	      =	$d8
    111  5000 ????	       00 d8	   e	      =	$d8
    112  5000 ????	       00 d9	   F	      =	$d9
    113  5000 ????	       00 d9	   f	      =	$d9
    114  5000 ????	       00 da	   G	      =	$da
    115  5000 ????	       00 da	   g	      =	$da
    116  5000 ????	       00 db	   H	      =	$db
    117  5000 ????	       00 db	   h	      =	$db
    118  5000 ????	       00 dc	   I	      =	$dc
    119  5000 ????	       00 dc	   i	      =	$dc
    120  5000 ????	       00 dd	   J	      =	$dd
    121  5000 ????	       00 dd	   j	      =	$dd
    122  5000 ????	       00 de	   K	      =	$de
    123  5000 ????	       00 de	   k	      =	$de
    124  5000 ????	       00 df	   L	      =	$df
    125  5000 ????	       00 df	   l	      =	$df
    126  5000 ????	       00 e0	   M	      =	$e0
    127  5000 ????	       00 e0	   m	      =	$e0
    128  5000 ????	       00 e1	   N	      =	$e1
    129  5000 ????	       00 e1	   n	      =	$e1
    130  5000 ????	       00 e2	   O	      =	$e2
    131  5000 ????	       00 e2	   o	      =	$e2
    132  5000 ????	       00 e3	   P	      =	$e3
    133  5000 ????	       00 e3	   p	      =	$e3
    134  5000 ????	       00 e4	   Q	      =	$e4
    135  5000 ????	       00 e4	   q	      =	$e4
    136  5000 ????	       00 e5	   R	      =	$e5
    137  5000 ????	       00 e5	   r	      =	$e5
    138  5000 ????	       00 e6	   S	      =	$e6
    139  5000 ????	       00 e6	   s	      =	$e6
    140  5000 ????	       00 e7	   T	      =	$e7
    141  5000 ????	       00 e7	   t	      =	$e7
    142  5000 ????	       00 e8	   U	      =	$e8
    143  5000 ????	       00 e8	   u	      =	$e8
    144  5000 ????	       00 e9	   V	      =	$e9
    145  5000 ????	       00 e9	   v	      =	$e9
    146  5000 ????	       00 ea	   W	      =	$ea
    147  5000 ????	       00 ea	   w	      =	$ea
    148  5000 ????	       00 eb	   X	      =	$eb
    149  5000 ????	       00 eb	   x	      =	$eb
    150  5000 ????	       00 ec	   Y	      =	$ec
    151  5000 ????	       00 ec	   y	      =	$ec
    152  5000 ????	       00 ed	   Z	      =	$ed
    153  5000 ????	       00 ed	   z	      =	$ed
    154  5000 ????
    155  5000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  5000 ????	       00 ef	   playfieldpos =	$ef
    157  5000 ????
    158  5000 ????						; available for other uses, or if unused, provide more stack space
    159  5000 ????
    160  5000 ????	       00 f0	   aux1       =	$f0
    161  5000 ????	       00 f1	   aux2       =	$f1
    162  5000 ????	       00 f2	   aux3       =	$f2
    163  5000 ????	       00 f3	   aux4       =	$f3
    164  5000 ????	       00 f4	   aux5       =	$f4
    165  5000 ????	       00 f5	   aux6       =	$f5
    166  5000 ????
    167  5000 ????						; playfield color/height pointers
    168  5000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  5000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  5000 ????						; the above pointers are the same because if color and height are both used together,
    171  5000 ????						; they must used absolute indexed and cannot use pointers
    172  5000 ????
    173  5000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  5000 ????						; upper 3 bits of $f2 contain the number of lives
    175  5000 ????	       00 f4	   lifecolor  =	$f4
    176  5000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  5000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  5000 ????
    179  5000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  5000 ????	       00 f3	   pfscore2   =	$f3
    181  5000 ????	       00 f4	   pfscorecolor =	$f4
    182  5000 ????
    183  5000 ????	       00 f6	   stack1     =	$f6
    184  5000 ????	       00 f7	   stack2     =	$f7
    185  5000 ????	       00 f8	   stack3     =	$f8
    186  5000 ????	       00 f9	   stack4     =	$f9
    187  5000 ????						; the stack bytes above may be used in the kernel
    188  5000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  5000 ????
    190  5000 ????				      MAC	return
    191  5000 ????				      ifnconst	bankswitch
    192  5000 ????				      rts
    193  5000 ????				      else
    194  5000 ????				      jmp	BS_return
    195  5000 ????				      endif
    196  5000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  5000 ????
    198  5000 ????			  -	      ifconst	superchip
    199  5000 ????			  -playfieldbase =	$10D0
    200  5000 ????			  -	      include	superchip.h
    201  5000 ????				      else
    202  5000 ????	       00 a4	   playfieldbase =	$A4
    203  5000 ????				      endif
    204  5000 ????
    205  5000 ????				      ifnconst	pfhalfwidth
    206  5000 ????	       00 04	   pfwidth    =	4
    207  5000 ????	       00 0e	   PF1L       =	PF1
    208  5000 ????	       00 0f	   PF2L       =	PF2
    209  5000 ????	       00 0e	   PF1R       =	PF1
    210  5000 ????	       00 0f	   PF2R       =	PF2
    211  5000 ????	       00 00	   pfadjust   =	0
    212  5000 ????			  -	      else
    213  5000 ????			  -pfwidth    =	2
    214  5000 ????			  -	      ifconst	pfcenter
    215  5000 ????			  -PF1L       =	$3F	; no effect
    216  5000 ????			  -PF2L       =	PF2
    217  5000 ????			  -PF1R       =	$3F
    218  5000 ????			  -PF2R       =	PF2	; no effect
    219  5000 ????			  -pfadjust   =	1
    220  5000 ????			  -	      else
    221  5000 ????			  -PF1L       =	PF1
    222  5000 ????			  -PF2L       =	PF2
    223  5000 ????			  -PF1R       =	$3F	; no effect
    224  5000 ????			  -PF2R       =	$3F	; no effect
    225  5000 ????			  -pfadjust   =	0
    226  5000 ????			  -	      endif
    227  5000 ????				      endif
    228  5000 ????
    229  5000 ????						; define playfield start based on height
    230  5000 ????				      ifnconst	pfres
    231  5000 ????	       00 a4	   playfield  =	playfieldbase
    232  5000 ????			  -	      else
    233  5000 ????			  -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  5000 ????				      endif
------- FILE c:\Users\start\OneDrive\Documents\Visual Code Workspace\Atari-2600-Game\Atari2600.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 ec	   _Bit0_Reset_Restrainer =	y
      5  5000 ????
      6  5000 ????	       00 ec	   _BitOp_01  =	y
      7  5000 ????
      8  5000 ????	       00 01	   PFcolors   =	1
      9  5000 ????	       00 01	   backgroundchange =	1
     10  5000 ????	       00 01	   player1colors =	1
     11  5000 ????	       00 01	   player1colors =	1
     12  5000 ????	       00 01	   playercolors =	1
     13  5000 ????	       00 2b	   vblank_time =	43
     14  5000 ????	       00 25	   overscan_time =	37
     15  5000 ????	       00 03	   bs_mask    =	3
     16  5000 ????	       00 10	   bankswitch =	16
     17  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE c:\Users\start\OneDrive\Documents\Visual Code Workspace\Atari-2600-Game\Atari2600.bas.asm
      8  5000 ????				      ifconst	bankswitch
      9  5000 ????			  -	      if	bankswitch == 8
     10  5000 ????			  -	      ORG	$1000
     11  5000 ????			  -	      RORG	$D000
     12  5000 ????				      endif
     13  5000 ????				      if	bankswitch == 16
     14  1000					      ORG	$1000
     15  1000					      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000
     29  1000					      ifconst	bankswitch_hotspot
     30  1000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  1000				  -	      .byte	0	; stop unexpected bankswitches
     32  1000					      endif
     33  1000					      endif
     34  1000				   game
     35  1000				   .L00 		;  set romsize 16k
     36  1000
     37  1000				   .L01 		;  set tv NTSC
     38  1000
     39  1000				   .L02 		;  set smartbranching on
     40  1000
     41  1000				   .L03 		;  set kernel_options playercolors player1colors pfcolors background
     42  1000
     43  1000				   .L04 		;  set optimization speed
     44  1000
     45  1000				   .L05 		;  set optimization inlinerand
     46  1000
     47  1000				   .L06 		;  set optimization noinlinedata
     48  1000
     49  1000				   .
     50  1000							; 
     51  1000
     52  1000				   .L07 		;  dim _BitOp_01  =  y
     53  1000
     54  1000				   .L08 		;  dim _Bit0_Reset_Restrainer	=  y
     55  1000
     56  1000				   .
     57  1000							; 
     58  1000
     59  1000				   .
     60  1000							; 
     61  1000
     62  1000				   .
     63  1000							; 
     64  1000
     65  1000				   .title
     66  1000							; title
     67  1000
     68  1000				   .
     69  1000							; 
     70  1000
     71  1000				   .L09 		;  if switchreset then goto main
     72  1000
     73  1000		       a9 01		      lda	#1
     74  1002		       2c 82 02 	      bit	SWCHB
     75  1005		       d0 03		      BNE	.skipL09
     76  1007				   .condpart0
     77  1007		       4c 25 90 	      jmp	.main
     78  100a
     79  100a				   .skipL09
     80  100a				   .
     81  100a							; 
     82  100a
     83  100a				   .drawscreen
     84  100a							; drawscreen
     85  100a
     86  100a				   .
     87  100a							; 
     88  100a
     89  100a				   .
     90  100a							; 
     91  100a
     92  100a				   .
     93  100a							; 
     94  100a
     95  100a				   .L010		;  gosub titledrawscreen bank1
     96  100a
     97  100a		       85 ee		      sta	temp7
     98  100c		       a9 90		      lda	#>(ret_point1-1)
     99  100e		       48		      pha
    100  100f		       a9 21		      lda	#<(ret_point1-1)
    101  1011		       48		      pha
    102  1012		       a9 90		      lda	#>(.titledrawscreen-1)
    103  1014		       48		      pha
    104  1015		       a9 51		      lda	#<(.titledrawscreen-1)
    105  1017		       48		      pha
    106  1018		       a5 ee		      lda	temp7
    107  101a		       48		      pha
    108  101b		       8a		      txa
    109  101c		       48		      pha
    110  101d		       a2 01		      ldx	#1
    111  101f		       4c eb ff 	      jmp	BS_jsr
    112  1022				   ret_point1
    113  1022				   .L011		;  goto title
    114  1022
    115  1022		       4c 00 90 	      jmp	.title
    116  1025
    117  1025				   .
    118  1025							; 
    119  1025
    120  1025				   .
    121  1025							; 
    122  1025
    123  1025				   .main
    124  1025							; main
    125  1025
    126  1025				   .L012		;  drawscreen
    127  1025
    128  1025		       85 ee		      sta	temp7
    129  1027		       a9 90		      lda	#>(ret_point2-1)
    130  1029		       48		      pha
    131  102a		       a9 3c		      lda	#<(ret_point2-1)
    132  102c		       48		      pha
    133  102d		       a9 f4		      lda	#>(drawscreen-1)
    134  102f		       48		      pha
    135  1030		       a9 35		      lda	#<(drawscreen-1)
    136  1032		       48		      pha
    137  1033		       a5 ee		      lda	temp7
    138  1035		       48		      pha
    139  1036		       8a		      txa
    140  1037		       48		      pha
    141  1038		       a2 04		      ldx	#4
    142  103a		       4c eb ff 	      jmp	BS_jsr
    143  103d				   ret_point2
    144  103d				   .
    145  103d							; 
    146  103d
    147  103d				   .L013		;  if switchselect then goto title
    148  103d
    149  103d		       a9 02		      lda	#2
    150  103f		       2c 82 02 	      bit	SWCHB
    151  1042		       d0 03		      BNE	.skipL013
    152  1044				   .condpart1
    153  1044		       4c 00 90 	      jmp	.title
    154  1047
    155  1047				   .skipL013
    156  1047				   .
    157  1047							; 
    158  1047
    159  1047				   .
    160  1047							; 
    161  1047
    162  1047				   .L014		;  goto main
    163  1047
    164  1047		       4c 25 90 	      jmp	.main
    165  104a
    166  104a				   .
    167  104a							; 
    168  104a
    169  104a				   .
    170  104a							; 
    171  104a
    172  104a				   .
    173  104a							; 
    174  104a
    175  104a				   .L015		;  bank 1
    176  104a
    177  104a				   .L016		;  temp1 = temp1
    178  104a
    179  104a		       a5 9c		      LDA	temp1
    180  104c		       85 9c		      STA	temp1
    181  104e				   .L017		;  rem use as a Sounds/music bank I guess ^_^;
    182  104e
    183  104e				   .
    184  104e							; 
    185  104e
    186  104e				   .
    187  104e							; 
    188  104e
    189  104e				   .L018		;  bank 1
    190  104e
    191  104e				   .L019		;  temp1 = temp1
    192  104e
    193  104e		       a5 9c		      LDA	temp1
    194  1050		       85 9c		      STA	temp1
    195  1052				   .L020		;  rem for putting the titlekernel inside this back for "title screen"
    196  1052
    197  1052				   .L021		;  asm
    198  1052
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 2
      0  1052					      include	"titlescreen/asm/titlescreen.asm"
      1  1052
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 2
      0  1052					      include	"titlescreen/asm/layoutmacros.asm"
      1  1052
      2  1052							; the macro's used in the "titlescreen_layout.asm" file
      3  1052
      4  1052					      MAC	draw_96x2_1
      5  1052				   mk_96x2_1_on =	1
      6  1052					      jsr	draw_bmp_96x2_1
      7  1052					      ENDM
      8  1052
      9  1052					      MAC	draw_96x2_2
     10  1052				   mk_96x2_2_on =	1
     11  1052					      jsr	draw_bmp_96x2_2
     12  1052					      ENDM
     13  1052
     14  1052					      MAC	draw_96x2_3
     15  1052				   mk_96x2_3_on =	1
     16  1052					      jsr	draw_bmp_96x2_3
     17  1052					      ENDM
     18  1052
     19  1052					      MAC	draw_96x2_4
     20  1052				   mk_96x2_4_on =	1
     21  1052					      jsr	draw_bmp_96x2_4
     22  1052					      ENDM
     23  1052
     24  1052					      MAC	draw_96x2_5
     25  1052				   mk_96x2_5_on =	1
     26  1052					      jsr	draw_bmp_96x2_5
     27  1052					      ENDM
     28  1052
     29  1052					      MAC	draw_96x2_6
     30  1052				   mk_96x2_6_on =	1
     31  1052					      jsr	draw_bmp_96x2_6
     32  1052					      ENDM
     33  1052
     34  1052					      MAC	draw_96x2_7
     35  1052				   mk_96x2_7_on =	1
     36  1052					      jsr	draw_bmp_96x2_7
     37  1052					      ENDM
     38  1052
     39  1052					      MAC	draw_96x2_8
     40  1052				   mk_96x2_8_on =	1
     41  1052					      jsr	draw_bmp_96x2_8
     42  1052					      ENDM
     43  1052
     44  1052					      MAC	draw_48x1_1
     45  1052				   mk_48x1_X_on =	1
     46  1052				   mk_48x1_1_on =	1
     47  1052					      jsr	draw_bmp_48x1_1
     48  1052					      ENDM
     49  1052
     50  1052					      MAC	draw_48x1_2
     51  1052				   mk_48x1_X_on =	1
     52  1052				   mk_48x1_2_on =	1
     53  1052					      jsr	draw_bmp_48x1_2
     54  1052					      ENDM
     55  1052
     56  1052					      MAC	draw_48x1_3
     57  1052				   mk_48x1_X_on =	1
     58  1052				   mk_48x1_3_on =	1
     59  1052					      jsr	draw_bmp_48x1_3
     60  1052					      ENDM
     61  1052
     62  1052					      MAC	draw_48x1_4
     63  1052				   mk_48x1_X_on =	1
     64  1052				   mk_48x1_4_on =	1
     65  1052					      jsr	draw_bmp_48x1_4
     66  1052					      ENDM
     67  1052
     68  1052					      MAC	draw_48x1_5
     69  1052				   mk_48x1_X_on =	1
     70  1052				   mk_48x1_5_on =	1
     71  1052					      jsr	draw_bmp_48x1_5
     72  1052					      ENDM
     73  1052
     74  1052					      MAC	draw_48x1_6
     75  1052				   mk_48x1_X_on =	1
     76  1052				   mk_48x1_6_on =	1
     77  1052					      jsr	draw_bmp_48x1_6
     78  1052					      ENDM
     79  1052
     80  1052					      MAC	draw_48x1_7
     81  1052				   mk_48x1_X_on =	1
     82  1052				   mk_48x1_7_on =	1
     83  1052					      jsr	draw_bmp_48x1_7
     84  1052					      ENDM
     85  1052
     86  1052					      MAC	draw_48x1_8
     87  1052				   mk_48x1_X_on =	1
     88  1052				   mk_48x1_8_on =	1
     89  1052					      jsr	draw_bmp_48x1_8
     90  1052					      ENDM
     91  1052
     92  1052
     93  1052					      MAC	draw_48x2_1
     94  1052				   mk_48x2_X_on =	1
     95  1052				   mk_48x2_1_on =	1
     96  1052					      jsr	draw_bmp_48x2_1
     97  1052					      ENDM
     98  1052
     99  1052					      MAC	draw_48x2_2
    100  1052				   mk_48x2_X_on =	1
    101  1052				   mk_48x2_2_on =	1
    102  1052					      jsr	draw_bmp_48x2_2
    103  1052					      ENDM
    104  1052
    105  1052					      MAC	draw_48x2_3
    106  1052				   mk_48x2_X_on =	1
    107  1052				   mk_48x2_3_on =	1
    108  1052					      jsr	draw_bmp_48x2_3
    109  1052					      ENDM
    110  1052
    111  1052					      MAC	draw_48x2_4
    112  1052				   mk_48x2_X_on =	1
    113  1052				   mk_48x2_4_on =	1
    114  1052					      jsr	draw_bmp_48x2_4
    115  1052					      ENDM
    116  1052
    117  1052					      MAC	draw_48x2_5
    118  1052				   mk_48x2_X_on =	1
    119  1052				   mk_48x2_5_on =	1
    120  1052					      jsr	draw_bmp_48x2_5
    121  1052					      ENDM
    122  1052
    123  1052					      MAC	draw_48x2_6
    124  1052				   mk_48x2_X_on =	1
    125  1052				   mk_48x2_6_on =	1
    126  1052					      jsr	draw_bmp_48x2_6
    127  1052					      ENDM
    128  1052
    129  1052					      MAC	draw_48x2_7
    130  1052				   mk_48x2_X_on =	1
    131  1052				   mk_48x2_7_on =	1
    132  1052					      jsr	draw_bmp_48x2_7
    133  1052					      ENDM
    134  1052
    135  1052					      MAC	draw_48x2_8
    136  1052				   mk_48x2_X_on =	1
    137  1052				   mk_48x2_8_on =	1
    138  1052					      jsr	draw_bmp_48x2_8
    139  1052					      ENDM
    140  1052
    141  1052					      MAC	draw_player
    142  1052				   mk_player_on =	1
    143  1052					      jsr	draw_player_display
    144  1052					      ENDM
    145  1052
    146  1052					      MAC	draw_score
    147  1052				   mk_score_on =	1
    148  1052				   mk_48x1_X_on =	1
    149  1052					      jsr	draw_score_display
    150  1052					      ENDM
    151  1052
    152  1052					      MAC	draw_gameselect
    153  1052				   mk_gameselect_on =	1
    154  1052				   mk_48x1_X_on =	1
    155  1052					      jsr	draw_gameselect_display
    156  1052					      ENDM
    157  1052
    158  1052					      MAC	draw_space
    159  1052					      ldy	#{1}
    160  1052				   .loop
    161  1052					      sta	WSYNC
    162  1052					      dey
    163  1052					      bne	.loop
    164  1052					      ENDM
    165  1052
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 2
      0  1052					      include	"titlescreen/asm/dpcfix.asm"
      1  1052							; reassign variables that DPC+ doesn't have
      2  1052
      3  1052				  -	      ifnconst	aux2
      4  1052				  -aux2       =	player2x
      5  1052					      endif
      6  1052				  -	      ifnconst	aux4
      7  1052				  -aux4       =	player4x
      8  1052					      endif
      9  1052				  -	      ifnconst	aux5
     10  1052				  -aux5       =	player5x
     11  1052					      endif
     12  1052				  -	      ifnconst	aux6
     13  1052				  -aux6       =	player6x
     14  1052					      endif
     15  1052
     16  1052				  -	      ifnconst	player0pointer
     17  1052				  -player0pointer =	player2y
     18  1052					      endif
     19  1052				  -	      ifnconst	player1pointer
     20  1052				  -player1pointer =	player2height	; to player3height
     21  1052					      endif
     22  1052				  -	      ifnconst	player1color
     23  1052				  -player1color =	player4height	; to player5height
     24  1052					      endif
     25  1052				  -	      ifnconst	scorepointers
     26  1052				  -scorepointers =	player6height	; to NUSIZ8
     27  1052					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 2
      0  1052					      include	"titlescreen/titlescreen_layout.asm"
      1  1052
      2  1052							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  1052							; in the order they were listed.
      4  1052							; If a minikernel isn't listed, it won't be compiled into your program, and
      5  1052							; it won't use any rom space.
      6  1052
      7  1052					      MAC	titlescreenlayout
      8  1052					      draw_48x2_1
      9  1052					      draw_48x1_1
     10  1052					      draw_space	6
     11  1052					      draw_48x1_2
     12  1052					      draw_score
     13  1052					      ENDM
------- FILE titlescreen/asm/titlescreen.asm
      5  1052
      6  1052				   .titledrawscreen
      7  1052				   title_eat_overscan
      8  1052							;bB runs in overscan. Wait for the overscan to run out...
      9  1052		       18		      clc
     10  1053		       ad 84 02 	      lda	INTIM
     11  1056		       30 fa		      bmi	title_eat_overscan
     12  1058		       4c 5b 90 	      jmp	title_do_vertical_sync
     13  105b
     14  105b				   title_do_vertical_sync
     15  105b		       a9 02		      lda	#2
     16  105d		       85 02		      sta	WSYNC	;one line with VSYNC
     17  105f		       85 00		      sta	VSYNC	;enable VSYNC
     18  1061		       85 02		      sta	WSYNC	;one line with VSYNC
     19  1063		       85 02		      sta	WSYNC	;one line with VSYNC
     20  1065		       a9 00		      lda	#0
     21  1067		       85 02		      sta	WSYNC	;one line with VSYNC
     22  1069		       85 00		      sta	VSYNC	;turn off VSYNC
     23  106b
     24  106b							;lda #42+128
     25  106b				  -	      ifnconst	vblank_time
     26  106b				  -	      lda	#42+128
     27  106b					      else
     28  106b		       a9 ab		      lda	#vblank_time+128
     29  106d					      endif
     30  106d
     31  106d		       8d 96 02 	      sta	TIM64T
     32  1070
     33  1070		       00 82	   titleframe =	missile0x
     34  1070		       e6 82		      inc	titleframe	; increment the frame counter
     35  1072
     36  1072				  -	      ifconst	.title_vblank
     37  1072				  -	      jsr	.title_vblank
     38  1072					      endif
     39  1072
     40  1072				   title_vblank_loop
     41  1072		       ad 84 02 	      lda	INTIM
     42  1075		       30 fb		      bmi	title_vblank_loop
     43  1077		       a9 00		      lda	#0
     44  1079		       85 02		      sta	WSYNC
     45  107b		       85 01		      sta	VBLANK
     46  107d		       85 1d		      sta	ENAM0
     47  107f		       85 1f		      sta	ENABL
     48  1081
     49  1081				   title_playfield
     50  1081
     51  1081							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  1081
     53  1081		       a9 e6		      lda	#230
     54  1083		       8d 96 02 	      sta	TIM64T
     55  1086
     56  1086		       a9 01		      lda	#1
     57  1088		       85 0a		      sta	CTRLPF
     58  108a		       18		      clc
     59  108b
     60  108b		       a9 00		      lda	#0
     61  108d		       85 0b		      sta	REFP0
     62  108f		       85 0c		      sta	REFP1
     63  1091		       85 02		      sta	WSYNC
     64  1093		       ad d6 90 	      lda	titlescreencolor
     65  1096		       85 09		      sta	COLUBK
     66  1098
      0  1098					      titlescreenlayout
      0  1098					      draw_48x2_1
      1  1098		       00 01	   mk_48x2_X_on =	1
      2  1098		       00 01	   mk_48x2_1_on =	1
      3  1098		       20 67 91 	      jsr	draw_bmp_48x2_1
      0  109b					      draw_48x1_1
      1  109b		       00 01	   mk_48x1_X_on =	1
      2  109b		       00 01	   mk_48x1_1_on =	1
      3  109b		       20 d7 90 	      jsr	draw_bmp_48x1_1
      0  109e					      draw_space	6
      1  109e		       a0 06		      ldy	#6
      2  10a0				   .loop
      3  10a0		       85 02		      sta	WSYNC
      4  10a2		       88		      dey
      5  10a3		       d0 fb		      bne	.loop
      0  10a5					      draw_48x1_2
      1  10a5		       00 01	   mk_48x1_X_on =	1
      2  10a5		       00 01	   mk_48x1_2_on =	1
      3  10a5		       20 1f 91 	      jsr	draw_bmp_48x1_2
      0  10a8					      draw_score
      1  10a8		       00 01	   mk_score_on =	1
      2  10a8		       00 01	   mk_48x1_X_on =	1
      3  10a8		       20 f1 92 	      jsr	draw_score_display
     68  10ab
     69  10ab		       4c 53 94 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  10ae
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 2
      0  10ae					      include	"titlescreen/asm/position48.asm"
      1  10ae
      2  10ae				   position48
      3  10ae
      4  10ae							;postion P0 and P1
      5  10ae
      6  10ae		       85 02		      sta	WSYNC
      7  10b0
      8  10b0		       a9 90		      lda	#$90	;2
      9  10b2		       85 20		      sta	HMP0	;3
     10  10b4		       a9 a0		      lda	#$A0	;2
     11  10b6		       85 21		      sta	HMP1	;3
     12  10b8
     13  10b8		       e6 9c		      inc	temp1
     14  10ba		       c6 9c		      dec	temp1
     15  10bc		       e6 9c		      inc	temp1
     16  10be		       c6 9c		      dec	temp1
     17  10c0		       e6 9c		      inc	temp1
      0  10c2					      sleep	2
      1  10c2				   .CYCLES    SET	2
      2  10c2
      3  10c2				  -	      IF	.CYCLES < 2
      4  10c2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  10c2				  -	      ERR
      6  10c2					      ENDIF
      7  10c2
      8  10c2				  -	      IF	.CYCLES & 1
      9  10c2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  10c2				  -	      nop	0
     11  10c2				  -	      ELSE
     12  10c2				  -	      bit	VSYNC
     13  10c2				  -	      ENDIF
     14  10c2				  -.CYCLES    SET	.CYCLES - 3
     15  10c2					      ENDIF
     16  10c2
     17  10c2					      REPEAT	.CYCLES / 2
     18  10c2		       ea		      nop
     19  10c3					      REPEND
     19  10c3		       85 10		      sta	RESP0	;  +3
     20  10c5		       85 11		      sta	RESP1	;  +3
     21  10c7		       c6 9c		      dec	temp1	;  +5
     22  10c9		       e6 9c		      inc	temp1	;  +5
     23  10cb		       c6 9c		      dec	temp1	;  +5
     24  10cd		       e6 9c		      inc	temp1	;  +5
     25  10cf		       c6 9c		      dec	temp1	;  +5
      0  10d1					      sleep	3
      1  10d1				   .CYCLES    SET	3
      2  10d1
      3  10d1				  -	      IF	.CYCLES < 2
      4  10d1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  10d1				  -	      ERR
      6  10d1					      ENDIF
      7  10d1
      8  10d1					      IF	.CYCLES & 1
      9  10d1					      IFNCONST	NO_ILLEGAL_OPCODES
     10  10d1		       04 00		      nop	0
     11  10d3				  -	      ELSE
     12  10d3				  -	      bit	VSYNC
     13  10d3					      ENDIF
     14  10d3				   .CYCLES    SET	.CYCLES - 3
     15  10d3					      ENDIF
     16  10d3
     17  10d3				  -	      REPEAT	.CYCLES / 2
     18  10d3				  -	      nop
     19  10d3					      REPEND
     27  10d3		       85 2a		      sta	HMOVE	; +76
     28  10d5		       60		      RTS
     29  10d6
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 2
      0  10d6					      include	"titlescreen/titlescreen_color.asm"
      1  10d6
      2  10d6							; This is where the titlescreen background color gets set. 
      3  10d6							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  10d6							; if you want to change the color on the fly.
      5  10d6
      6  10d6				  -	      ifnconst	titlescreencolor
      7  10d6				  -titlescreencolor
      8  10d6					      endif
      9  10d6		       00		      .byte.b	$00
     10  10d7
------- FILE titlescreen/asm/titlescreen.asm
     73  10d7
     74  10d7					      ifconst	mk_48x1_1_on
------- FILE titlescreen/asm/48x1_1_kernel.asm LEVEL 3 PASS 2
      0  10d7					      include	"titlescreen/asm/48x1_1_kernel.asm"
      1  10d7
      2  10d7				   draw_bmp_48x1_1
      3  10d7
      4  10d7		       a9 00		      lda	#0
      5  10d9		       85 1b		      sta	GRP0
      6  10db		       85 1c		      sta	GRP1
      7  10dd
      8  10dd		       a0 0b		      ldy	#11
      9  10df				   bmp_48x1_1_pointersetup
     10  10df		       b9 13 91 	      lda	bmp_48x1_1_values,y
     11  10e2		       99 96 00 	      sta	scorepointers,y
     12  10e5		       88		      dey
     13  10e6		       b9 13 91 	      lda	bmp_48x1_1_values,y
     14  10e9				  -	      ifconst	bmp_48x1_1_index
     15  10e9				  -	      sec
     16  10e9				  -	      sbc	bmp_48x1_1_index
     17  10e9					      endif
     18  10e9		       99 96 00 	      sta	scorepointers,y
     19  10ec		       88		      dey
     20  10ed		       10 f0		      bpl	bmp_48x1_1_pointersetup
     21  10ef
     22  10ef		       a0 56		      ldy	(#bmp_48x1_1_window-1)
     23  10f1		       84 f1		      sty	aux2
     24  10f3
     25  10f3					      ifconst	bmp_48x1_1_background
     26  10f3		       ad 6b 94 	      lda	bmp_48x1_1_background
     27  10f6				  -	      else
     28  10f6				  -	      lda	titlescreencolor
     29  10f6					      endif
     30  10f6		       85 f3		      sta	aux4
     31  10f8
     32  10f8		       ad 68 94 	      lda	bmp_48x1_1_color
     33  10fb		       85 06		      sta	COLUP0	;3
     34  10fd		       85 07		      sta	COLUP1	;3
     35  10ff		       85 2b		      sta	HMCLR	;3
     36  1101
     37  1101		       ad d6 90 	      lda	titlescreencolor
     38  1104		       85 08		      sta	COLUPF
     39  1106
     40  1106					      ifconst	bmp_48x1_1_PF1
     41  1106		       ad 69 94 	      lda	bmp_48x1_1_PF1
     42  1109				  -	      else
     43  1109				  -	      lda	#0
     44  1109				  -	      nop
     45  1109					      endif
     46  1109		       85 0e		      sta	PF1
     47  110b
     48  110b					      ifconst	bmp_48x1_1_PF2
     49  110b		       ad 6a 94 	      lda	bmp_48x1_1_PF2
     50  110e				  -	      else
     51  110e				  -	      lda	#0
     52  110e				  -	      nop
     53  110e					      endif
     54  110e		       85 0f		      sta	PF2
     55  1110
     56  1110		       4c b2 91 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  1113
     58  1113				   bmp_48x1_1_values
     59  1113		       57 95		      .word.w	(bmp_48x1_1_00+#bmp_48x1_1_height-#bmp_48x1_1_window)
     60  1115		       57 96		      .word.w	(bmp_48x1_1_01+#bmp_48x1_1_height-#bmp_48x1_1_window)
     61  1117		       57 97		      .word.w	(bmp_48x1_1_02+#bmp_48x1_1_height-#bmp_48x1_1_window)
     62  1119		       57 98		      .word.w	(bmp_48x1_1_03+#bmp_48x1_1_height-#bmp_48x1_1_window)
     63  111b		       57 99		      .word.w	(bmp_48x1_1_04+#bmp_48x1_1_height-#bmp_48x1_1_window)
     64  111d		       57 9a		      .word.w	(bmp_48x1_1_05+#bmp_48x1_1_height-#bmp_48x1_1_window)
     65  111f
------- FILE titlescreen/asm/titlescreen.asm
     76  111f					      endif		;mk_48x1_1_on
     77  111f
     78  111f					      ifconst	mk_48x1_2_on
------- FILE titlescreen/asm/48x1_2_kernel.asm LEVEL 3 PASS 2
      0  111f					      include	"titlescreen/asm/48x1_2_kernel.asm"
      1  111f
      2  111f				   draw_bmp_48x1_2
      3  111f
      4  111f		       a9 00		      lda	#0
      5  1121		       85 1b		      sta	GRP0
      6  1123		       85 1c		      sta	GRP1
      7  1125
      8  1125		       a0 0b		      ldy	#11
      9  1127				   bmp_48x1_2_pointersetup
     10  1127		       b9 5b 91 	      lda	bmp_48x1_2_values,y
     11  112a		       99 96 00 	      sta	scorepointers,y
     12  112d		       88		      dey
     13  112e		       b9 5b 91 	      lda	bmp_48x1_2_values,y
     14  1131				  -	      ifconst	bmp_48x1_2_index
     15  1131				  -	      sec
     16  1131				  -	      sbc	bmp_48x1_2_index
     17  1131					      endif
     18  1131		       99 96 00 	      sta	scorepointers,y
     19  1134		       88		      dey
     20  1135		       10 f0		      bpl	bmp_48x1_2_pointersetup
     21  1137
     22  1137		       a0 0a		      ldy	(#bmp_48x1_2_window-1)
     23  1139		       84 f1		      sty	aux2
     24  113b
     25  113b					      ifconst	bmp_48x1_2_background
     26  113b		       ad b1 9a 	      lda	bmp_48x1_2_background
     27  113e				  -	      else
     28  113e				  -	      lda	titlescreencolor
     29  113e					      endif
     30  113e		       85 f3		      sta	aux4
     31  1140
     32  1140		       ad ae 9a 	      lda	bmp_48x1_2_color
     33  1143		       85 06		      sta	COLUP0	;3
     34  1145		       85 07		      sta	COLUP1	;3
     35  1147		       85 2b		      sta	HMCLR	;3
     36  1149
     37  1149		       ad d6 90 	      lda	titlescreencolor
     38  114c		       85 08		      sta	COLUPF
     39  114e
     40  114e					      ifconst	bmp_48x1_2_PF1
     41  114e		       ad af 9a 	      lda	bmp_48x1_2_PF1
     42  1151				  -	      else
     43  1151				  -	      lda	#0
     44  1151				  -	      nop
     45  1151					      endif
     46  1151		       85 0e		      sta	PF1
     47  1153
     48  1153					      ifconst	bmp_48x1_2_PF2
     49  1153		       ad b0 9a 	      lda	bmp_48x1_2_PF2
     50  1156				  -	      else
     51  1156				  -	      lda	#0
     52  1156				  -	      nop
     53  1156					      endif
     54  1156		       85 0f		      sta	PF2
     55  1158
     56  1158		       4c b2 91 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  115b
     58  115b				   bmp_48x1_2_values
     59  115b		       b2 9a		      .word.w	(bmp_48x1_2_00+#bmp_48x1_2_height-#bmp_48x1_2_window)
     60  115d		       bd 9a		      .word.w	(bmp_48x1_2_01+#bmp_48x1_2_height-#bmp_48x1_2_window)
     61  115f		       c8 9a		      .word.w	(bmp_48x1_2_02+#bmp_48x1_2_height-#bmp_48x1_2_window)
     62  1161		       d3 9a		      .word.w	(bmp_48x1_2_03+#bmp_48x1_2_height-#bmp_48x1_2_window)
     63  1163		       de 9a		      .word.w	(bmp_48x1_2_04+#bmp_48x1_2_height-#bmp_48x1_2_window)
     64  1165		       e9 9a		      .word.w	(bmp_48x1_2_05+#bmp_48x1_2_height-#bmp_48x1_2_window)
     65  1167
------- FILE titlescreen/asm/titlescreen.asm
     80  1167					      endif		;mk_48x1_2_on
     81  1167
     82  1167				  -	      ifconst	mk_48x1_3_on
     83  1167				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  1167					      endif		;mk_48x1_3_on
     85  1167
     86  1167				  -	      ifconst	mk_48x1_4_on
     87  1167				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  1167					      endif		;mk_48x1_4_on
     89  1167
     90  1167				  -	      ifconst	mk_48x1_5_on
     91  1167				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  1167					      endif		;mk_48x1_5_on
     93  1167
     94  1167				  -	      ifconst	mk_48x1_6_on
     95  1167				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  1167					      endif		;mk_48x1_6_on
     97  1167
     98  1167				  -	      ifconst	mk_48x1_7_on
     99  1167				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  1167					      endif		;mk_48x1_7_on
    101  1167
    102  1167				  -	      ifconst	mk_48x1_8_on
    103  1167				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  1167					      endif		;mk_48x1_8_on
    105  1167
    106  1167					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 2
      0  1167					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  1167
      2  1167				   draw_bmp_48x2_1
      3  1167
      4  1167		       a9 00		      lda	#<(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
      5  1169				  -	      ifconst	bmp_48x2_1_index
      6  1169				  -	      sec
      7  1169				  -	      sbc	bmp_48x2_1_index
      8  1169					      endif
      9  1169		       85 f4		      sta	aux5+0
     10  116b		       a9 9b		      lda	#>(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
     11  116d		       85 f5		      sta	aux5+1
     12  116f
     13  116f		       a0 0b		      ldy	#11
     14  1171				   bmp_48x2_1_pointersetup
     15  1171		       b9 a6 91 	      lda	bmp_48x2_1_values,y
     16  1174		       99 96 00 	      sta	scorepointers,y
     17  1177		       88		      dey
     18  1178		       b9 a6 91 	      lda	bmp_48x2_1_values,y
     19  117b				  -	      ifconst	bmp_48x2_1_index
     20  117b				  -	      sec
     21  117b				  -	      sbc	bmp_48x2_1_index
     22  117b					      endif
     23  117b		       99 96 00 	      sta	scorepointers,y
     24  117e		       88		      dey
     25  117f		       10 f0		      bpl	bmp_48x2_1_pointersetup
     26  1181
     27  1181
     28  1181		       a0 15		      ldy	#(bmp_48x2_1_window-1)
     29  1183		       84 f1		      sty	aux2
     30  1185
     31  1185		       c8		      iny
     32  1186		       b1 f4		      lda	(aux5),y
     33  1188		       88		      dey
     34  1189
     35  1189		       85 06		      sta	COLUP0	;3
     36  118b		       85 07		      sta	COLUP1	;3
     37  118d		       85 2b		      sta	HMCLR	;3
     38  118f
     39  118f		       ad d6 90 	      lda	titlescreencolor
     40  1192		       85 08		      sta	COLUPF
     41  1194
     42  1194					      ifconst	bmp_48x2_1_background
     43  1194		       ad 19 9b 	      lda	bmp_48x2_1_background
     44  1197				  -	      else
     45  1197				  -	      lda	titlescreencolor
     46  1197					      endif
     47  1197		       85 f3		      sta	aux4
     48  1199					      ifconst	bmp_48x2_1_PF1
     49  1199		       ad 17 9b 	      lda	bmp_48x2_1_PF1
     50  119c				  -	      else
     51  119c				  -	      lda	#0
     52  119c				  -	      nop
     53  119c					      endif
     54  119c		       85 0e		      sta	PF1
     55  119e
     56  119e					      ifconst	bmp_48x2_1_PF2
     57  119e		       ad 18 9b 	      lda	bmp_48x2_1_PF2
     58  11a1				  -	      else
     59  11a1				  -	      lda	#0
     60  11a1				  -	      nop
     61  11a1					      endif
     62  11a1		       85 0f		      sta	PF2
     63  11a3
     64  11a3		       4c 46 92 	      jmp	draw_bmp_48x2_X
     65  11a6
     66  11a6				   bmp_48x2_1_values
     67  11a6		       1a 9b		      .word.w	(bmp_48x2_1_00+#bmp_48x2_1_height-#bmp_48x2_1_window)
     68  11a8		       30 9b		      .word.w	(bmp_48x2_1_01+#bmp_48x2_1_height-#bmp_48x2_1_window)
     69  11aa		       46 9b		      .word.w	(bmp_48x2_1_02+#bmp_48x2_1_height-#bmp_48x2_1_window)
     70  11ac		       5c 9b		      .word.w	(bmp_48x2_1_03+#bmp_48x2_1_height-#bmp_48x2_1_window)
     71  11ae		       72 9b		      .word.w	(bmp_48x2_1_04+#bmp_48x2_1_height-#bmp_48x2_1_window)
     72  11b0		       88 9b		      .word.w	(bmp_48x2_1_05+#bmp_48x2_1_height-#bmp_48x2_1_window)
     73  11b2
------- FILE titlescreen/asm/titlescreen.asm
    108  11b2					      endif		;mk_48x2_1_on
    109  11b2
    110  11b2				  -	      ifconst	mk_48x2_2_on
    111  11b2				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  11b2					      endif		;mk_48x2_2_on
    113  11b2
    114  11b2				  -	      ifconst	mk_48x2_3_on
    115  11b2				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  11b2					      endif		;mk_48x2_3_on
    117  11b2
    118  11b2				  -	      ifconst	mk_48x2_4_on
    119  11b2				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  11b2					      endif		;mk_48x2_4_on
    121  11b2
    122  11b2				  -	      ifconst	mk_48x2_5_on
    123  11b2				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  11b2					      endif		;mk_48x2_5_on
    125  11b2
    126  11b2				  -	      ifconst	mk_48x2_6_on
    127  11b2				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  11b2					      endif		;mk_48x2_6_on
    129  11b2
    130  11b2				  -	      ifconst	mk_48x2_7_on
    131  11b2				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  11b2					      endif		;mk_48x2_7_on
    133  11b2
    134  11b2				  -	      ifconst	mk_48x2_8_on
    135  11b2				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  11b2					      endif		;mk_48x2_8_on
    137  11b2
    138  11b2					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 2
      0  11b2					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  11b2				   draw_bmp_48x1_X
      2  11b2
      3  11b2		       a9 03		      lda	#3
      4  11b4		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      5  11b6		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
      6  11b8
      7  11b8		       ba		      tsx
      8  11b9		       86 f6		      stx	stack1	;save the stack pointer
      9  11bb
     10  11bb		       20 ae 90 	      jsr	position48
     11  11be
     12  11be		       a9 03		      lda	#3	;2
     13  11c0		       85 25		      sta	VDELP0	;3
     14  11c2		       85 26		      sta	VDELP1	;3
     15  11c4
     16  11c4		       a9 01		      lda	#1	;2
     17  11c6		       85 0a		      sta	CTRLPF	;3
     18  11c8
     19  11c8							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  11c8		       85 2b		      sta	HMCLR
     21  11ca
     22  11ca		       85 02		      sta	WSYNC
     23  11cc
     24  11cc		       e6 9c		      inc	temp1	;5
     25  11ce		       c6 9c		      dec	temp1	;5
     26  11d0		       e6 9c		      inc	temp1	;5
     27  11d2		       c6 9c		      dec	temp1	;5
     28  11d4		       e6 9c		      inc	temp1	;5
     29  11d6		       c6 9c		      dec	temp1	;5
     30  11d8		       e6 9c		      inc	temp1	;5
     31  11da		       c6 9c		      dec	temp1	;5
     32  11dc		       e6 9c		      inc	temp1	;5
     33  11de		       c6 9c		      dec	temp1	;5
     34  11e0
      0  11e0					      sleep	5
      1  11e0				   .CYCLES    SET	5
      2  11e0
      3  11e0				  -	      IF	.CYCLES < 2
      4  11e0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  11e0				  -	      ERR
      6  11e0					      ENDIF
      7  11e0
      8  11e0					      IF	.CYCLES & 1
      9  11e0					      IFNCONST	NO_ILLEGAL_OPCODES
     10  11e0		       04 00		      nop	0
     11  11e2				  -	      ELSE
     12  11e2				  -	      bit	VSYNC
     13  11e2					      ENDIF
     14  11e2				   .CYCLES    SET	.CYCLES - 3
     15  11e2					      ENDIF
     16  11e2
     17  11e2					      REPEAT	.CYCLES / 2
     18  11e2		       ea		      nop
     19  11e3					      REPEND
     36  11e3
     37  11e3		       c8		      iny
     38  11e4
     39  11e4		       4c 00 92 	      jmp	pf48x1_X_loop_entry
     40  11e7
     41  11e7					      if	>. != >[.+$2a]
     42  1200		       00 00 00 00*	      align	256
     43  1200					      endif
     44  1200
     45  1200				   pf48x1_X_loop_entry
     46  1200				   pf48x1_X_loop
     47  1200		       88		      dey		;2
     48  1201		       84 f1		      sty	aux2	;3
     49  1203		       b1 96		      lda	(scorepointers+0),y	;5
     50  1205		       85 1b		      sta	GRP0	;3
     51  1207
     52  1207		       b1 98		      lda	(scorepointers+2),y	;5
     53  1209		       85 1c		      sta	GRP1	;3
     54  120b		       b1 9a		      lda	(scorepointers+4),y	;5
     55  120d		       85 1b		      sta	GRP0	;3
     56  120f
      0  120f					      sleep	2	; I could make this indirect, if we want to burn more rom
      1  120f				   .CYCLES    SET	2
      2  120f
      3  120f				  -	      IF	.CYCLES < 2
      4  120f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  120f				  -	      ERR
      6  120f					      ENDIF
      7  120f
      8  120f				  -	      IF	.CYCLES & 1
      9  120f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  120f				  -	      nop	0
     11  120f				  -	      ELSE
     12  120f				  -	      bit	VSYNC
     13  120f				  -	      ENDIF
     14  120f				  -.CYCLES    SET	.CYCLES - 3
     15  120f					      ENDIF
     16  120f
     17  120f					      REPEAT	.CYCLES / 2
     18  120f		       ea		      nop
     19  1210					      REPEND
     58  1210		       a5 f3		      lda	aux4	;3
     59  1212		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  1214
     61  1214		       b3 a0		      lax	(scorepointers+10),y	;5
     62  1216		       b1 9e		      lda	(scorepointers+8),y	;5
     63  1218		       85 f7		      sta	stack2	;3
     64  121a		       b1 9c		      lda	(scorepointers+6),y	;5
     65  121c		       a4 f7		      ldy	stack2	;3
     66  121e
     67  121e		       85 1c		      sta	GRP1	;3
     68  1220		       84 1b		      sty	GRP0	;3
     69  1222		       86 1c		      stx	GRP1	;3
     70  1224		       84 1b		      sty	GRP0	;3
     71  1226
     72  1226		       a4 f1		      ldy	aux2	;3
     73  1228		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  122a
     75  122a				   pf48x1_X_codeend
     76  122a							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  122a
     78  122a		       a9 00		      lda	#0
     79  122c		       85 1b		      sta	GRP0
     80  122e		       85 1c		      sta	GRP1
     81  1230		       85 1b		      sta	GRP0
     82  1232		       85 1c		      sta	GRP1
     83  1234		       85 1f		      sta	ENABL
     84  1236		       85 1d		      sta	ENAM0
     85  1238		       85 25		      sta	VDELP0
     86  123a		       85 26		      sta	VDELP1
     87  123c		       85 0d		      sta	PF0
     88  123e		       85 0e		      sta	PF1
     89  1240		       85 0f		      sta	PF2
     90  1242
     91  1242		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  1244		       9a		      txs
     93  1245		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  1246					      endif		;mk_48x1_X_on
    141  1246
    142  1246					      ifconst	mk_48x2_X_on
------- FILE titlescreen/asm/48x2_X_kernel.asm LEVEL 3 PASS 2
      0  1246					      include	"titlescreen/asm/48x2_X_kernel.asm"
      1  1246				   draw_bmp_48x2_X
      2  1246
      3  1246		       a9 00		      lda	#0
      4  1248		       85 1b		      sta	GRP0
      5  124a		       85 1c		      sta	GRP1
      6  124c
      7  124c		       a9 03		      lda	#3
      8  124e		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      9  1250		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     10  1252
     11  1252		       ba		      tsx
     12  1253		       86 f6		      stx	stack1	;save the stack pointer
     13  1255
     14  1255		       20 ae 90 	      jsr	position48
     15  1258
     16  1258		       a9 03		      lda	#3	;2
     17  125a		       85 25		      sta	VDELP0	;3
     18  125c		       85 26		      sta	VDELP1	;3
     19  125e
     20  125e		       a9 01		      lda	#1	;2
     21  1260		       85 0a		      sta	CTRLPF	;3
     22  1262
     23  1262							;enough cycles have passed for the HMOV, so we can clear HMCLR
     24  1262		       85 2b		      sta	HMCLR
     25  1264		       85 02		      sta	WSYNC
     26  1266
     27  1266
     28  1266							;sleep (63)		;63
     29  1266		       e6 9c		      inc	temp1
     30  1268		       c6 9c		      dec	temp1
     31  126a		       e6 9c		      inc	temp1
     32  126c		       c6 9c		      dec	temp1
     33  126e		       e6 9c		      inc	temp1
     34  1270		       c6 9c		      dec	temp1
     35  1272		       e6 9c		      inc	temp1
     36  1274		       c6 9c		      dec	temp1
     37  1276		       e6 9c		      inc	temp1
     38  1278		       c6 9c		      dec	temp1
     39  127a		       e6 9c		      inc	temp1
     40  127c		       c6 9c		      dec	temp1
      0  127e					      sleep	3
      1  127e				   .CYCLES    SET	3
      2  127e
      3  127e				  -	      IF	.CYCLES < 2
      4  127e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  127e				  -	      ERR
      6  127e					      ENDIF
      7  127e
      8  127e					      IF	.CYCLES & 1
      9  127e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  127e		       04 00		      nop	0
     11  1280				  -	      ELSE
     12  1280				  -	      bit	VSYNC
     13  1280					      ENDIF
     14  1280				   .CYCLES    SET	.CYCLES - 3
     15  1280					      ENDIF
     16  1280
     17  1280				  -	      REPEAT	.CYCLES / 2
     18  1280				  -	      nop
     19  1280					      REPEND
     42  1280
     43  1280		       a5 f3		      lda	aux4	;3
     44  1282		       85 08		      sta	COLUPF	;3
     45  1284
     46  1284		       4c 87 92 	      jmp	pf48x2_X_loop	;3
     47  1287
     48  1287				  -	      if	>. != >[.+$52]
     49  1287				  -	      align	256
     50  1287					      endif
     51  1287
     52  1287				   pf48x2_X_loop
     53  1287
     54  1287		       b1 96		      lda	(scorepointers+0),y	;5
     55  1289		       85 1b		      sta	GRP0	;3
     56  128b		       b1 98		      lda	(scorepointers+2),y	;5
     57  128d		       85 1c		      sta	GRP1	;3
     58  128f		       b1 9a		      lda	(scorepointers+4),y	;5
     59  1291		       85 1b		      sta	GRP0	;3
     60  1293
     61  1293		       b3 a0		      lax	(scorepointers+10),y	;5
     62  1295		       b1 9e		      lda	(scorepointers+8),y	;5
     63  1297		       85 f7		      sta	stack2	;3
     64  1299		       b1 9c		      lda	(scorepointers+6),y	;5
     65  129b		       a4 f7		      ldy	stack2	;3
     66  129d
     67  129d		       85 1c		      sta	GRP1	;3
     68  129f		       84 1b		      sty	GRP0	;3
     69  12a1		       86 1c		      stx	GRP1	;3
     70  12a3		       84 1b		      sty	GRP0	;3
     71  12a5
     72  12a5		       a4 f1		      ldy	aux2	;3
     73  12a7
     74  12a7		       b1 f4		      lda	(aux5),y	;5
     75  12a9		       85 91		      sta	missile0y	;3
     76  12ab
      0  12ab					      sleep	3
      1  12ab				   .CYCLES    SET	3
      2  12ab
      3  12ab				  -	      IF	.CYCLES < 2
      4  12ab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  12ab				  -	      ERR
      6  12ab					      ENDIF
      7  12ab
      8  12ab					      IF	.CYCLES & 1
      9  12ab					      IFNCONST	NO_ILLEGAL_OPCODES
     10  12ab		       04 00		      nop	0
     11  12ad				  -	      ELSE
     12  12ad				  -	      bit	VSYNC
     13  12ad					      ENDIF
     14  12ad				   .CYCLES    SET	.CYCLES - 3
     15  12ad					      ENDIF
     16  12ad
     17  12ad				  -	      REPEAT	.CYCLES / 2
     18  12ad				  -	      nop
     19  12ad					      REPEND
     78  12ad
     79  12ad		       c6 f1		      dec	aux2	;5
     80  12af
     81  12af
     82  12af		       b1 96		      lda	(scorepointers+0),y	;5
     83  12b1		       85 1b		      sta	GRP0	;3
     84  12b3		       b1 98		      lda	(scorepointers+2),y	;5
     85  12b5		       85 1c		      sta	GRP1	;3
     86  12b7		       b1 9a		      lda	(scorepointers+4),y	;5
     87  12b9		       85 1b		      sta	GRP0	;3
     88  12bb
     89  12bb		       b3 a0		      lax	(scorepointers+10),y	;5
     90  12bd		       b1 9e		      lda	(scorepointers+8),y	;5
     91  12bf		       85 f7		      sta	stack2	;3
     92  12c1		       b1 9c		      lda	(scorepointers+6),y	;5
     93  12c3		       a4 f7		      ldy	stack2	;3
     94  12c5
     95  12c5		       85 1c		      sta	GRP1	;3
     96  12c7		       84 1b		      sty	GRP0	;3
     97  12c9		       86 1c		      stx	GRP1	;3
     98  12cb		       84 1b		      sty	GRP0	;3
     99  12cd
      0  12cd					      sleep	4
      1  12cd				   .CYCLES    SET	4
      2  12cd
      3  12cd				  -	      IF	.CYCLES < 2
      4  12cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  12cd				  -	      ERR
      6  12cd					      ENDIF
      7  12cd
      8  12cd				  -	      IF	.CYCLES & 1
      9  12cd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  12cd				  -	      nop	0
     11  12cd				  -	      ELSE
     12  12cd				  -	      bit	VSYNC
     13  12cd				  -	      ENDIF
     14  12cd				  -.CYCLES    SET	.CYCLES - 3
     15  12cd					      ENDIF
     16  12cd
     17  12cd					      REPEAT	.CYCLES / 2
     18  12cd		       ea		      nop
     17  12cd					      REPEND
     18  12ce		       ea		      nop
     19  12cf					      REPEND
    101  12cf
    102  12cf		       a5 91		      lda	missile0y
    103  12d1		       85 07		      sta	COLUP1
    104  12d3		       85 06		      sta	COLUP0
    105  12d5
    106  12d5		       a4 f1		      ldy	aux2	;3
    107  12d7		       10 ae		      bpl	pf48x2_X_loop	;2/3
    108  12d9
    109  12d9
    110  12d9				   pf48x2_X_codeend
    111  12d9							;echo "critical code in 48x2 is ",(pf48x2_X_codeend-pf48x2_X_loop), " bytes long."
    112  12d9
    113  12d9		       a9 00		      lda	#0
    114  12db		       85 1b		      sta	GRP0
    115  12dd		       85 1c		      sta	GRP1
    116  12df		       85 1b		      sta	GRP0
    117  12e1		       85 1c		      sta	GRP1
    118  12e3		       85 25		      sta	VDELP0
    119  12e5		       85 26		      sta	VDELP1
    120  12e7		       85 0d		      sta	PF0
    121  12e9		       85 0e		      sta	PF1
    122  12eb		       85 0f		      sta	PF2
    123  12ed
    124  12ed		       a6 f6		      ldx	stack1	;restore the stack pointer
    125  12ef		       9a		      txs
    126  12f0		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    144  12f1					      endif		;mk_48x2_X_on
    145  12f1
    146  12f1
    147  12f1				  -	      ifconst	mk_96x2_1_on
    148  12f1				  -	      include	"titlescreen/asm/96x2_1_kernel.asm"
    149  12f1					      endif		;mk_96x2_1_on
    150  12f1
    151  12f1				  -	      ifconst	mk_96x2_2_on
    152  12f1				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  12f1					      endif		;mk_96x2_2_on
    154  12f1
    155  12f1				  -	      ifconst	mk_96x2_3_on
    156  12f1				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  12f1					      endif		;mk_96x2_3_on
    158  12f1
    159  12f1				  -	      ifconst	mk_96x2_4_on
    160  12f1				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  12f1					      endif		;mk_96x2_4_on
    162  12f1
    163  12f1				  -	      ifconst	mk_96x2_5_on
    164  12f1				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  12f1					      endif		;mk_96x2_5_on
    166  12f1
    167  12f1				  -	      ifconst	mk_96x2_6_on
    168  12f1				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  12f1					      endif		;mk_96x2_6_on
    170  12f1
    171  12f1				  -	      ifconst	mk_96x2_7_on
    172  12f1				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  12f1					      endif		;mk_96x2_7_on
    174  12f1
    175  12f1				  -	      ifconst	mk_96x2_8_on
    176  12f1				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  12f1					      endif		;mk_96x2_8_on
    178  12f1
    179  12f1					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 2
      0  12f1					      include	"titlescreen/asm/score_kernel.asm"
      1  12f1							; The batari Basic score kernel
      2  12f1							; This minikernel is not under the same license as the rest of the
      3  12f1							; titlescreen code. Refer to the bB license before you use this in
      4  12f1							; a non-bB program.
      5  12f1
      6  12f1				   draw_score_display
      7  12f1
      8  12f1		       a7 93		      lax	score+0
      9  12f3		       20 43 94 	      jsr	miniscorepointerset
     10  12f6		       84 9e		      sty	scorepointers+8
     11  12f8		       86 96		      stx	scorepointers+0
     12  12fa		       a7 94		      lax	score+1
     13  12fc		       20 43 94 	      jsr	miniscorepointerset
     14  12ff		       84 9a		      sty	scorepointers+4
     15  1301		       86 9c		      stx	scorepointers+6
     16  1303		       a7 95		      lax	score+2
     17  1305		       20 43 94 	      jsr	miniscorepointerset
     18  1308		       84 a0		      sty	scorepointers+10
     19  130a		       86 98		      stx	scorepointers+2
     20  130c
     21  130c		       85 2b		      sta	HMCLR
     22  130e		       ba		      tsx
     23  130f		       86 f6		      stx	stack1
     24  1311							;ldx #$20
     25  1311		       a2 60		      ldx	#$60
     26  1313		       86 20		      stx	HMP0
     27  1315
     28  1315		       a2 00		      ldx	#0
     29  1317		       85 02		      sta	WSYNC	;   0
     30  1319		       86 1b		      STx	GRP0	; 3 3
     31  131b		       86 1c		      STx	GRP1	; 3 6 seems to be needed because of vdel
     32  131d
      0  131d					      sleep	7	; 7 13
      1  131d				   .CYCLES    SET	7
      2  131d
      3  131d				  -	      IF	.CYCLES < 2
      4  131d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  131d				  -	      ERR
      6  131d					      ENDIF
      7  131d
      8  131d					      IF	.CYCLES & 1
      9  131d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  131d		       04 00		      nop	0
     11  131f				  -	      ELSE
     12  131f				  -	      bit	VSYNC
     13  131f					      ENDIF
     14  131f				   .CYCLES    SET	.CYCLES - 3
     15  131f					      ENDIF
     16  131f
     17  131f					      REPEAT	.CYCLES / 2
     18  131f		       ea		      nop
     17  131f					      REPEND
     18  1320		       ea		      nop
     19  1321					      REPEND
     34  1321
     35  1321		       a9 9b		      lda	#>miniscoretable	; 2 15
     36  1323		       95 97		      sta	scorepointers+1,x	; 4 19
     37  1325		       95 99		      sta	scorepointers+3,x	; 4 23
     38  1327		       95 9b		      sta	scorepointers+5,x	; 4 27
     39  1329		       95 9d		      sta	scorepointers+7,x	; 4 31
     40  132b		       95 9f		      sta	scorepointers+9,x	; 4 35
     41  132d		       95 a1		      sta	scorepointers+11,x	; 4 39
     42  132f
     43  132f		       a0 07		      LDY	#7	; 2 41
     44  1331		       85 10		      STA	RESP0	; 3 44
     45  1333		       85 11		      STA	RESP1	; 3 47
     46  1335
     47  1335		       a9 03		      LDA	#$03	; 2 49
     48  1337		       85 04		      STA	NUSIZ0	; 3 52
     49  1339		       95 05		      STA	NUSIZ1,x	; 4 56
     50  133b		       85 25		      STA	VDELP0	; 3 59
     51  133d		       85 26		      STA	VDELP1	; 3 62
     52  133f							;LDA #$30		; 2 64
     53  133f		       a9 70		      LDA	#$70	; 2 64
     54  1341		       85 21		      STA	HMP1	; 3 67
     55  1343		       a5 a3		      LDA	scorecolor	; 3 70
     56  1345		       85 2a		      STA	HMOVE	; cycle 73 ?
     57  1347				  -	      ifconst	score_kernel_fade
     58  1347				  -	      and	score_kernel_fade
     59  1347					      endif
     60  1347
     61  1347		       85 06		      STA	COLUP0
     62  1349		       85 07		      STA	COLUP1
     63  134b				  -	      ifconst	scorefade
     64  134b				  -	      STA	stack2	; scorefade
     65  134b					      endif
     66  134b		       b1 96		      lda	(scorepointers),y
     67  134d		       85 1b		      sta	GRP0
     68  134f		       b1 9e		      lda	(scorepointers+8),y
     69  1351		       85 02		      sta	WSYNC
      0  1353					      sleep	2
      1  1353				   .CYCLES    SET	2
      2  1353
      3  1353				  -	      IF	.CYCLES < 2
      4  1353				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1353				  -	      ERR
      6  1353					      ENDIF
      7  1353
      8  1353				  -	      IF	.CYCLES & 1
      9  1353				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1353				  -	      nop	0
     11  1353				  -	      ELSE
     12  1353				  -	      bit	VSYNC
     13  1353				  -	      ENDIF
     14  1353				  -.CYCLES    SET	.CYCLES - 3
     15  1353					      ENDIF
     16  1353
     17  1353					      REPEAT	.CYCLES / 2
     18  1353		       ea		      nop
     19  1354					      REPEND
     71  1354		       4c 0b 94 	      jmp	beginscoreloop
     72  1357
     73  1357					      if	((<*)>$28)
     74  1400		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     75  1400					      endif
     76  1400
     77  1400				   scoreloop2
     78  1400				  -	      ifconst	scorefade
     79  1400				  -	      lda	stack2
     80  1400				  -	      sta	COLUP0
     81  1400				  -	      sta	COLUP1
     82  1400					      else
      0  1400					      sleep	9
      1  1400				   .CYCLES    SET	9
      2  1400
      3  1400				  -	      IF	.CYCLES < 2
      4  1400				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1400				  -	      ERR
      6  1400					      ENDIF
      7  1400
      8  1400					      IF	.CYCLES & 1
      9  1400					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1400		       04 00		      nop	0
     11  1402				  -	      ELSE
     12  1402				  -	      bit	VSYNC
     13  1402					      ENDIF
     14  1402				   .CYCLES    SET	.CYCLES - 3
     15  1402					      ENDIF
     16  1402
     17  1402					      REPEAT	.CYCLES / 2
     18  1402		       ea		      nop
     17  1402					      REPEND
     18  1403		       ea		      nop
     17  1403					      REPEND
     18  1404		       ea		      nop
     19  1405					      REPEND
     84  1405					      endif
     85  1405		       b1 96		      lda	(scorepointers),y	;+5  68  204
     86  1407		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     87  1409		       b1 9e		      lda	(scorepointers+$8),y	;+5   5   15
     88  140b							; cycle 0
     89  140b				   beginscoreloop
     90  140b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
     91  140d		       b1 9c		      lda	(scorepointers+$6),y	;+5  13   39
     92  140f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
     93  1411		       b3 98		      lax	(scorepointers+$2),y	;+5  29   87
     94  1413		       9a		      txs
     95  1414		       b3 9a		      lax	(scorepointers+$4),y	;+5  36  108
     96  1416
     97  1416				  -	      ifconst	scorefade
     98  1416				  -	      dec	stack2
     99  1416					      else
      0  1416					      sleep	5
      1  1416				   .CYCLES    SET	5
      2  1416
      3  1416				  -	      IF	.CYCLES < 2
      4  1416				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1416				  -	      ERR
      6  1416					      ENDIF
      7  1416
      8  1416					      IF	.CYCLES & 1
      9  1416					      IFNCONST	NO_ILLEGAL_OPCODES
     10  1416		       04 00		      nop	0
     11  1418				  -	      ELSE
     12  1418				  -	      bit	VSYNC
     13  1418					      ENDIF
     14  1418				   .CYCLES    SET	.CYCLES - 3
     15  1418					      ENDIF
     16  1418
     17  1418					      REPEAT	.CYCLES / 2
     18  1418		       ea		      nop
     19  1419					      REPEND
    101  1419					      endif
      0  1419					      sleep	2
      1  1419				   .CYCLES    SET	2
      2  1419
      3  1419				  -	      IF	.CYCLES < 2
      4  1419				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  1419				  -	      ERR
      6  1419					      ENDIF
      7  1419
      8  1419				  -	      IF	.CYCLES & 1
      9  1419				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  1419				  -	      nop	0
     11  1419				  -	      ELSE
     12  1419				  -	      bit	VSYNC
     13  1419				  -	      ENDIF
     14  1419				  -.CYCLES    SET	.CYCLES - 3
     15  1419					      ENDIF
     16  1419
     17  1419					      REPEAT	.CYCLES / 2
     18  1419		       ea		      nop
     19  141a					      REPEND
    103  141a
    104  141a		       b1 a0		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    105  141c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    106  141e		       ba		      tsx
    107  141f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    108  1421		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    109  1423
    110  1423		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    111  1425		       88		      dey
    112  1426		       10 d8		      bpl	scoreloop2	;+2  60  180
    113  1428				   scoreloop2end
    114  1428
    115  1428							;echo "critical size: ",(scoreloop2end-scoreloop2)
    116  1428
    117  1428
    118  1428		       a6 f6		      ldx	stack1
    119  142a		       9a		      txs
    120  142b
    121  142b		       a9 00		      LDA	#0
    122  142d		       85 0e		      sta	PF1
    123  142f		       85 1b		      STA	GRP0
    124  1431		       85 1c		      STA	GRP1
    125  1433		       85 25		      STA	VDELP0
    126  1435		       85 26		      STA	VDELP1
    127  1437		       85 04		      STA	NUSIZ0
    128  1439		       85 05		      STA	NUSIZ1
    129  143b
    130  143b							; clear out the score pointers in case they're stolen DPC variables...
    131  143b		       a2 0b		      ldx	#11
    132  143d				   clearscoreploop
    133  143d		       95 96		      sta	scorepointers,x
    134  143f		       ca		      dex
    135  1440		       10 fb		      bpl	clearscoreploop
    136  1442
    137  1442
    138  1442							;;ldy temp3
    139  1442							;ldy scorepointers+8
    140  1442							;sty scorepointers+3
    141  1442
    142  1442							;;ldy temp5
    143  1442							;ldy scorepointers+10
    144  1442							;sty scorepointers+5
    145  1442		       60		      rts
    146  1443
    147  1443				   miniscorepointerset
    148  1443		       29 0f		      and	#$0F
    149  1445		       0a		      asl
    150  1446		       0a		      asl
    151  1447		       0a		      asl
    152  1448		       69 9e		      adc	#<miniscoretable
    153  144a		       a8		      tay
    154  144b		       8a		      txa
    155  144c		       29 f0		      and	#$F0
    156  144e		       4a		      lsr
    157  144f		       69 9e		      adc	#<miniscoretable
    158  1451		       aa		      tax
    159  1452		       60		      rts
    160  1453
------- FILE titlescreen/asm/titlescreen.asm
    181  1453					      endif		;mk_score_on
    182  1453
    183  1453				  -	      ifconst	mk_gameselect_on
    184  1453				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    185  1453					      endif		;mk_gameselect_on
    186  1453
    187  1453				   PFWAIT
    188  1453		       ad 84 02 	      lda	INTIM
    189  1456		       d0 fb		      bne	PFWAIT
    190  1458		       85 02		      sta	WSYNC
    191  145a
    192  145a				   OVERSCAN
    193  145a				  -	      ifnconst	overscan_time
    194  145a				  -	      lda	#34+128
    195  145a					      else
    196  145a		       a9 a0		      lda	#overscan_time+128-5
    197  145c					      endif
    198  145c		       8d 96 02 	      sta	TIM64T
    199  145f
    200  145f							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  145f				  -	      ifconst	player9height
    202  145f				  -	      ldy	#8
    203  145f				  -	      lda	#0
    204  145f				  -	      sta	player0height
    205  145f				  -.playerheightfixloop
    206  145f				  -	      sta	player1height,y
    207  145f				  -	      ifconst	_NUSIZ1
    208  145f				  -	      sta	_NUSIZ1,y
    209  145f				  -	      endif
    210  145f				  -	      dey
    211  145f				  -	      bpl	.playerheightfixloop
    212  145f					      endif
    213  145f
    214  145f		       a9 c2		      lda	#%11000010
    215  1461		       85 02		      sta	WSYNC
    216  1463		       85 01		      sta	VBLANK
      0  1465					      RETURN
      1  1465				  -	      ifnconst	bankswitch
      2  1465				  -	      rts
      3  1465					      else
      4  1465		       4c dd ff 	      jmp	BS_return
      5  1468					      endif
    218  1468
    219  1468					      ifconst	mk_48x1_1_on
------- FILE titlescreen/48x1_1_image.asm LEVEL 3 PASS 2
      0  1468					      include	"titlescreen/48x1_1_image.asm"
      1  1468
      2  1468
      3  1468							; *** if you want to modify the bitmap color on the fly, just dim a
      4  1468							; *** variable in bB called "bmp_48x1_1_color", and use it to set the
      5  1468							; *** color.
      6  1468
      7  1468
      8  1468							;*** this is the height of the displayed data
      9  1468		       00 57	   bmp_48x1_1_window =	87
     10  1468
     11  1468							;*** this is the height of the bitmap data
     12  1468		       00 ae	   bmp_48x1_1_height =	174
     13  1468
     14  1468				  -	      ifnconst	bmp_48x1_1_color
     15  1468				  -bmp_48x1_1_color
     16  1468					      endif
     17  1468		       0a		      .byte.b	$0a
     18  1469
     19  1469				  -	      ifnconst	bmp_48x1_1_PF1
     20  1469				  -bmp_48x1_1_PF1
     21  1469					      endif
     22  1469		       00		      BYTE.b	%00000000
     23  146a				  -	      ifnconst	bmp_48x1_1_PF2
     24  146a				  -bmp_48x1_1_PF2
     25  146a					      endif
     26  146a		       00		      BYTE.b	%00000000
     27  146b				  -	      ifnconst	bmp_48x1_1_background
     28  146b				  -bmp_48x1_1_background
     29  146b					      endif
     30  146b		       00		      BYTE.b	$00
     31  146c
     32  146c					      if	>. != >[.+bmp_48x1_1_height]
     33  1500		       00 00 00 00*	      align	256
     34  1500					      endif
     35  1500
     36  1500				   bmp_48x1_1_00
     37  1500
     38  1500		       ff		      BYTE.b	%11111111
     39  1501		       ff		      BYTE.b	%11111111
     40  1502		       7f		      BYTE.b	%01111111
     41  1503		       7f		      BYTE.b	%01111111
     42  1504		       3f		      BYTE.b	%00111111
     43  1505		       0f		      BYTE.b	%00001111
     44  1506		       03		      BYTE.b	%00000011
     45  1507		       00		      BYTE.b	%00000000
     46  1508		       00		      BYTE.b	%00000000
     47  1509		       00		      BYTE.b	%00000000
     48  150a		       00		      BYTE.b	%00000000
     49  150b		       00		      BYTE.b	%00000000
     50  150c		       00		      BYTE.b	%00000000
     51  150d		       00		      BYTE.b	%00000000
     52  150e		       00		      BYTE.b	%00000000
     53  150f		       00		      BYTE.b	%00000000
     54  1510		       00		      BYTE.b	%00000000
     55  1511		       00		      BYTE.b	%00000000
     56  1512		       00		      BYTE.b	%00000000
     57  1513		       00		      BYTE.b	%00000000
     58  1514		       00		      BYTE.b	%00000000
     59  1515		       00		      BYTE.b	%00000000
     60  1516		       00		      BYTE.b	%00000000
     61  1517		       00		      BYTE.b	%00000000
     62  1518		       00		      BYTE.b	%00000000
     63  1519		       00		      BYTE.b	%00000000
     64  151a		       01		      BYTE.b	%00000001
     65  151b		       01		      BYTE.b	%00000001
     66  151c		       03		      BYTE.b	%00000011
     67  151d		       03		      BYTE.b	%00000011
     68  151e		       03		      BYTE.b	%00000011
     69  151f		       07		      BYTE.b	%00000111
     70  1520		       07		      BYTE.b	%00000111
     71  1521		       07		      BYTE.b	%00000111
     72  1522		       07		      BYTE.b	%00000111
     73  1523		       07		      BYTE.b	%00000111
     74  1524		       07		      BYTE.b	%00000111
     75  1525		       07		      BYTE.b	%00000111
     76  1526		       07		      BYTE.b	%00000111
     77  1527		       07		      BYTE.b	%00000111
     78  1528		       07		      BYTE.b	%00000111
     79  1529		       07		      BYTE.b	%00000111
     80  152a		       07		      BYTE.b	%00000111
     81  152b		       07		      BYTE.b	%00000111
     82  152c		       07		      BYTE.b	%00000111
     83  152d		       07		      BYTE.b	%00000111
     84  152e		       07		      BYTE.b	%00000111
     85  152f		       03		      BYTE.b	%00000011
     86  1530		       03		      BYTE.b	%00000011
     87  1531		       03		      BYTE.b	%00000011
     88  1532		       03		      BYTE.b	%00000011
     89  1533		       03		      BYTE.b	%00000011
     90  1534		       03		      BYTE.b	%00000011
     91  1535		       03		      BYTE.b	%00000011
     92  1536		       03		      BYTE.b	%00000011
     93  1537		       03		      BYTE.b	%00000011
     94  1538		       03		      BYTE.b	%00000011
     95  1539		       03		      BYTE.b	%00000011
     96  153a		       03		      BYTE.b	%00000011
     97  153b		       03		      BYTE.b	%00000011
     98  153c		       03		      BYTE.b	%00000011
     99  153d		       01		      BYTE.b	%00000001
    100  153e		       01		      BYTE.b	%00000001
    101  153f		       01		      BYTE.b	%00000001
    102  1540		       03		      BYTE.b	%00000011
    103  1541		       03		      BYTE.b	%00000011
    104  1542		       03		      BYTE.b	%00000011
    105  1543		       03		      BYTE.b	%00000011
    106  1544		       03		      BYTE.b	%00000011
    107  1545		       03		      BYTE.b	%00000011
    108  1546		       03		      BYTE.b	%00000011
    109  1547		       03		      BYTE.b	%00000011
    110  1548		       03		      BYTE.b	%00000011
    111  1549		       03		      BYTE.b	%00000011
    112  154a		       03		      BYTE.b	%00000011
    113  154b		       03		      BYTE.b	%00000011
    114  154c		       03		      BYTE.b	%00000011
    115  154d		       03		      BYTE.b	%00000011
    116  154e		       03		      BYTE.b	%00000011
    117  154f		       01		      BYTE.b	%00000001
    118  1550		       01		      BYTE.b	%00000001
    119  1551		       01		      BYTE.b	%00000001
    120  1552		       00		      BYTE.b	%00000000
    121  1553		       00		      BYTE.b	%00000000
    122  1554		       00		      BYTE.b	%00000000
    123  1555		       00		      BYTE.b	%00000000
    124  1556		       00		      BYTE.b	%00000000
    125  1557		       00		      BYTE.b	%00000000
    126  1558		       00		      BYTE.b	%00000000
    127  1559		       00		      BYTE.b	%00000000
    128  155a		       00		      BYTE.b	%00000000
    129  155b		       00		      BYTE.b	%00000000
    130  155c		       00		      BYTE.b	%00000000
    131  155d		       00		      BYTE.b	%00000000
    132  155e		       00		      BYTE.b	%00000000
    133  155f		       00		      BYTE.b	%00000000
    134  1560		       00		      BYTE.b	%00000000
    135  1561		       00		      BYTE.b	%00000000
    136  1562		       00		      BYTE.b	%00000000
    137  1563		       00		      BYTE.b	%00000000
    138  1564		       00		      BYTE.b	%00000000
    139  1565		       00		      BYTE.b	%00000000
    140  1566		       00		      BYTE.b	%00000000
    141  1567		       00		      BYTE.b	%00000000
    142  1568		       00		      BYTE.b	%00000000
    143  1569		       01		      BYTE.b	%00000001
    144  156a		       01		      BYTE.b	%00000001
    145  156b		       03		      BYTE.b	%00000011
    146  156c		       03		      BYTE.b	%00000011
    147  156d		       02		      BYTE.b	%00000010
    148  156e		       02		      BYTE.b	%00000010
    149  156f		       00		      BYTE.b	%00000000
    150  1570		       00		      BYTE.b	%00000000
    151  1571		       01		      BYTE.b	%00000001
    152  1572		       01		      BYTE.b	%00000001
    153  1573		       03		      BYTE.b	%00000011
    154  1574		       03		      BYTE.b	%00000011
    155  1575		       03		      BYTE.b	%00000011
    156  1576		       07		      BYTE.b	%00000111
    157  1577		       07		      BYTE.b	%00000111
    158  1578		       17		      BYTE.b	%00010111
    159  1579		       17		      BYTE.b	%00010111
    160  157a		       17		      BYTE.b	%00010111
    161  157b		       17		      BYTE.b	%00010111
    162  157c		       33		      BYTE.b	%00110011
    163  157d		       33		      BYTE.b	%00110011
    164  157e		       13		      BYTE.b	%00010011
    165  157f		       11		      BYTE.b	%00010001
    166  1580		       10		      BYTE.b	%00010000
    167  1581		       00		      BYTE.b	%00000000
    168  1582		       00		      BYTE.b	%00000000
    169  1583		       00		      BYTE.b	%00000000
    170  1584		       00		      BYTE.b	%00000000
    171  1585		       00		      BYTE.b	%00000000
    172  1586		       00		      BYTE.b	%00000000
    173  1587		       08		      BYTE.b	%00001000
    174  1588		       08		      BYTE.b	%00001000
    175  1589		       18		      BYTE.b	%00011000
    176  158a		       18		      BYTE.b	%00011000
    177  158b		       18		      BYTE.b	%00011000
    178  158c		       18		      BYTE.b	%00011000
    179  158d		       18		      BYTE.b	%00011000
    180  158e		       18		      BYTE.b	%00011000
    181  158f		       18		      BYTE.b	%00011000
    182  1590		       18		      BYTE.b	%00011000
    183  1591		       08		      BYTE.b	%00001000
    184  1592		       08		      BYTE.b	%00001000
    185  1593		       00		      BYTE.b	%00000000
    186  1594		       00		      BYTE.b	%00000000
    187  1595		       00		      BYTE.b	%00000000
    188  1596		       00		      BYTE.b	%00000000
    189  1597		       00		      BYTE.b	%00000000
    190  1598		       00		      BYTE.b	%00000000
    191  1599		       00		      BYTE.b	%00000000
    192  159a		       00		      BYTE.b	%00000000
    193  159b		       00		      BYTE.b	%00000000
    194  159c		       00		      BYTE.b	%00000000
    195  159d		       00		      BYTE.b	%00000000
    196  159e		       00		      BYTE.b	%00000000
    197  159f		       00		      BYTE.b	%00000000
    198  15a0		       00		      BYTE.b	%00000000
    199  15a1		       00		      BYTE.b	%00000000
    200  15a2		       00		      BYTE.b	%00000000
    201  15a3		       00		      BYTE.b	%00000000
    202  15a4		       00		      BYTE.b	%00000000
    203  15a5		       00		      BYTE.b	%00000000
    204  15a6		       00		      BYTE.b	%00000000
    205  15a7		       00		      BYTE.b	%00000000
    206  15a8		       00		      BYTE.b	%00000000
    207  15a9		       00		      BYTE.b	%00000000
    208  15aa		       00		      BYTE.b	%00000000
    209  15ab		       00		      BYTE.b	%00000000
    210  15ac		       00		      BYTE.b	%00000000
    211  15ad		       00		      BYTE.b	%00000000
    212  15ae
    213  15ae
    214  15ae					      if	>. != >[.+bmp_48x1_1_height]
    215  1600		       00 00 00 00*	      align	256
    216  1600					      endif
    217  1600
    218  1600				   bmp_48x1_1_01
    219  1600
    220  1600		       ff		      BYTE.b	%11111111
    221  1601		       ff		      BYTE.b	%11111111
    222  1602		       ff		      BYTE.b	%11111111
    223  1603		       ff		      BYTE.b	%11111111
    224  1604		       ff		      BYTE.b	%11111111
    225  1605		       ff		      BYTE.b	%11111111
    226  1606		       ff		      BYTE.b	%11111111
    227  1607		       ff		      BYTE.b	%11111111
    228  1608		       3f		      BYTE.b	%00111111
    229  1609		       1f		      BYTE.b	%00011111
    230  160a		       1f		      BYTE.b	%00011111
    231  160b		       1f		      BYTE.b	%00011111
    232  160c		       1e		      BYTE.b	%00011110
    233  160d		       0d		      BYTE.b	%00001101
    234  160e		       0b		      BYTE.b	%00001011
    235  160f		       07		      BYTE.b	%00000111
    236  1610		       07		      BYTE.b	%00000111
    237  1611		       0f		      BYTE.b	%00001111
    238  1612		       1f		      BYTE.b	%00011111
    239  1613		       3f		      BYTE.b	%00111111
    240  1614		       3f		      BYTE.b	%00111111
    241  1615		       3f		      BYTE.b	%00111111
    242  1616		       7f		      BYTE.b	%01111111
    243  1617		       ff		      BYTE.b	%11111111
    244  1618		       ff		      BYTE.b	%11111111
    245  1619		       ff		      BYTE.b	%11111111
    246  161a		       ff		      BYTE.b	%11111111
    247  161b		       ff		      BYTE.b	%11111111
    248  161c		       ff		      BYTE.b	%11111111
    249  161d		       ff		      BYTE.b	%11111111
    250  161e		       ff		      BYTE.b	%11111111
    251  161f		       ff		      BYTE.b	%11111111
    252  1620		       ff		      BYTE.b	%11111111
    253  1621		       ff		      BYTE.b	%11111111
    254  1622		       ff		      BYTE.b	%11111111
    255  1623		       ff		      BYTE.b	%11111111
    256  1624		       ff		      BYTE.b	%11111111
    257  1625		       ff		      BYTE.b	%11111111
    258  1626		       ff		      BYTE.b	%11111111
    259  1627		       ff		      BYTE.b	%11111111
    260  1628		       ff		      BYTE.b	%11111111
    261  1629		       ff		      BYTE.b	%11111111
    262  162a		       ff		      BYTE.b	%11111111
    263  162b		       ff		      BYTE.b	%11111111
    264  162c		       ff		      BYTE.b	%11111111
    265  162d		       ff		      BYTE.b	%11111111
    266  162e		       ff		      BYTE.b	%11111111
    267  162f		       ff		      BYTE.b	%11111111
    268  1630		       ff		      BYTE.b	%11111111
    269  1631		       ff		      BYTE.b	%11111111
    270  1632		       ff		      BYTE.b	%11111111
    271  1633		       ff		      BYTE.b	%11111111
    272  1634		       ff		      BYTE.b	%11111111
    273  1635		       ff		      BYTE.b	%11111111
    274  1636		       cf		      BYTE.b	%11001111
    275  1637		       c7		      BYTE.b	%11000111
    276  1638		       b0		      BYTE.b	%10110000
    277  1639		       be		      BYTE.b	%10111110
    278  163a		       bf		      BYTE.b	%10111111
    279  163b		       73		      BYTE.b	%01110011
    280  163c		       73		      BYTE.b	%01110011
    281  163d		       63		      BYTE.b	%01100011
    282  163e		       63		      BYTE.b	%01100011
    283  163f		       e3		      BYTE.b	%11100011
    284  1640		       c3		      BYTE.b	%11000011
    285  1641		       c3		      BYTE.b	%11000011
    286  1642		       c3		      BYTE.b	%11000011
    287  1643		       e7		      BYTE.b	%11100111
    288  1644		       e7		      BYTE.b	%11100111
    289  1645		       ef		      BYTE.b	%11101111
    290  1646		       ff		      BYTE.b	%11111111
    291  1647		       7f		      BYTE.b	%01111111
    292  1648		       7e		      BYTE.b	%01111110
    293  1649		       7e		      BYTE.b	%01111110
    294  164a		       fe		      BYTE.b	%11111110
    295  164b		       fc		      BYTE.b	%11111100
    296  164c		       b8		      BYTE.b	%10111000
    297  164d		       80		      BYTE.b	%10000000
    298  164e		       c0		      BYTE.b	%11000000
    299  164f		       f8		      BYTE.b	%11111000
    300  1650		       fa		      BYTE.b	%11111010
    301  1651		       f3		      BYTE.b	%11110011
    302  1652		       e7		      BYTE.b	%11100111
    303  1653		       03		      BYTE.b	%00000011
    304  1654		       03		      BYTE.b	%00000011
    305  1655		       03		      BYTE.b	%00000011
    306  1656		       01		      BYTE.b	%00000001
    307  1657		       00		      BYTE.b	%00000000
    308  1658		       00		      BYTE.b	%00000000
    309  1659		       00		      BYTE.b	%00000000
    310  165a		       00		      BYTE.b	%00000000
    311  165b		       00		      BYTE.b	%00000000
    312  165c		       00		      BYTE.b	%00000000
    313  165d		       00		      BYTE.b	%00000000
    314  165e		       00		      BYTE.b	%00000000
    315  165f		       00		      BYTE.b	%00000000
    316  1660		       00		      BYTE.b	%00000000
    317  1661		       00		      BYTE.b	%00000000
    318  1662		       00		      BYTE.b	%00000000
    319  1663		       00		      BYTE.b	%00000000
    320  1664		       01		      BYTE.b	%00000001
    321  1665		       03		      BYTE.b	%00000011
    322  1666		       07		      BYTE.b	%00000111
    323  1667		       07		      BYTE.b	%00000111
    324  1668		       4f		      BYTE.b	%01001111
    325  1669		       9f		      BYTE.b	%10011111
    326  166a		       bf		      BYTE.b	%10111111
    327  166b		       3f		      BYTE.b	%00111111
    328  166c		       3f		      BYTE.b	%00111111
    329  166d		       7f		      BYTE.b	%01111111
    330  166e		       ff		      BYTE.b	%11111111
    331  166f		       ff		      BYTE.b	%11111111
    332  1670		       ff		      BYTE.b	%11111111
    333  1671		       ff		      BYTE.b	%11111111
    334  1672		       ff		      BYTE.b	%11111111
    335  1673		       ff		      BYTE.b	%11111111
    336  1674		       ff		      BYTE.b	%11111111
    337  1675		       ff		      BYTE.b	%11111111
    338  1676		       ff		      BYTE.b	%11111111
    339  1677		       ff		      BYTE.b	%11111111
    340  1678		       ff		      BYTE.b	%11111111
    341  1679		       ff		      BYTE.b	%11111111
    342  167a		       ff		      BYTE.b	%11111111
    343  167b		       ff		      BYTE.b	%11111111
    344  167c		       ff		      BYTE.b	%11111111
    345  167d		       ff		      BYTE.b	%11111111
    346  167e		       fe		      BYTE.b	%11111110
    347  167f		       fc		      BYTE.b	%11111100
    348  1680		       f8		      BYTE.b	%11111000
    349  1681		       00		      BYTE.b	%00000000
    350  1682		       00		      BYTE.b	%00000000
    351  1683		       00		      BYTE.b	%00000000
    352  1684		       00		      BYTE.b	%00000000
    353  1685		       00		      BYTE.b	%00000000
    354  1686		       00		      BYTE.b	%00000000
    355  1687		       00		      BYTE.b	%00000000
    356  1688		       00		      BYTE.b	%00000000
    357  1689		       00		      BYTE.b	%00000000
    358  168a		       00		      BYTE.b	%00000000
    359  168b		       00		      BYTE.b	%00000000
    360  168c		       00		      BYTE.b	%00000000
    361  168d		       00		      BYTE.b	%00000000
    362  168e		       00		      BYTE.b	%00000000
    363  168f		       30		      BYTE.b	%00110000
    364  1690		       3e		      BYTE.b	%00111110
    365  1691		       3f		      BYTE.b	%00111111
    366  1692		       73		      BYTE.b	%01110011
    367  1693		       73		      BYTE.b	%01110011
    368  1694		       63		      BYTE.b	%01100011
    369  1695		       63		      BYTE.b	%01100011
    370  1696		       e3		      BYTE.b	%11100011
    371  1697		       c3		      BYTE.b	%11000011
    372  1698		       c3		      BYTE.b	%11000011
    373  1699		       c3		      BYTE.b	%11000011
    374  169a		       e7		      BYTE.b	%11100111
    375  169b		       e7		      BYTE.b	%11100111
    376  169c		       ef		      BYTE.b	%11101111
    377  169d		       ff		      BYTE.b	%11111111
    378  169e		       7f		      BYTE.b	%01111111
    379  169f		       7e		      BYTE.b	%01111110
    380  16a0		       7e		      BYTE.b	%01111110
    381  16a1		       7e		      BYTE.b	%01111110
    382  16a2		       7c		      BYTE.b	%01111100
    383  16a3		       38		      BYTE.b	%00111000
    384  16a4		       00		      BYTE.b	%00000000
    385  16a5		       00		      BYTE.b	%00000000
    386  16a6		       00		      BYTE.b	%00000000
    387  16a7		       00		      BYTE.b	%00000000
    388  16a8		       00		      BYTE.b	%00000000
    389  16a9		       00		      BYTE.b	%00000000
    390  16aa		       00		      BYTE.b	%00000000
    391  16ab		       00		      BYTE.b	%00000000
    392  16ac		       00		      BYTE.b	%00000000
    393  16ad		       00		      BYTE.b	%00000000
    394  16ae
    395  16ae
    396  16ae					      if	>. != >[.+bmp_48x1_1_height]
    397  1700		       00 00 00 00*	      align	256
    398  1700					      endif
    399  1700
    400  1700				   bmp_48x1_1_02
    401  1700
    402  1700		       f7		      BYTE.b	%11110111
    403  1701		       e7		      BYTE.b	%11100111
    404  1702		       e7		      BYTE.b	%11100111
    405  1703		       e6		      BYTE.b	%11100110
    406  1704		       e0		      BYTE.b	%11100000
    407  1705		       e0		      BYTE.b	%11100000
    408  1706		       c3		      BYTE.b	%11000011
    409  1707		       c7		      BYTE.b	%11000111
    410  1708		       cf		      BYTE.b	%11001111
    411  1709		       df		      BYTE.b	%11011111
    412  170a		       bd		      BYTE.b	%10111101
    413  170b		       78		      BYTE.b	%01111000
    414  170c		       f0		      BYTE.b	%11110000
    415  170d		       f0		      BYTE.b	%11110000
    416  170e		       e0		      BYTE.b	%11100000
    417  170f		       e0		      BYTE.b	%11100000
    418  1710		       e0		      BYTE.b	%11100000
    419  1711		       e0		      BYTE.b	%11100000
    420  1712		       c0		      BYTE.b	%11000000
    421  1713		       c0		      BYTE.b	%11000000
    422  1714		       c0		      BYTE.b	%11000000
    423  1715		       80		      BYTE.b	%10000000
    424  1716		       80		      BYTE.b	%10000000
    425  1717		       80		      BYTE.b	%10000000
    426  1718		       80		      BYTE.b	%10000000
    427  1719		       c1		      BYTE.b	%11000001
    428  171a		       c7		      BYTE.b	%11000111
    429  171b		       cf		      BYTE.b	%11001111
    430  171c		       cf		      BYTE.b	%11001111
    431  171d		       cf		      BYTE.b	%11001111
    432  171e		       cf		      BYTE.b	%11001111
    433  171f		       cf		      BYTE.b	%11001111
    434  1720		       cf		      BYTE.b	%11001111
    435  1721		       cf		      BYTE.b	%11001111
    436  1722		       df		      BYTE.b	%11011111
    437  1723		       df		      BYTE.b	%11011111
    438  1724		       df		      BYTE.b	%11011111
    439  1725		       df		      BYTE.b	%11011111
    440  1726		       df		      BYTE.b	%11011111
    441  1727		       df		      BYTE.b	%11011111
    442  1728		       ff		      BYTE.b	%11111111
    443  1729		       ff		      BYTE.b	%11111111
    444  172a		       ff		      BYTE.b	%11111111
    445  172b		       ff		      BYTE.b	%11111111
    446  172c		       ff		      BYTE.b	%11111111
    447  172d		       ff		      BYTE.b	%11111111
    448  172e		       ff		      BYTE.b	%11111111
    449  172f		       ff		      BYTE.b	%11111111
    450  1730		       ff		      BYTE.b	%11111111
    451  1731		       ff		      BYTE.b	%11111111
    452  1732		       ff		      BYTE.b	%11111111
    453  1733		       ff		      BYTE.b	%11111111
    454  1734		       ff		      BYTE.b	%11111111
    455  1735		       ff		      BYTE.b	%11111111
    456  1736		       ff		      BYTE.b	%11111111
    457  1737		       ff		      BYTE.b	%11111111
    458  1738		       ff		      BYTE.b	%11111111
    459  1739		       7f		      BYTE.b	%01111111
    460  173a		       7f		      BYTE.b	%01111111
    461  173b		       7f		      BYTE.b	%01111111
    462  173c		       3f		      BYTE.b	%00111111
    463  173d		       bf		      BYTE.b	%10111111
    464  173e		       9f		      BYTE.b	%10011111
    465  173f		       9f		      BYTE.b	%10011111
    466  1740		       cf		      BYTE.b	%11001111
    467  1741		       cf		      BYTE.b	%11001111
    468  1742		       e7		      BYTE.b	%11100111
    469  1743		       e7		      BYTE.b	%11100111
    470  1744		       e7		      BYTE.b	%11100111
    471  1745		       f3		      BYTE.b	%11110011
    472  1746		       d1		      BYTE.b	%11010001
    473  1747		       d9		      BYTE.b	%11011001
    474  1748		       cc		      BYTE.b	%11001100
    475  1749		       8c		      BYTE.b	%10001100
    476  174a		       8c		      BYTE.b	%10001100
    477  174b		       8c		      BYTE.b	%10001100
    478  174c		       98		      BYTE.b	%10011000
    479  174d		       d8		      BYTE.b	%11011000
    480  174e		       f8		      BYTE.b	%11111000
    481  174f		       f8		      BYTE.b	%11111000
    482  1750		       f0		      BYTE.b	%11110000
    483  1751		       60		      BYTE.b	%01100000
    484  1752		       00		      BYTE.b	%00000000
    485  1753		       e0		      BYTE.b	%11100000
    486  1754		       e0		      BYTE.b	%11100000
    487  1755		       c0		      BYTE.b	%11000000
    488  1756		       80		      BYTE.b	%10000000
    489  1757		       f0		      BYTE.b	%11110000
    490  1758		       e0		      BYTE.b	%11100000
    491  1759		       e0		      BYTE.b	%11100000
    492  175a		       e0		      BYTE.b	%11100000
    493  175b		       e0		      BYTE.b	%11100000
    494  175c		       e0		      BYTE.b	%11100000
    495  175d		       c3		      BYTE.b	%11000011
    496  175e		       c7		      BYTE.b	%11000111
    497  175f		       cf		      BYTE.b	%11001111
    498  1760		       df		      BYTE.b	%11011111
    499  1761		       bd		      BYTE.b	%10111101
    500  1762		       78		      BYTE.b	%01111000
    501  1763		       f0		      BYTE.b	%11110000
    502  1764		       f2		      BYTE.b	%11110010
    503  1765		       e7		      BYTE.b	%11100111
    504  1766		       ef		      BYTE.b	%11101111
    505  1767		       ef		      BYTE.b	%11101111
    506  1768		       ef		      BYTE.b	%11101111
    507  1769		       df		      BYTE.b	%11011111
    508  176a		       df		      BYTE.b	%11011111
    509  176b		       df		      BYTE.b	%11011111
    510  176c		       9f		      BYTE.b	%10011111
    511  176d		       9e		      BYTE.b	%10011110
    512  176e		       98		      BYTE.b	%10011000
    513  176f		       98		      BYTE.b	%10011000
    514  1770		       c0		      BYTE.b	%11000000
    515  1771		       c0		      BYTE.b	%11000000
    516  1772		       c0		      BYTE.b	%11000000
    517  1773		       c0		      BYTE.b	%11000000
    518  1774		       c0		      BYTE.b	%11000000
    519  1775		       c0		      BYTE.b	%11000000
    520  1776		       c0		      BYTE.b	%11000000
    521  1777		       c0		      BYTE.b	%11000000
    522  1778		       c0		      BYTE.b	%11000000
    523  1779		       c0		      BYTE.b	%11000000
    524  177a		       80		      BYTE.b	%10000000
    525  177b		       80		      BYTE.b	%10000000
    526  177c		       00		      BYTE.b	%00000000
    527  177d		       00		      BYTE.b	%00000000
    528  177e		       00		      BYTE.b	%00000000
    529  177f		       00		      BYTE.b	%00000000
    530  1780		       00		      BYTE.b	%00000000
    531  1781		       00		      BYTE.b	%00000000
    532  1782		       00		      BYTE.b	%00000000
    533  1783		       00		      BYTE.b	%00000000
    534  1784		       00		      BYTE.b	%00000000
    535  1785		       00		      BYTE.b	%00000000
    536  1786		       00		      BYTE.b	%00000000
    537  1787		       00		      BYTE.b	%00000000
    538  1788		       00		      BYTE.b	%00000000
    539  1789		       00		      BYTE.b	%00000000
    540  178a		       00		      BYTE.b	%00000000
    541  178b		       00		      BYTE.b	%00000000
    542  178c		       00		      BYTE.b	%00000000
    543  178d		       00		      BYTE.b	%00000000
    544  178e		       00		      BYTE.b	%00000000
    545  178f		       00		      BYTE.b	%00000000
    546  1790		       00		      BYTE.b	%00000000
    547  1791		       00		      BYTE.b	%00000000
    548  1792		       00		      BYTE.b	%00000000
    549  1793		       00		      BYTE.b	%00000000
    550  1794		       80		      BYTE.b	%10000000
    551  1795		       80		      BYTE.b	%10000000
    552  1796		       80		      BYTE.b	%10000000
    553  1797		       c0		      BYTE.b	%11000000
    554  1798		       c0		      BYTE.b	%11000000
    555  1799		       e0		      BYTE.b	%11100000
    556  179a		       e0		      BYTE.b	%11100000
    557  179b		       e0		      BYTE.b	%11100000
    558  179c		       f0		      BYTE.b	%11110000
    559  179d		       d0		      BYTE.b	%11010000
    560  179e		       d8		      BYTE.b	%11011000
    561  179f		       cc		      BYTE.b	%11001100
    562  17a0		       8c		      BYTE.b	%10001100
    563  17a1		       8c		      BYTE.b	%10001100
    564  17a2		       8c		      BYTE.b	%10001100
    565  17a3		       98		      BYTE.b	%10011000
    566  17a4		       d8		      BYTE.b	%11011000
    567  17a5		       f8		      BYTE.b	%11111000
    568  17a6		       f8		      BYTE.b	%11111000
    569  17a7		       f0		      BYTE.b	%11110000
    570  17a8		       60		      BYTE.b	%01100000
    571  17a9		       00		      BYTE.b	%00000000
    572  17aa		       00		      BYTE.b	%00000000
    573  17ab		       00		      BYTE.b	%00000000
    574  17ac		       00		      BYTE.b	%00000000
    575  17ad		       00		      BYTE.b	%00000000
    576  17ae
    577  17ae
    578  17ae					      if	>. != >[.+bmp_48x1_1_height]
    579  1800		       00 00 00 00*	      align	256
    580  1800					      endif
    581  1800
    582  1800				   bmp_48x1_1_03
    583  1800
    584  1800		       f0		      BYTE.b	%11110000
    585  1801		       f8		      BYTE.b	%11111000
    586  1802		       fc		      BYTE.b	%11111100
    587  1803		       ff		      BYTE.b	%11111111
    588  1804		       7f		      BYTE.b	%01111111
    589  1805		       3f		      BYTE.b	%00111111
    590  1806		       3f		      BYTE.b	%00111111
    591  1807		       9f		      BYTE.b	%10011111
    592  1808		       8f		      BYTE.b	%10001111
    593  1809		       c1		      BYTE.b	%11000001
    594  180a		       c0		      BYTE.b	%11000000
    595  180b		       c0		      BYTE.b	%11000000
    596  180c		       c0		      BYTE.b	%11000000
    597  180d		       40		      BYTE.b	%01000000
    598  180e		       40		      BYTE.b	%01000000
    599  180f		       40		      BYTE.b	%01000000
    600  1810		       40		      BYTE.b	%01000000
    601  1811		       40		      BYTE.b	%01000000
    602  1812		       40		      BYTE.b	%01000000
    603  1813		       40		      BYTE.b	%01000000
    604  1814		       40		      BYTE.b	%01000000
    605  1815		       00		      BYTE.b	%00000000
    606  1816		       00		      BYTE.b	%00000000
    607  1817		       00		      BYTE.b	%00000000
    608  1818		       ff		      BYTE.b	%11111111
    609  1819		       ff		      BYTE.b	%11111111
    610  181a		       ff		      BYTE.b	%11111111
    611  181b		       ff		      BYTE.b	%11111111
    612  181c		       ff		      BYTE.b	%11111111
    613  181d		       ff		      BYTE.b	%11111111
    614  181e		       ff		      BYTE.b	%11111111
    615  181f		       ff		      BYTE.b	%11111111
    616  1820		       ff		      BYTE.b	%11111111
    617  1821		       ff		      BYTE.b	%11111111
    618  1822		       ff		      BYTE.b	%11111111
    619  1823		       ff		      BYTE.b	%11111111
    620  1824		       ff		      BYTE.b	%11111111
    621  1825		       ff		      BYTE.b	%11111111
    622  1826		       ff		      BYTE.b	%11111111
    623  1827		       ff		      BYTE.b	%11111111
    624  1828		       ff		      BYTE.b	%11111111
    625  1829		       ff		      BYTE.b	%11111111
    626  182a		       ff		      BYTE.b	%11111111
    627  182b		       ff		      BYTE.b	%11111111
    628  182c		       ff		      BYTE.b	%11111111
    629  182d		       ff		      BYTE.b	%11111111
    630  182e		       ff		      BYTE.b	%11111111
    631  182f		       ff		      BYTE.b	%11111111
    632  1830		       ff		      BYTE.b	%11111111
    633  1831		       ff		      BYTE.b	%11111111
    634  1832		       ff		      BYTE.b	%11111111
    635  1833		       ff		      BYTE.b	%11111111
    636  1834		       ff		      BYTE.b	%11111111
    637  1835		       ff		      BYTE.b	%11111111
    638  1836		       ff		      BYTE.b	%11111111
    639  1837		       ff		      BYTE.b	%11111111
    640  1838		       ff		      BYTE.b	%11111111
    641  1839		       ff		      BYTE.b	%11111111
    642  183a		       ff		      BYTE.b	%11111111
    643  183b		       ff		      BYTE.b	%11111111
    644  183c		       ff		      BYTE.b	%11111111
    645  183d		       ff		      BYTE.b	%11111111
    646  183e		       ff		      BYTE.b	%11111111
    647  183f		       ff		      BYTE.b	%11111111
    648  1840		       ff		      BYTE.b	%11111111
    649  1841		       fd		      BYTE.b	%11111101
    650  1842		       ed		      BYTE.b	%11101101
    651  1843		       e3		      BYTE.b	%11100011
    652  1844		       f7		      BYTE.b	%11110111
    653  1845		       ff		      BYTE.b	%11111111
    654  1846		       ff		      BYTE.b	%11111111
    655  1847		       ff		      BYTE.b	%11111111
    656  1848		       ff		      BYTE.b	%11111111
    657  1849		       7f		      BYTE.b	%01111111
    658  184a		       3f		      BYTE.b	%00111111
    659  184b		       00		      BYTE.b	%00000000
    660  184c		       00		      BYTE.b	%00000000
    661  184d		       00		      BYTE.b	%00000000
    662  184e		       00		      BYTE.b	%00000000
    663  184f		       00		      BYTE.b	%00000000
    664  1850		       00		      BYTE.b	%00000000
    665  1851		       00		      BYTE.b	%00000000
    666  1852		       00		      BYTE.b	%00000000
    667  1853		       00		      BYTE.b	%00000000
    668  1854		       00		      BYTE.b	%00000000
    669  1855		       00		      BYTE.b	%00000000
    670  1856		       00		      BYTE.b	%00000000
    671  1857		       00		      BYTE.b	%00000000
    672  1858		       00		      BYTE.b	%00000000
    673  1859		       00		      BYTE.b	%00000000
    674  185a		       00		      BYTE.b	%00000000
    675  185b		       00		      BYTE.b	%00000000
    676  185c		       00		      BYTE.b	%00000000
    677  185d		       00		      BYTE.b	%00000000
    678  185e		       80		      BYTE.b	%10000000
    679  185f		       80		      BYTE.b	%10000000
    680  1860		       c0		      BYTE.b	%11000000
    681  1861		       c0		      BYTE.b	%11000000
    682  1862		       c0		      BYTE.b	%11000000
    683  1863		       c0		      BYTE.b	%11000000
    684  1864		       40		      BYTE.b	%01000000
    685  1865		       40		      BYTE.b	%01000000
    686  1866		       40		      BYTE.b	%01000000
    687  1867		       40		      BYTE.b	%01000000
    688  1868		       40		      BYTE.b	%01000000
    689  1869		       40		      BYTE.b	%01000000
    690  186a		       40		      BYTE.b	%01000000
    691  186b		       40		      BYTE.b	%01000000
    692  186c		       00		      BYTE.b	%00000000
    693  186d		       00		      BYTE.b	%00000000
    694  186e		       00		      BYTE.b	%00000000
    695  186f		       00		      BYTE.b	%00000000
    696  1870		       00		      BYTE.b	%00000000
    697  1871		       00		      BYTE.b	%00000000
    698  1872		       00		      BYTE.b	%00000000
    699  1873		       00		      BYTE.b	%00000000
    700  1874		       00		      BYTE.b	%00000000
    701  1875		       00		      BYTE.b	%00000000
    702  1876		       00		      BYTE.b	%00000000
    703  1877		       00		      BYTE.b	%00000000
    704  1878		       00		      BYTE.b	%00000000
    705  1879		       00		      BYTE.b	%00000000
    706  187a		       00		      BYTE.b	%00000000
    707  187b		       00		      BYTE.b	%00000000
    708  187c		       00		      BYTE.b	%00000000
    709  187d		       00		      BYTE.b	%00000000
    710  187e		       00		      BYTE.b	%00000000
    711  187f		       00		      BYTE.b	%00000000
    712  1880		       00		      BYTE.b	%00000000
    713  1881		       00		      BYTE.b	%00000000
    714  1882		       00		      BYTE.b	%00000000
    715  1883		       00		      BYTE.b	%00000000
    716  1884		       00		      BYTE.b	%00000000
    717  1885		       00		      BYTE.b	%00000000
    718  1886		       00		      BYTE.b	%00000000
    719  1887		       00		      BYTE.b	%00000000
    720  1888		       00		      BYTE.b	%00000000
    721  1889		       00		      BYTE.b	%00000000
    722  188a		       00		      BYTE.b	%00000000
    723  188b		       00		      BYTE.b	%00000000
    724  188c		       00		      BYTE.b	%00000000
    725  188d		       00		      BYTE.b	%00000000
    726  188e		       00		      BYTE.b	%00000000
    727  188f		       00		      BYTE.b	%00000000
    728  1890		       00		      BYTE.b	%00000000
    729  1891		       00		      BYTE.b	%00000000
    730  1892		       00		      BYTE.b	%00000000
    731  1893		       00		      BYTE.b	%00000000
    732  1894		       00		      BYTE.b	%00000000
    733  1895		       00		      BYTE.b	%00000000
    734  1896		       00		      BYTE.b	%00000000
    735  1897		       00		      BYTE.b	%00000000
    736  1898		       00		      BYTE.b	%00000000
    737  1899		       00		      BYTE.b	%00000000
    738  189a		       00		      BYTE.b	%00000000
    739  189b		       00		      BYTE.b	%00000000
    740  189c		       00		      BYTE.b	%00000000
    741  189d		       00		      BYTE.b	%00000000
    742  189e		       00		      BYTE.b	%00000000
    743  189f		       00		      BYTE.b	%00000000
    744  18a0		       00		      BYTE.b	%00000000
    745  18a1		       00		      BYTE.b	%00000000
    746  18a2		       00		      BYTE.b	%00000000
    747  18a3		       00		      BYTE.b	%00000000
    748  18a4		       00		      BYTE.b	%00000000
    749  18a5		       00		      BYTE.b	%00000000
    750  18a6		       00		      BYTE.b	%00000000
    751  18a7		       00		      BYTE.b	%00000000
    752  18a8		       00		      BYTE.b	%00000000
    753  18a9		       00		      BYTE.b	%00000000
    754  18aa		       00		      BYTE.b	%00000000
    755  18ab		       00		      BYTE.b	%00000000
    756  18ac		       00		      BYTE.b	%00000000
    757  18ad		       00		      BYTE.b	%00000000
    758  18ae
    759  18ae
    760  18ae					      if	>. != >[.+bmp_48x1_1_height]
    761  1900		       00 00 00 00*	      align	256
    762  1900					      endif
    763  1900
    764  1900				   bmp_48x1_1_04
    765  1900
    766  1900		       00		      BYTE.b	%00000000
    767  1901		       00		      BYTE.b	%00000000
    768  1902		       00		      BYTE.b	%00000000
    769  1903		       3c		      BYTE.b	%00111100
    770  1904		       fe		      BYTE.b	%11111110
    771  1905		       ff		      BYTE.b	%11111111
    772  1906		       ff		      BYTE.b	%11111111
    773  1907		       ff		      BYTE.b	%11111111
    774  1908		       ff		      BYTE.b	%11111111
    775  1909		       ff		      BYTE.b	%11111111
    776  190a		       ff		      BYTE.b	%11111111
    777  190b		       ff		      BYTE.b	%11111111
    778  190c		       ff		      BYTE.b	%11111111
    779  190d		       fb		      BYTE.b	%11111011
    780  190e		       fb		      BYTE.b	%11111011
    781  190f		       fb		      BYTE.b	%11111011
    782  1910		       7b		      BYTE.b	%01111011
    783  1911		       7b		      BYTE.b	%01111011
    784  1912		       7b		      BYTE.b	%01111011
    785  1913		       7b		      BYTE.b	%01111011
    786  1914		       73		      BYTE.b	%01110011
    787  1915		       77		      BYTE.b	%01110111
    788  1916		       37		      BYTE.b	%00110111
    789  1917		       07		      BYTE.b	%00000111
    790  1918		       07		      BYTE.b	%00000111
    791  1919		       c7		      BYTE.b	%11000111
    792  191a		       c3		      BYTE.b	%11000011
    793  191b		       e3		      BYTE.b	%11100011
    794  191c		       f3		      BYTE.b	%11110011
    795  191d		       f9		      BYTE.b	%11111001
    796  191e		       f9		      BYTE.b	%11111001
    797  191f		       fc		      BYTE.b	%11111100
    798  1920		       fc		      BYTE.b	%11111100
    799  1921		       fe		      BYTE.b	%11111110
    800  1922		       fe		      BYTE.b	%11111110
    801  1923		       fe		      BYTE.b	%11111110
    802  1924		       ff		      BYTE.b	%11111111
    803  1925		       ff		      BYTE.b	%11111111
    804  1926		       ff		      BYTE.b	%11111111
    805  1927		       ff		      BYTE.b	%11111111
    806  1928		       ff		      BYTE.b	%11111111
    807  1929		       ff		      BYTE.b	%11111111
    808  192a		       ff		      BYTE.b	%11111111
    809  192b		       ff		      BYTE.b	%11111111
    810  192c		       ff		      BYTE.b	%11111111
    811  192d		       ff		      BYTE.b	%11111111
    812  192e		       ff		      BYTE.b	%11111111
    813  192f		       ff		      BYTE.b	%11111111
    814  1930		       ff		      BYTE.b	%11111111
    815  1931		       ff		      BYTE.b	%11111111
    816  1932		       ff		      BYTE.b	%11111111
    817  1933		       ff		      BYTE.b	%11111111
    818  1934		       ff		      BYTE.b	%11111111
    819  1935		       ff		      BYTE.b	%11111111
    820  1936		       ff		      BYTE.b	%11111111
    821  1937		       ff		      BYTE.b	%11111111
    822  1938		       ff		      BYTE.b	%11111111
    823  1939		       ff		      BYTE.b	%11111111
    824  193a		       ff		      BYTE.b	%11111111
    825  193b		       ff		      BYTE.b	%11111111
    826  193c		       ff		      BYTE.b	%11111111
    827  193d		       ff		      BYTE.b	%11111111
    828  193e		       ff		      BYTE.b	%11111111
    829  193f		       fe		      BYTE.b	%11111110
    830  1940		       fe		      BYTE.b	%11111110
    831  1941		       fe		      BYTE.b	%11111110
    832  1942		       fc		      BYTE.b	%11111100
    833  1943		       bc		      BYTE.b	%10111100
    834  1944		       bc		      BYTE.b	%10111100
    835  1945		       b8		      BYTE.b	%10111000
    836  1946		       90		      BYTE.b	%10010000
    837  1947		       f0		      BYTE.b	%11110000
    838  1948		       e0		      BYTE.b	%11100000
    839  1949		       c0		      BYTE.b	%11000000
    840  194a		       80		      BYTE.b	%10000000
    841  194b		       00		      BYTE.b	%00000000
    842  194c		       00		      BYTE.b	%00000000
    843  194d		       00		      BYTE.b	%00000000
    844  194e		       00		      BYTE.b	%00000000
    845  194f		       00		      BYTE.b	%00000000
    846  1950		       00		      BYTE.b	%00000000
    847  1951		       00		      BYTE.b	%00000000
    848  1952		       00		      BYTE.b	%00000000
    849  1953		       00		      BYTE.b	%00000000
    850  1954		       00		      BYTE.b	%00000000
    851  1955		       00		      BYTE.b	%00000000
    852  1956		       00		      BYTE.b	%00000000
    853  1957		       00		      BYTE.b	%00000000
    854  1958		       00		      BYTE.b	%00000000
    855  1959		       00		      BYTE.b	%00000000
    856  195a		       00		      BYTE.b	%00000000
    857  195b		       00		      BYTE.b	%00000000
    858  195c		       00		      BYTE.b	%00000000
    859  195d		       00		      BYTE.b	%00000000
    860  195e		       00		      BYTE.b	%00000000
    861  195f		       00		      BYTE.b	%00000000
    862  1960		       00		      BYTE.b	%00000000
    863  1961		       00		      BYTE.b	%00000000
    864  1962		       00		      BYTE.b	%00000000
    865  1963		       00		      BYTE.b	%00000000
    866  1964		       00		      BYTE.b	%00000000
    867  1965		       00		      BYTE.b	%00000000
    868  1966		       00		      BYTE.b	%00000000
    869  1967		       00		      BYTE.b	%00000000
    870  1968		       00		      BYTE.b	%00000000
    871  1969		       00		      BYTE.b	%00000000
    872  196a		       00		      BYTE.b	%00000000
    873  196b		       00		      BYTE.b	%00000000
    874  196c		       00		      BYTE.b	%00000000
    875  196d		       00		      BYTE.b	%00000000
    876  196e		       00		      BYTE.b	%00000000
    877  196f		       00		      BYTE.b	%00000000
    878  1970		       00		      BYTE.b	%00000000
    879  1971		       00		      BYTE.b	%00000000
    880  1972		       00		      BYTE.b	%00000000
    881  1973		       00		      BYTE.b	%00000000
    882  1974		       00		      BYTE.b	%00000000
    883  1975		       00		      BYTE.b	%00000000
    884  1976		       00		      BYTE.b	%00000000
    885  1977		       00		      BYTE.b	%00000000
    886  1978		       00		      BYTE.b	%00000000
    887  1979		       00		      BYTE.b	%00000000
    888  197a		       00		      BYTE.b	%00000000
    889  197b		       00		      BYTE.b	%00000000
    890  197c		       00		      BYTE.b	%00000000
    891  197d		       00		      BYTE.b	%00000000
    892  197e		       00		      BYTE.b	%00000000
    893  197f		       00		      BYTE.b	%00000000
    894  1980		       00		      BYTE.b	%00000000
    895  1981		       00		      BYTE.b	%00000000
    896  1982		       00		      BYTE.b	%00000000
    897  1983		       00		      BYTE.b	%00000000
    898  1984		       00		      BYTE.b	%00000000
    899  1985		       00		      BYTE.b	%00000000
    900  1986		       00		      BYTE.b	%00000000
    901  1987		       00		      BYTE.b	%00000000
    902  1988		       00		      BYTE.b	%00000000
    903  1989		       00		      BYTE.b	%00000000
    904  198a		       00		      BYTE.b	%00000000
    905  198b		       00		      BYTE.b	%00000000
    906  198c		       00		      BYTE.b	%00000000
    907  198d		       00		      BYTE.b	%00000000
    908  198e		       00		      BYTE.b	%00000000
    909  198f		       00		      BYTE.b	%00000000
    910  1990		       00		      BYTE.b	%00000000
    911  1991		       00		      BYTE.b	%00000000
    912  1992		       00		      BYTE.b	%00000000
    913  1993		       00		      BYTE.b	%00000000
    914  1994		       00		      BYTE.b	%00000000
    915  1995		       00		      BYTE.b	%00000000
    916  1996		       00		      BYTE.b	%00000000
    917  1997		       00		      BYTE.b	%00000000
    918  1998		       00		      BYTE.b	%00000000
    919  1999		       00		      BYTE.b	%00000000
    920  199a		       00		      BYTE.b	%00000000
    921  199b		       00		      BYTE.b	%00000000
    922  199c		       00		      BYTE.b	%00000000
    923  199d		       00		      BYTE.b	%00000000
    924  199e		       00		      BYTE.b	%00000000
    925  199f		       00		      BYTE.b	%00000000
    926  19a0		       00		      BYTE.b	%00000000
    927  19a1		       00		      BYTE.b	%00000000
    928  19a2		       00		      BYTE.b	%00000000
    929  19a3		       00		      BYTE.b	%00000000
    930  19a4		       00		      BYTE.b	%00000000
    931  19a5		       00		      BYTE.b	%00000000
    932  19a6		       00		      BYTE.b	%00000000
    933  19a7		       00		      BYTE.b	%00000000
    934  19a8		       00		      BYTE.b	%00000000
    935  19a9		       00		      BYTE.b	%00000000
    936  19aa		       00		      BYTE.b	%00000000
    937  19ab		       00		      BYTE.b	%00000000
    938  19ac		       00		      BYTE.b	%00000000
    939  19ad		       00		      BYTE.b	%00000000
    940  19ae
    941  19ae					      if	>. != >[.+bmp_48x1_1_height]
    942  1a00		       00 00 00 00*	      align	256
    943  1a00					      endif
    944  1a00
    945  1a00				   bmp_48x1_1_05
    946  1a00
    947  1a00		       00		      BYTE.b	%00000000
    948  1a01		       00		      BYTE.b	%00000000
    949  1a02		       00		      BYTE.b	%00000000
    950  1a03		       00		      BYTE.b	%00000000
    951  1a04		       00		      BYTE.b	%00000000
    952  1a05		       00		      BYTE.b	%00000000
    953  1a06		       00		      BYTE.b	%00000000
    954  1a07		       8c		      BYTE.b	%10001100
    955  1a08		       fe		      BYTE.b	%11111110
    956  1a09		       ff		      BYTE.b	%11111111
    957  1a0a		       ff		      BYTE.b	%11111111
    958  1a0b		       ff		      BYTE.b	%11111111
    959  1a0c		       bf		      BYTE.b	%10111111
    960  1a0d		       82		      BYTE.b	%10000010
    961  1a0e		       80		      BYTE.b	%10000000
    962  1a0f		       80		      BYTE.b	%10000000
    963  1a10		       80		      BYTE.b	%10000000
    964  1a11		       e0		      BYTE.b	%11100000
    965  1a12		       70		      BYTE.b	%01110000
    966  1a13		       78		      BYTE.b	%01111000
    967  1a14		       7c		      BYTE.b	%01111100
    968  1a15		       7c		      BYTE.b	%01111100
    969  1a16		       3e		      BYTE.b	%00111110
    970  1a17		       3e		      BYTE.b	%00111110
    971  1a18		       9e		      BYTE.b	%10011110
    972  1a19		       8e		      BYTE.b	%10001110
    973  1a1a		       ce		      BYTE.b	%11001110
    974  1a1b		       c4		      BYTE.b	%11000100
    975  1a1c		       c0		      BYTE.b	%11000000
    976  1a1d		       e0		      BYTE.b	%11100000
    977  1a1e		       e0		      BYTE.b	%11100000
    978  1a1f		       e0		      BYTE.b	%11100000
    979  1a20		       e0		      BYTE.b	%11100000
    980  1a21		       40		      BYTE.b	%01000000
    981  1a22		       40		      BYTE.b	%01000000
    982  1a23		       00		      BYTE.b	%00000000
    983  1a24		       00		      BYTE.b	%00000000
    984  1a25		       00		      BYTE.b	%00000000
    985  1a26		       00		      BYTE.b	%00000000
    986  1a27		       00		      BYTE.b	%00000000
    987  1a28		       80		      BYTE.b	%10000000
    988  1a29		       80		      BYTE.b	%10000000
    989  1a2a		       80		      BYTE.b	%10000000
    990  1a2b		       80		      BYTE.b	%10000000
    991  1a2c		       80		      BYTE.b	%10000000
    992  1a2d		       80		      BYTE.b	%10000000
    993  1a2e		       80		      BYTE.b	%10000000
    994  1a2f		       80		      BYTE.b	%10000000
    995  1a30		       c0		      BYTE.b	%11000000
    996  1a31		       c0		      BYTE.b	%11000000
    997  1a32		       c0		      BYTE.b	%11000000
    998  1a33		       c0		      BYTE.b	%11000000
    999  1a34		       c0		      BYTE.b	%11000000
   1000  1a35		       80		      BYTE.b	%10000000
   1001  1a36		       80		      BYTE.b	%10000000
   1002  1a37		       80		      BYTE.b	%10000000
   1003  1a38		       80		      BYTE.b	%10000000
   1004  1a39		       80		      BYTE.b	%10000000
   1005  1a3a		       80		      BYTE.b	%10000000
   1006  1a3b		       80		      BYTE.b	%10000000
   1007  1a3c		       00		      BYTE.b	%00000000
   1008  1a3d		       00		      BYTE.b	%00000000
   1009  1a3e		       00		      BYTE.b	%00000000
   1010  1a3f		       00		      BYTE.b	%00000000
   1011  1a40		       00		      BYTE.b	%00000000
   1012  1a41		       00		      BYTE.b	%00000000
   1013  1a42		       00		      BYTE.b	%00000000
   1014  1a43		       00		      BYTE.b	%00000000
   1015  1a44		       00		      BYTE.b	%00000000
   1016  1a45		       00		      BYTE.b	%00000000
   1017  1a46		       00		      BYTE.b	%00000000
   1018  1a47		       00		      BYTE.b	%00000000
   1019  1a48		       00		      BYTE.b	%00000000
   1020  1a49		       00		      BYTE.b	%00000000
   1021  1a4a		       00		      BYTE.b	%00000000
   1022  1a4b		       00		      BYTE.b	%00000000
   1023  1a4c		       00		      BYTE.b	%00000000
   1024  1a4d		       00		      BYTE.b	%00000000
   1025  1a4e		       00		      BYTE.b	%00000000
   1026  1a4f		       00		      BYTE.b	%00000000
   1027  1a50		       00		      BYTE.b	%00000000
   1028  1a51		       00		      BYTE.b	%00000000
   1029  1a52		       00		      BYTE.b	%00000000
   1030  1a53		       00		      BYTE.b	%00000000
   1031  1a54		       00		      BYTE.b	%00000000
   1032  1a55		       00		      BYTE.b	%00000000
   1033  1a56		       00		      BYTE.b	%00000000
   1034  1a57		       00		      BYTE.b	%00000000
   1035  1a58		       00		      BYTE.b	%00000000
   1036  1a59		       00		      BYTE.b	%00000000
   1037  1a5a		       00		      BYTE.b	%00000000
   1038  1a5b		       00		      BYTE.b	%00000000
   1039  1a5c		       00		      BYTE.b	%00000000
   1040  1a5d		       00		      BYTE.b	%00000000
   1041  1a5e		       00		      BYTE.b	%00000000
   1042  1a5f		       00		      BYTE.b	%00000000
   1043  1a60		       00		      BYTE.b	%00000000
   1044  1a61		       00		      BYTE.b	%00000000
   1045  1a62		       00		      BYTE.b	%00000000
   1046  1a63		       00		      BYTE.b	%00000000
   1047  1a64		       00		      BYTE.b	%00000000
   1048  1a65		       00		      BYTE.b	%00000000
   1049  1a66		       00		      BYTE.b	%00000000
   1050  1a67		       00		      BYTE.b	%00000000
   1051  1a68		       00		      BYTE.b	%00000000
   1052  1a69		       00		      BYTE.b	%00000000
   1053  1a6a		       00		      BYTE.b	%00000000
   1054  1a6b		       00		      BYTE.b	%00000000
   1055  1a6c		       00		      BYTE.b	%00000000
   1056  1a6d		       00		      BYTE.b	%00000000
   1057  1a6e		       00		      BYTE.b	%00000000
   1058  1a6f		       00		      BYTE.b	%00000000
   1059  1a70		       00		      BYTE.b	%00000000
   1060  1a71		       00		      BYTE.b	%00000000
   1061  1a72		       00		      BYTE.b	%00000000
   1062  1a73		       00		      BYTE.b	%00000000
   1063  1a74		       00		      BYTE.b	%00000000
   1064  1a75		       00		      BYTE.b	%00000000
   1065  1a76		       00		      BYTE.b	%00000000
   1066  1a77		       00		      BYTE.b	%00000000
   1067  1a78		       00		      BYTE.b	%00000000
   1068  1a79		       00		      BYTE.b	%00000000
   1069  1a7a		       00		      BYTE.b	%00000000
   1070  1a7b		       00		      BYTE.b	%00000000
   1071  1a7c		       00		      BYTE.b	%00000000
   1072  1a7d		       00		      BYTE.b	%00000000
   1073  1a7e		       00		      BYTE.b	%00000000
   1074  1a7f		       00		      BYTE.b	%00000000
   1075  1a80		       00		      BYTE.b	%00000000
   1076  1a81		       00		      BYTE.b	%00000000
   1077  1a82		       00		      BYTE.b	%00000000
   1078  1a83		       00		      BYTE.b	%00000000
   1079  1a84		       00		      BYTE.b	%00000000
   1080  1a85		       00		      BYTE.b	%00000000
   1081  1a86		       00		      BYTE.b	%00000000
   1082  1a87		       00		      BYTE.b	%00000000
   1083  1a88		       00		      BYTE.b	%00000000
   1084  1a89		       00		      BYTE.b	%00000000
   1085  1a8a		       00		      BYTE.b	%00000000
   1086  1a8b		       00		      BYTE.b	%00000000
   1087  1a8c		       00		      BYTE.b	%00000000
   1088  1a8d		       00		      BYTE.b	%00000000
   1089  1a8e		       00		      BYTE.b	%00000000
   1090  1a8f		       00		      BYTE.b	%00000000
   1091  1a90		       00		      BYTE.b	%00000000
   1092  1a91		       00		      BYTE.b	%00000000
   1093  1a92		       00		      BYTE.b	%00000000
   1094  1a93		       00		      BYTE.b	%00000000
   1095  1a94		       00		      BYTE.b	%00000000
   1096  1a95		       00		      BYTE.b	%00000000
   1097  1a96		       00		      BYTE.b	%00000000
   1098  1a97		       00		      BYTE.b	%00000000
   1099  1a98		       00		      BYTE.b	%00000000
   1100  1a99		       00		      BYTE.b	%00000000
   1101  1a9a		       00		      BYTE.b	%00000000
   1102  1a9b		       00		      BYTE.b	%00000000
   1103  1a9c		       00		      BYTE.b	%00000000
   1104  1a9d		       00		      BYTE.b	%00000000
   1105  1a9e		       00		      BYTE.b	%00000000
   1106  1a9f		       00		      BYTE.b	%00000000
   1107  1aa0		       00		      BYTE.b	%00000000
   1108  1aa1		       00		      BYTE.b	%00000000
   1109  1aa2		       00		      BYTE.b	%00000000
   1110  1aa3		       00		      BYTE.b	%00000000
   1111  1aa4		       00		      BYTE.b	%00000000
   1112  1aa5		       00		      BYTE.b	%00000000
   1113  1aa6		       00		      BYTE.b	%00000000
   1114  1aa7		       00		      BYTE.b	%00000000
   1115  1aa8		       00		      BYTE.b	%00000000
   1116  1aa9		       00		      BYTE.b	%00000000
   1117  1aaa		       00		      BYTE.b	%00000000
   1118  1aab		       00		      BYTE.b	%00000000
   1119  1aac		       00		      BYTE.b	%00000000
   1120  1aad		       00		      BYTE.b	%00000000
   1121  1aae
------- FILE titlescreen/asm/titlescreen.asm
    221  1aae					      endif
    222  1aae					      ifconst	mk_48x1_2_on
------- FILE titlescreen/48x1_2_image.asm LEVEL 3 PASS 2
      0  1aae					      include	"titlescreen/48x1_2_image.asm"
      1  1aae
      2  1aae
      3  1aae							; *** if you want to modify the bitmap color on the fly, just dim a
      4  1aae							; *** variable in bB called "bmp_48x1_2_color", and use it to set the
      5  1aae							; *** color.
      6  1aae
      7  1aae
      8  1aae							;*** this is the height of the displayed data
      9  1aae		       00 0b	   bmp_48x1_2_window =	11
     10  1aae
     11  1aae							;*** this is the height of the bitmap data
     12  1aae		       00 0b	   bmp_48x1_2_height =	11
     13  1aae
     14  1aae				  -	      ifnconst	bmp_48x1_2_color
     15  1aae				  -bmp_48x1_2_color
     16  1aae					      endif
     17  1aae		       0f		      .byte.b	$0f
     18  1aaf
     19  1aaf				  -	      ifnconst	bmp_48x1_2_PF1
     20  1aaf				  -bmp_48x1_2_PF1
     21  1aaf					      endif
     22  1aaf		       00		      BYTE.b	%00000000
     23  1ab0				  -	      ifnconst	bmp_48x1_2_PF2
     24  1ab0				  -bmp_48x1_2_PF2
     25  1ab0					      endif
     26  1ab0		       00		      BYTE.b	%00000000
     27  1ab1				  -	      ifnconst	bmp_48x1_2_background
     28  1ab1				  -bmp_48x1_2_background
     29  1ab1					      endif
     30  1ab1		       00		      BYTE.b	$00
     31  1ab2
     32  1ab2				  -	      if	>. != >[.+bmp_48x1_2_height]
     33  1ab2				  -	      align	256
     34  1ab2					      endif
     35  1ab2
     36  1ab2				   bmp_48x1_2_00
     37  1ab2
     38  1ab2		       00		      BYTE.b	%00000000
     39  1ab3		       00		      BYTE.b	%00000000
     40  1ab4		       00		      BYTE.b	%00000000
     41  1ab5		       00		      BYTE.b	%00000000
     42  1ab6		       00		      BYTE.b	%00000000
     43  1ab7		       00		      BYTE.b	%00000000
     44  1ab8		       04		      BYTE.b	%00000100
     45  1ab9		       04		      BYTE.b	%00000100
     46  1aba		       07		      BYTE.b	%00000111
     47  1abb		       05		      BYTE.b	%00000101
     48  1abc		       07		      BYTE.b	%00000111
     49  1abd
     50  1abd				  -	      if	>. != >[.+bmp_48x1_2_height]
     51  1abd				  -	      align	256
     52  1abd					      endif
     53  1abd
     54  1abd				   bmp_48x1_2_01
     55  1abd
     56  1abd		       4e		      BYTE.b	%01001110
     57  1abe		       4a		      BYTE.b	%01001010
     58  1abf		       4a		      BYTE.b	%01001010
     59  1ac0		       4a		      BYTE.b	%01001010
     60  1ac1		       ee		      BYTE.b	%11101110
     61  1ac2		       00		      BYTE.b	%00000000
     62  1ac3		       57		      BYTE.b	%01010111
     63  1ac4		       64		      BYTE.b	%01100100
     64  1ac5		       76		      BYTE.b	%01110110
     65  1ac6		       54		      BYTE.b	%01010100
     66  1ac7		       77		      BYTE.b	%01110111
     67  1ac8
     68  1ac8				  -	      if	>. != >[.+bmp_48x1_2_height]
     69  1ac8				  -	      align	256
     70  1ac8					      endif
     71  1ac8
     72  1ac8				   bmp_48x1_2_02
     73  1ac8
     74  1ac8		       0e		      BYTE.b	%00001110
     75  1ac9		       02		      BYTE.b	%00000010
     76  1aca		       0e		      BYTE.b	%00001110
     77  1acb		       08		      BYTE.b	%00001000
     78  1acc		       0e		      BYTE.b	%00001110
     79  1acd		       00		      BYTE.b	%00000000
     80  1ace		       77		      BYTE.b	%01110111
     81  1acf		       11		      BYTE.b	%00010001
     82  1ad0		       77		      BYTE.b	%01110111
     83  1ad1		       44		      BYTE.b	%01000100
     84  1ad2		       77		      BYTE.b	%01110111
     85  1ad3
     86  1ad3
     87  1ad3
     88  1ad3				  -	      if	>. != >[.+bmp_48x1_2_height]
     89  1ad3				  -	      align	256
     90  1ad3					      endif
     91  1ad3
     92  1ad3				   bmp_48x1_2_03
     93  1ad3
     94  1ad3		       4a		      BYTE.b	%01001010
     95  1ad4		       4a		      BYTE.b	%01001010
     96  1ad5		       4e		      BYTE.b	%01001110
     97  1ad6		       4a		      BYTE.b	%01001010
     98  1ad7		       ee		      BYTE.b	%11101110
     99  1ad8		       00		      BYTE.b	%00000000
    100  1ad9		       04		      BYTE.b	%00000100
    101  1ada		       04		      BYTE.b	%00000100
    102  1adb		       06		      BYTE.b	%00000110
    103  1adc		       04		      BYTE.b	%00000100
    104  1add		       07		      BYTE.b	%00000111
    105  1ade
    106  1ade				  -	      if	>. != >[.+bmp_48x1_2_height]
    107  1ade				  -	      align	256
    108  1ade					      endif
    109  1ade
    110  1ade				   bmp_48x1_2_04
    111  1ade
    112  1ade		       a4		      BYTE.b	%10100100
    113  1adf		       c4		      BYTE.b	%11000100
    114  1ae0		       e4		      BYTE.b	%11100100
    115  1ae1		       a4		      BYTE.b	%10100100
    116  1ae2		       ee		      BYTE.b	%11101110
    117  1ae3		       00		      BYTE.b	%00000000
    118  1ae4		       55		      BYTE.b	%01010101
    119  1ae5		       59		      BYTE.b	%01011001
    120  1ae6		       5d		      BYTE.b	%01011101
    121  1ae7		       55		      BYTE.b	%01010101
    122  1ae8		       5d		      BYTE.b	%01011101
    123  1ae9
    124  1ae9
    125  1ae9				  -	      if	>. != >[.+bmp_48x1_2_height]
    126  1ae9				  -	      align	256
    127  1ae9					      endif
    128  1ae9
    129  1ae9				   bmp_48x1_2_05
    130  1ae9
    131  1ae9		       00		      BYTE.b	%00000000
    132  1aea		       00		      BYTE.b	%00000000
    133  1aeb		       00		      BYTE.b	%00000000
    134  1aec		       00		      BYTE.b	%00000000
    135  1aed		       00		      BYTE.b	%00000000
    136  1aee		       00		      BYTE.b	%00000000
    137  1aef		       c0		      BYTE.b	%11000000
    138  1af0		       00		      BYTE.b	%00000000
    139  1af1		       80		      BYTE.b	%10000000
    140  1af2		       00		      BYTE.b	%00000000
    141  1af3		       c0		      BYTE.b	%11000000
    142  1af4
    143  1af4
------- FILE titlescreen/asm/titlescreen.asm
    224  1af4					      endif
    225  1af4				  -	      ifconst	mk_48x1_3_on
    226  1af4				  -	      include	"titlescreen/48x1_3_image.asm"
    227  1af4					      endif
    228  1af4				  -	      ifconst	mk_48x1_4_on
    229  1af4				  -	      include	"titlescreen/48x1_4_image.asm"
    230  1af4					      endif
    231  1af4				  -	      ifconst	mk_48x1_5_on
    232  1af4				  -	      include	"titlescreen/48x1_5_image.asm"
    233  1af4					      endif
    234  1af4				  -	      ifconst	mk_48x1_6_on
    235  1af4				  -	      include	"titlescreen/48x1_6_image.asm"
    236  1af4					      endif
    237  1af4				  -	      ifconst	mk_48x1_7_on
    238  1af4				  -	      include	"titlescreen/48x1_7_image.asm"
    239  1af4					      endif
    240  1af4				  -	      ifconst	mk_48x1_8_on
    241  1af4				  -	      include	"titlescreen/48x1_8_image.asm"
    242  1af4					      endif
    243  1af4
    244  1af4
    245  1af4					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 2
      0  1af4					      include	"titlescreen/48x2_1_image.asm"
      1  1af4
      2  1af4							; *** if you want to modify the bitmap color on the fly, just dim a
      3  1af4							; *** variable in bB called "bmp_48x2_1_color", and use it to set the
      4  1af4							; *** color.
      5  1af4
      6  1af4
      7  1af4							;*** this is the height of the displayed data
      8  1af4		       00 16	   bmp_48x2_1_window =	22
      9  1af4
     10  1af4							;*** this is the height of the bitmap data
     11  1af4		       00 16	   bmp_48x2_1_height =	22
     12  1af4
     13  1af4					      if	>. != >[.+bmp_48x2_1_height+1]
     14  1b00		       00 00 00 00*	      align	256
     15  1b00					      endif
     16  1b00		       00		      BYTE.b	0
     17  1b01
     18  1b01							;*** this is the color of each line in the bitmap data
     19  1b01				   bmp_48x2_1_colors
     20  1b01		       b6		      BYTE.b	$b6
     21  1b02		       a6		      BYTE.b	$a6
     22  1b03		       a8		      BYTE.b	$a8
     23  1b04		       a8		      BYTE.b	$a8
     24  1b05		       9a		      BYTE.b	$9a
     25  1b06		       9a		      BYTE.b	$9a
     26  1b07		       9a		      BYTE.b	$9a
     27  1b08		       8a		      BYTE.b	$8a
     28  1b09		       8c		      BYTE.b	$8c
     29  1b0a		       8c		      BYTE.b	$8c
     30  1b0b		       7c		      BYTE.b	$7c
     31  1b0c		       7c		      BYTE.b	$7c
     32  1b0d		       7c		      BYTE.b	$7c
     33  1b0e		       6a		      BYTE.b	$6a
     34  1b0f		       6a		      BYTE.b	$6a
     35  1b10		       6a		      BYTE.b	$6a
     36  1b11		       5a		      BYTE.b	$5a
     37  1b12		       5a		      BYTE.b	$5a
     38  1b13		       58		      BYTE.b	$58
     39  1b14		       48		      BYTE.b	$48
     40  1b15		       46		      BYTE.b	$46
     41  1b16		       46		      BYTE.b	$46
     42  1b17
     43  1b17				  -	      ifnconst	bmp_48x2_1_PF1
     44  1b17				  -bmp_48x2_1_PF1
     45  1b17					      endif
     46  1b17		       00		      BYTE.b	%00000000
     47  1b18				  -	      ifnconst	bmp_48x2_1_PF2
     48  1b18				  -bmp_48x2_1_PF2
     49  1b18					      endif
     50  1b18		       00		      BYTE.b	%00000000
     51  1b19				  -	      ifnconst	bmp_48x2_1_background
     52  1b19				  -bmp_48x2_1_background
     53  1b19					      endif
     54  1b19		       00		      BYTE.b	$00
     55  1b1a
     56  1b1a				  -	      if	>. != >[.+bmp_48x2_1_height]
     57  1b1a				  -	      align	256
     58  1b1a					      endif
     59  1b1a
     60  1b1a
     61  1b1a
     62  1b1a				  -	      if	>. != >[.+bmp_48x2_1_height]
     63  1b1a				  -	      align	256
     64  1b1a					      endif
     65  1b1a
     66  1b1a				   bmp_48x2_1_00
     67  1b1a
     68  1b1a		       00		      BYTE.b	%00000000
     69  1b1b		       00		      BYTE.b	%00000000
     70  1b1c		       00		      BYTE.b	%00000000
     71  1b1d		       00		      BYTE.b	%00000000
     72  1b1e		       01		      BYTE.b	%00000001
     73  1b1f		       01		      BYTE.b	%00000001
     74  1b20		       01		      BYTE.b	%00000001
     75  1b21		       01		      BYTE.b	%00000001
     76  1b22		       01		      BYTE.b	%00000001
     77  1b23		       01		      BYTE.b	%00000001
     78  1b24		       03		      BYTE.b	%00000011
     79  1b25		       03		      BYTE.b	%00000011
     80  1b26		       07		      BYTE.b	%00000111
     81  1b27		       07		      BYTE.b	%00000111
     82  1b28		       0f		      BYTE.b	%00001111
     83  1b29		       0f		      BYTE.b	%00001111
     84  1b2a		       1f		      BYTE.b	%00011111
     85  1b2b		       3f		      BYTE.b	%00111111
     86  1b2c		       3f		      BYTE.b	%00111111
     87  1b2d		       7e		      BYTE.b	%01111110
     88  1b2e		       7e		      BYTE.b	%01111110
     89  1b2f		       00		      BYTE.b	%00000000
     90  1b30
     91  1b30
     92  1b30				  -	      if	>. != >[.+bmp_48x2_1_height]
     93  1b30				  -	      align	256
     94  1b30					      endif
     95  1b30
     96  1b30				   bmp_48x2_1_01
     97  1b30
     98  1b30		       ef		      BYTE.b	%11101111
     99  1b31		       df		      BYTE.b	%11011111
    100  1b32		       bf		      BYTE.b	%10111111
    101  1b33		       bf		      BYTE.b	%10111111
    102  1b34		       48		      BYTE.b	%01001000
    103  1b35		       5a		      BYTE.b	%01011010
    104  1b36		       48		      BYTE.b	%01001000
    105  1b37		       6b		      BYTE.b	%01101011
    106  1b38		       4b		      BYTE.b	%01001011
    107  1b39		       bf		      BYTE.b	%10111111
    108  1b3a		       bf		      BYTE.b	%10111111
    109  1b3b		       df		      BYTE.b	%11011111
    110  1b3c		       df		      BYTE.b	%11011111
    111  1b3d		       ef		      BYTE.b	%11101111
    112  1b3e		       b7		      BYTE.b	%10110111
    113  1b3f		       bb		      BYTE.b	%10111011
    114  1b40		       1d		      BYTE.b	%00011101
    115  1b41		       1e		      BYTE.b	%00011110
    116  1b42		       1f		      BYTE.b	%00011111
    117  1b43		       1f		      BYTE.b	%00011111
    118  1b44		       1f		      BYTE.b	%00011111
    119  1b45		       1f		      BYTE.b	%00011111
    120  1b46
    121  1b46				  -	      if	>. != >[.+bmp_48x2_1_height]
    122  1b46				  -	      align	256
    123  1b46					      endif
    124  1b46
    125  1b46				   bmp_48x2_1_02
    126  1b46
    127  1b46		       fc		      BYTE.b	%11111100
    128  1b47		       fe		      BYTE.b	%11111110
    129  1b48		       ff		      BYTE.b	%11111111
    130  1b49		       ff		      BYTE.b	%11111111
    131  1b4a		       88		      BYTE.b	%10001000
    132  1b4b		       aa		      BYTE.b	%10101010
    133  1b4c		       aa		      BYTE.b	%10101010
    134  1b4d		       aa		      BYTE.b	%10101010
    135  1b4e		       88		      BYTE.b	%10001000
    136  1b4f		       ff		      BYTE.b	%11111111
    137  1b50		       ff		      BYTE.b	%11111111
    138  1b51		       fe		      BYTE.b	%11111110
    139  1b52		       fe		      BYTE.b	%11111110
    140  1b53		       fd		      BYTE.b	%11111101
    141  1b54		       fd		      BYTE.b	%11111101
    142  1b55		       fb		      BYTE.b	%11111011
    143  1b56		       f3		      BYTE.b	%11110011
    144  1b57		       03		      BYTE.b	%00000011
    145  1b58		       01		      BYTE.b	%00000001
    146  1b59		       00		      BYTE.b	%00000000
    147  1b5a		       80		      BYTE.b	%10000000
    148  1b5b		       80		      BYTE.b	%10000000
    149  1b5c
    150  1b5c				  -	      if	>. != >[.+bmp_48x2_1_height]
    151  1b5c				  -	      align	256
    152  1b5c					      endif
    153  1b5c
    154  1b5c				   bmp_48x2_1_03
    155  1b5c
    156  1b5c		       f0		      BYTE.b	%11110000
    157  1b5d		       78		      BYTE.b	%01111000
    158  1b5e		       38		      BYTE.b	%00111000
    159  1b5f		       1c		      BYTE.b	%00011100
    160  1b60		       9c		      BYTE.b	%10011100
    161  1b61		       9c		      BYTE.b	%10011100
    162  1b62		       bc		      BYTE.b	%10111100
    163  1b63		       b8		      BYTE.b	%10111000
    164  1b64		       b8		      BYTE.b	%10111000
    165  1b65		       70		      BYTE.b	%01110000
    166  1b66		       60		      BYTE.b	%01100000
    167  1b67		       e0		      BYTE.b	%11100000
    168  1b68		       c0		      BYTE.b	%11000000
    169  1b69		       c0		      BYTE.b	%11000000
    170  1b6a		       c0		      BYTE.b	%11000000
    171  1b6b		       c0		      BYTE.b	%11000000
    172  1b6c		       f0		      BYTE.b	%11110000
    173  1b6d		       fc		      BYTE.b	%11111100
    174  1b6e		       fc		      BYTE.b	%11111100
    175  1b6f		       78		      BYTE.b	%01111000
    176  1b70		       00		      BYTE.b	%00000000
    177  1b71		       00		      BYTE.b	%00000000
    178  1b72
    179  1b72
    180  1b72				  -	      if	>. != >[.+bmp_48x2_1_height]
    181  1b72				  -	      align	256
    182  1b72					      endif
    183  1b72
    184  1b72				   bmp_48x2_1_04
    185  1b72
    186  1b72		       02		      BYTE.b	%00000010
    187  1b73		       86		      BYTE.b	%10000110
    188  1b74		       86		      BYTE.b	%10000110
    189  1b75		       c6		      BYTE.b	%11000110
    190  1b76		       c7		      BYTE.b	%11000111
    191  1b77		       c7		      BYTE.b	%11000111
    192  1b78		       c3		      BYTE.b	%11000011
    193  1b79		       cf		      BYTE.b	%11001111
    194  1b7a		       ff		      BYTE.b	%11111111
    195  1b7b		       ff		      BYTE.b	%11111111
    196  1b7c		       ff		      BYTE.b	%11111111
    197  1b7d		       ff		      BYTE.b	%11111111
    198  1b7e		       e1		      BYTE.b	%11100001
    199  1b7f		       e1		      BYTE.b	%11100001
    200  1b80		       f1		      BYTE.b	%11110001
    201  1b81		       f1		      BYTE.b	%11110001
    202  1b82		       f0		      BYTE.b	%11110000
    203  1b83		       00		      BYTE.b	%00000000
    204  1b84		       00		      BYTE.b	%00000000
    205  1b85		       00		      BYTE.b	%00000000
    206  1b86		       00		      BYTE.b	%00000000
    207  1b87		       00		      BYTE.b	%00000000
    208  1b88
    209  1b88				  -	      if	>. != >[.+bmp_48x2_1_height]
    210  1b88				  -	      align	256
    211  1b88					      endif
    212  1b88
    213  1b88				   bmp_48x2_1_05
    214  1b88
    215  1b88		       08		      BYTE.b	%00001000
    216  1b89		       1c		      BYTE.b	%00011100
    217  1b8a		       1c		      BYTE.b	%00011100
    218  1b8b		       1c		      BYTE.b	%00011100
    219  1b8c		       1c		      BYTE.b	%00011100
    220  1b8d		       0c		      BYTE.b	%00001100
    221  1b8e		       0c		      BYTE.b	%00001100
    222  1b8f		       8c		      BYTE.b	%10001100
    223  1b90		       8e		      BYTE.b	%10001110
    224  1b91		       8e		      BYTE.b	%10001110
    225  1b92		       ce		      BYTE.b	%11001110
    226  1b93		       ce		      BYTE.b	%11001110
    227  1b94		       cf		      BYTE.b	%11001111
    228  1b95		       ef		      BYTE.b	%11101111
    229  1b96		       ef		      BYTE.b	%11101111
    230  1b97		       cf		      BYTE.b	%11001111
    231  1b98		       04		      BYTE.b	%00000100
    232  1b99		       00		      BYTE.b	%00000000
    233  1b9a		       00		      BYTE.b	%00000000
    234  1b9b		       00		      BYTE.b	%00000000
    235  1b9c		       00		      BYTE.b	%00000000
    236  1b9d		       00		      BYTE.b	%00000000
    237  1b9e
    238  1b9e
    239  1b9e
    240  1b9e
------- FILE titlescreen/asm/titlescreen.asm
    247  1b9e					      endif
    248  1b9e				  -	      ifconst	mk_48x2_2_on
    249  1b9e				  -	      include	"titlescreen/48x2_2_image.asm"
    250  1b9e					      endif
    251  1b9e				  -	      ifconst	mk_48x2_3_on
    252  1b9e				  -	      include	"titlescreen/48x2_3_image.asm"
    253  1b9e					      endif
    254  1b9e				  -	      ifconst	mk_48x2_4_on
    255  1b9e				  -	      include	"titlescreen/48x2_4_image.asm"
    256  1b9e					      endif
    257  1b9e				  -	      ifconst	mk_48x2_5_on
    258  1b9e				  -	      include	"titlescreen/48x2_5_image.asm"
    259  1b9e					      endif
    260  1b9e				  -	      ifconst	mk_48x2_6_on
    261  1b9e				  -	      include	"titlescreen/48x2_6_image.asm"
    262  1b9e					      endif
    263  1b9e				  -	      ifconst	mk_48x2_7_on
    264  1b9e				  -	      include	"titlescreen/48x2_7_image.asm"
    265  1b9e					      endif
    266  1b9e
    267  1b9e				  -	      ifconst	mk_48x2_8_on
    268  1b9e				  -	      include	"titlescreen/48x2_8_image.asm"
    269  1b9e					      endif
    270  1b9e
    271  1b9e
    272  1b9e				  -	      ifconst	mk_96x2_1_on
    273  1b9e				  -	      include	"titlescreen/96x2_1_image.asm"
    274  1b9e					      endif
    275  1b9e				  -	      ifconst	mk_96x2_2_on
    276  1b9e				  -	      include	"titlescreen/96x2_2_image.asm"
    277  1b9e					      endif
    278  1b9e				  -	      ifconst	mk_96x2_3_on
    279  1b9e				  -	      include	"titlescreen/96x2_3_image.asm"
    280  1b9e					      endif
    281  1b9e				  -	      ifconst	mk_96x2_4_on
    282  1b9e				  -	      include	"titlescreen/96x2_4_image.asm"
    283  1b9e					      endif
    284  1b9e				  -	      ifconst	mk_96x2_5_on
    285  1b9e				  -	      include	"titlescreen/96x2_5_image.asm"
    286  1b9e					      endif
    287  1b9e				  -	      ifconst	mk_96x2_6_on
    288  1b9e				  -	      include	"titlescreen/96x2_6_image.asm"
    289  1b9e					      endif
    290  1b9e				  -	      ifconst	mk_96x2_7_on
    291  1b9e				  -	      include	"titlescreen/96x2_7_image.asm"
    292  1b9e					      endif
    293  1b9e				  -	      ifconst	mk_96x2_8_on
    294  1b9e				  -	      include	"titlescreen/96x2_8_image.asm"
    295  1b9e					      endif
    296  1b9e
    297  1b9e				  -	      ifconst	mk_player_on
    298  1b9e				  -	      include	"titlescreen/player_image.asm"
    299  1b9e					      endif
    300  1b9e
    301  1b9e					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 2
      0  1b9e					      include	"titlescreen/score_image.asm"
      1  1b9e							; feel free to modify the score graphics - just keep each digit 8 high
      2  1b9e							; if you're looking to want to modify any one font, pick on the 
      3  1b9e
      4  1b9e				  -	      ifnconst	NOFONT
      5  1b9e				  -NOFONT     =	0
      6  1b9e					      endif
      7  1b9e				  -	      ifnconst	STOCK
      8  1b9e				  -STOCK      =	1	;_FONTNAME
      9  1b9e					      endif
     10  1b9e				  -	      ifnconst	NEWCENTURY
     11  1b9e				  -NEWCENTURY =	2	;_FONTNAME
     12  1b9e					      endif
     13  1b9e				  -	      ifnconst	WHIMSEY
     14  1b9e				  -WHIMSEY    =	3	;_FONTNAME
     15  1b9e					      endif
     16  1b9e				  -	      ifnconst	ALARMCLOCK
     17  1b9e				  -ALARMCLOCK =	4	;_FONTNAME
     18  1b9e					      endif
     19  1b9e				  -	      ifnconst	HANDWRITTEN
     20  1b9e				  -HANDWRITTEN =	5	;_FONTNAME
     21  1b9e					      endif
     22  1b9e				  -	      ifnconst	INTERRUPTED
     23  1b9e				  -INTERRUPTED =	6	;_FONTNAME
     24  1b9e					      endif
     25  1b9e				  -	      ifnconst	TINY
     26  1b9e				  -TINY       =	7	;_FONTNAME
     27  1b9e					      endif
     28  1b9e				  -	      ifnconst	RETROPUTER
     29  1b9e				  -RETROPUTER =	8	;_FONTNAME
     30  1b9e					      endif
     31  1b9e				  -	      ifnconst	CURVES
     32  1b9e				  -CURVES     =	9	;_FONTNAME
     33  1b9e					      endif
     34  1b9e				  -	      ifnconst	HUSKY
     35  1b9e				  -HUSKY      =	10	;_FONTNAME
     36  1b9e					      endif
     37  1b9e				  -	      ifnconst	SNAKE
     38  1b9e				  -SNAKE      =	11	;_FONTNAME
     39  1b9e					      endif
     40  1b9e				  -	      ifnconst	PLOK
     41  1b9e				  -PLOK       =	13	;_FONTNAME
     42  1b9e					      endif
     43  1b9e
     44  1b9e				  -	      ifnconst	SYMBOLS
     45  1b9e				  -SYMBOLS    =	0	;_FONTNAME 
     46  1b9e					      endif
     47  1b9e
     48  1b9e							; ### setup some defaults
     49  1b9e				  -	      ifnconst	fontstyle
     50  1b9e				  -fontstyle  =	STOCK
     51  1b9e					      endif
     52  1b9e
     53  1b9e							;fix up the table alignment, if necessary
     54  1b9e				  -	      if	>. != >[.+81]
     55  1b9e				  -	      align	256
     56  1b9e					      endif
     57  1b9e
     58  1b9e
     59  1b9e				   miniscoretable
     60  1b9e
     61  1b9e					      if	fontstyle == STOCK
     62  1b9e
     63  1b9e							;byte %00000000 ; STOCK
     64  1b9e
     65  1b9e		       3c		      .byte.b	%00111100	; STOCK
     66  1b9f		       66		      .byte.b	%01100110	; STOCK
     67  1ba0		       66		      .byte.b	%01100110	; STOCK
     68  1ba1		       66		      .byte.b	%01100110	; STOCK
     69  1ba2		       66		      .byte.b	%01100110	; STOCK
     70  1ba3		       66		      .byte.b	%01100110	; STOCK
     71  1ba4		       66		      .byte.b	%01100110	; STOCK
     72  1ba5		       3c		      .byte.b	%00111100	; STOCK
     73  1ba6
     74  1ba6							;byte %00000000 ; STOCK
     75  1ba6
     76  1ba6		       7e		      .byte.b	%01111110	; STOCK
     77  1ba7		       18		      .byte.b	%00011000	; STOCK
     78  1ba8		       18		      .byte.b	%00011000	; STOCK
     79  1ba9		       18		      .byte.b	%00011000	; STOCK
     80  1baa		       18		      .byte.b	%00011000	; STOCK
     81  1bab		       38		      .byte.b	%00111000	; STOCK
     82  1bac		       18		      .byte.b	%00011000	; STOCK
     83  1bad		       08		      .byte.b	%00001000	; STOCK
     84  1bae
     85  1bae							;byte %00000000 ; STOCK
     86  1bae
     87  1bae		       7e		      .byte.b	%01111110	; STOCK
     88  1baf		       60		      .byte.b	%01100000	; STOCK
     89  1bb0		       60		      .byte.b	%01100000	; STOCK
     90  1bb1		       3c		      .byte.b	%00111100	; STOCK
     91  1bb2		       06		      .byte.b	%00000110	; STOCK
     92  1bb3		       06		      .byte.b	%00000110	; STOCK
     93  1bb4		       46		      .byte.b	%01000110	; STOCK
     94  1bb5		       3c		      .byte.b	%00111100	; STOCK
     95  1bb6
     96  1bb6							;byte %00000000 ; STOCK
     97  1bb6
     98  1bb6		       3c		      .byte.b	%00111100	; STOCK
     99  1bb7		       46		      .byte.b	%01000110	; STOCK
    100  1bb8		       06		      .byte.b	%00000110	; STOCK
    101  1bb9		       06		      .byte.b	%00000110	; STOCK
    102  1bba		       1c		      .byte.b	%00011100	; STOCK
    103  1bbb		       06		      .byte.b	%00000110	; STOCK
    104  1bbc		       46		      .byte.b	%01000110	; STOCK
    105  1bbd		       3c		      .byte.b	%00111100	; STOCK
    106  1bbe
    107  1bbe							;byte %00000000 ; STOCK
    108  1bbe
    109  1bbe		       0c		      .byte.b	%00001100	; STOCK
    110  1bbf		       0c		      .byte.b	%00001100	; STOCK
    111  1bc0		       7e		      .byte.b	%01111110	; STOCK
    112  1bc1		       4c		      .byte.b	%01001100	; STOCK
    113  1bc2		       4c		      .byte.b	%01001100	; STOCK
    114  1bc3		       2c		      .byte.b	%00101100	; STOCK
    115  1bc4		       1c		      .byte.b	%00011100	; STOCK
    116  1bc5		       0c		      .byte.b	%00001100	; STOCK
    117  1bc6
    118  1bc6							;byte %00000000 ; STOCK
    119  1bc6
    120  1bc6		       3c		      .byte.b	%00111100	; STOCK
    121  1bc7		       46		      .byte.b	%01000110	; STOCK
    122  1bc8		       06		      .byte.b	%00000110	; STOCK
    123  1bc9		       06		      .byte.b	%00000110	; STOCK
    124  1bca		       3c		      .byte.b	%00111100	; STOCK
    125  1bcb		       60		      .byte.b	%01100000	; STOCK
    126  1bcc		       60		      .byte.b	%01100000	; STOCK
    127  1bcd		       7e		      .byte.b	%01111110	; STOCK
    128  1bce
    129  1bce							;byte %00000000 ; STOCK
    130  1bce
    131  1bce		       3c		      .byte.b	%00111100	; STOCK
    132  1bcf		       66		      .byte.b	%01100110	; STOCK
    133  1bd0		       66		      .byte.b	%01100110	; STOCK
    134  1bd1		       66		      .byte.b	%01100110	; STOCK
    135  1bd2		       7c		      .byte.b	%01111100	; STOCK
    136  1bd3		       60		      .byte.b	%01100000	; STOCK
    137  1bd4		       62		      .byte.b	%01100010	; STOCK
    138  1bd5		       3c		      .byte.b	%00111100	; STOCK
    139  1bd6
    140  1bd6							;byte %00000000 ; STOCK
    141  1bd6
    142  1bd6		       30		      .byte.b	%00110000	; STOCK
    143  1bd7		       30		      .byte.b	%00110000	; STOCK
    144  1bd8		       30		      .byte.b	%00110000	; STOCK
    145  1bd9		       18		      .byte.b	%00011000	; STOCK
    146  1bda		       0c		      .byte.b	%00001100	; STOCK
    147  1bdb		       06		      .byte.b	%00000110	; STOCK
    148  1bdc		       42		      .byte.b	%01000010	; STOCK
    149  1bdd		       3e		      .byte.b	%00111110	; STOCK
    150  1bde
    151  1bde							;byte %00000000 ; STOCK
    152  1bde
    153  1bde		       3c		      .byte.b	%00111100	; STOCK
    154  1bdf		       66		      .byte.b	%01100110	; STOCK
    155  1be0		       66		      .byte.b	%01100110	; STOCK
    156  1be1		       66		      .byte.b	%01100110	; STOCK
    157  1be2		       3c		      .byte.b	%00111100	; STOCK
    158  1be3		       66		      .byte.b	%01100110	; STOCK
    159  1be4		       66		      .byte.b	%01100110	; STOCK
    160  1be5		       3c		      .byte.b	%00111100	; STOCK
    161  1be6
    162  1be6							;byte %00000000 ; STOCK
    163  1be6
    164  1be6		       3c		      .byte.b	%00111100	; STOCK
    165  1be7		       46		      .byte.b	%01000110	; STOCK
    166  1be8		       06		      .byte.b	%00000110	; STOCK
    167  1be9		       3e		      .byte.b	%00111110	; STOCK
    168  1bea		       66		      .byte.b	%01100110	; STOCK
    169  1beb		       66		      .byte.b	%01100110	; STOCK
    170  1bec		       66		      .byte.b	%01100110	; STOCK
    171  1bed		       3c		      .byte.b	%00111100	; STOCK
    172  1bee
    173  1bee					      endif		; STOCK
    174  1bee
    175  1bee				  -	      if	fontstyle == NEWCENTURY
    176  1bee				  -			;byte %00000000 ; NEWCENTURY
    177  1bee				  -
    178  1bee				  -	      .byte	%00111100	; NEWCENTURY
    179  1bee				  -	      .byte	%01000010	; NEWCENTURY
    180  1bee				  -	      .byte	%01000010	; NEWCENTURY
    181  1bee				  -	      .byte	%01000010	; NEWCENTURY
    182  1bee				  -	      .byte	%00100100	; NEWCENTURY
    183  1bee				  -	      .byte	%00100100	; NEWCENTURY
    184  1bee				  -	      .byte	%00100100	; NEWCENTURY
    185  1bee				  -	      .byte	%00011000	; NEWCENTURY
    186  1bee				  -
    187  1bee				  -			;byte %00000000 ; NEWCENTURY
    188  1bee				  -
    189  1bee				  -	      .byte	%00001000	; NEWCENTURY
    190  1bee				  -	      .byte	%00001000	; NEWCENTURY
    191  1bee				  -	      .byte	%00001000	; NEWCENTURY
    192  1bee				  -	      .byte	%00001000	; NEWCENTURY
    193  1bee				  -	      .byte	%00001000	; NEWCENTURY
    194  1bee				  -	      .byte	%00001000	; NEWCENTURY
    195  1bee				  -	      .byte	%00001000	; NEWCENTURY
    196  1bee				  -	      .byte	%00001000	; NEWCENTURY
    197  1bee				  -
    198  1bee				  -			;byte %00000000 ; NEWCENTURY
    199  1bee				  -
    200  1bee				  -	      .byte	%01111110	; NEWCENTURY
    201  1bee				  -	      .byte	%01000000	; NEWCENTURY
    202  1bee				  -	      .byte	%01000000	; NEWCENTURY
    203  1bee				  -	      .byte	%00100000	; NEWCENTURY
    204  1bee				  -	      .byte	%00011100	; NEWCENTURY
    205  1bee				  -	      .byte	%00000010	; NEWCENTURY
    206  1bee				  -	      .byte	%00000010	; NEWCENTURY
    207  1bee				  -	      .byte	%00011100	; NEWCENTURY
    208  1bee				  -
    209  1bee				  -			;byte %00000000 ; NEWCENTURY
    210  1bee				  -
    211  1bee				  -	      .byte	%01111100	; NEWCENTURY
    212  1bee				  -	      .byte	%00000010	; NEWCENTURY
    213  1bee				  -	      .byte	%00000010	; NEWCENTURY
    214  1bee				  -	      .byte	%00000010	; NEWCENTURY
    215  1bee				  -	      .byte	%00111100	; NEWCENTURY
    216  1bee				  -	      .byte	%00000010	; NEWCENTURY
    217  1bee				  -	      .byte	%00000010	; NEWCENTURY
    218  1bee				  -	      .byte	%00011100	; NEWCENTURY
    219  1bee				  -
    220  1bee				  -			;byte %00000000 ; NEWCENTURY
    221  1bee				  -
    222  1bee				  -	      .byte	%00000010	; NEWCENTURY
    223  1bee				  -	      .byte	%00000010	; NEWCENTURY
    224  1bee				  -	      .byte	%00000010	; NEWCENTURY
    225  1bee				  -	      .byte	%00111110	; NEWCENTURY
    226  1bee				  -	      .byte	%00100010	; NEWCENTURY
    227  1bee				  -	      .byte	%00100010	; NEWCENTURY
    228  1bee				  -	      .byte	%00010010	; NEWCENTURY
    229  1bee				  -	      .byte	%00010010	; NEWCENTURY
    230  1bee				  -
    231  1bee				  -			;byte %00000000 ; NEWCENTURY
    232  1bee				  -
    233  1bee				  -	      .byte	%01111100	; NEWCENTURY
    234  1bee				  -	      .byte	%00000010	; NEWCENTURY
    235  1bee				  -	      .byte	%00000010	; NEWCENTURY
    236  1bee				  -	      .byte	%00000010	; NEWCENTURY
    237  1bee				  -	      .byte	%01111100	; NEWCENTURY
    238  1bee				  -	      .byte	%01000000	; NEWCENTURY
    239  1bee				  -	      .byte	%01000000	; NEWCENTURY
    240  1bee				  -	      .byte	%01111000	; NEWCENTURY
    241  1bee				  -
    242  1bee				  -			;byte %00000000 ; NEWCENTURY
    243  1bee				  -
    244  1bee				  -	      .byte	%00111100	; NEWCENTURY
    245  1bee				  -	      .byte	%01000010	; NEWCENTURY
    246  1bee				  -	      .byte	%01000010	; NEWCENTURY
    247  1bee				  -	      .byte	%01000010	; NEWCENTURY
    248  1bee				  -	      .byte	%01111100	; NEWCENTURY
    249  1bee				  -	      .byte	%01000000	; NEWCENTURY
    250  1bee				  -	      .byte	%01000000	; NEWCENTURY
    251  1bee				  -	      .byte	%00110000	; NEWCENTURY
    252  1bee				  -
    253  1bee				  -			;byte %00000000 ; NEWCENTURY
    254  1bee				  -
    255  1bee				  -	      .byte	%00010000	; NEWCENTURY
    256  1bee				  -	      .byte	%00010000	; NEWCENTURY
    257  1bee				  -	      .byte	%00001000	; NEWCENTURY
    258  1bee				  -	      .byte	%00001000	; NEWCENTURY
    259  1bee				  -	      .byte	%00000100	; NEWCENTURY
    260  1bee				  -	      .byte	%00000100	; NEWCENTURY
    261  1bee				  -	      .byte	%00000010	; NEWCENTURY
    262  1bee				  -	      .byte	%00011110	; NEWCENTURY
    263  1bee				  -
    264  1bee				  -			;byte %00000000 ; NEWCENTURY
    265  1bee				  -
    266  1bee				  -	      .byte	%00111100	; NEWCENTURY
    267  1bee				  -	      .byte	%01000010	; NEWCENTURY
    268  1bee				  -	      .byte	%01000010	; NEWCENTURY
    269  1bee				  -	      .byte	%01000010	; NEWCENTURY
    270  1bee				  -	      .byte	%00111100	; NEWCENTURY
    271  1bee				  -	      .byte	%00100100	; NEWCENTURY
    272  1bee				  -	      .byte	%00100100	; NEWCENTURY
    273  1bee				  -	      .byte	%00011000	; NEWCENTURY
    274  1bee				  -
    275  1bee				  -			;byte %00000000 ; NEWCENTURY
    276  1bee				  -
    277  1bee				  -	      .byte	%00111100	; NEWCENTURY
    278  1bee				  -	      .byte	%00000010	; NEWCENTURY
    279  1bee				  -	      .byte	%00000010	; NEWCENTURY
    280  1bee				  -	      .byte	%00000010	; NEWCENTURY
    281  1bee				  -	      .byte	%00001110	; NEWCENTURY
    282  1bee				  -	      .byte	%00010010	; NEWCENTURY
    283  1bee				  -	      .byte	%00010010	; NEWCENTURY
    284  1bee				  -	      .byte	%00001100	; NEWCENTURY
    285  1bee				  -
    286  1bee					      endif		; NEWCENTURY
    287  1bee
    288  1bee				  -	      if	fontstyle == WHIMSEY
    289  1bee				  -			;byte %00000000 ; WHIMSEY
    290  1bee				  -
    291  1bee				  -	      .byte	%00111100	; WHIMSEY
    292  1bee				  -	      .byte	%01111110	; WHIMSEY
    293  1bee				  -	      .byte	%01111110	; WHIMSEY
    294  1bee				  -	      .byte	%01111110	; WHIMSEY
    295  1bee				  -	      .byte	%01110110	; WHIMSEY
    296  1bee				  -	      .byte	%01110110	; WHIMSEY
    297  1bee				  -	      .byte	%01110110	; WHIMSEY
    298  1bee				  -	      .byte	%00111100	; WHIMSEY
    299  1bee				  -
    300  1bee				  -			;byte %00000000 ; WHIMSEY
    301  1bee				  -
    302  1bee				  -	      .byte	%01111110	; WHIMSEY
    303  1bee				  -	      .byte	%01111110	; WHIMSEY
    304  1bee				  -	      .byte	%01111110	; WHIMSEY
    305  1bee				  -	      .byte	%00011000	; WHIMSEY
    306  1bee				  -	      .byte	%00011000	; WHIMSEY
    307  1bee				  -	      .byte	%00011000	; WHIMSEY
    308  1bee				  -	      .byte	%01111000	; WHIMSEY
    309  1bee				  -	      .byte	%00011000	; WHIMSEY
    310  1bee				  -
    311  1bee				  -			;byte %00000000 ; WHIMSEY
    312  1bee				  -
    313  1bee				  -	      .byte	%01111110	; WHIMSEY
    314  1bee				  -	      .byte	%01111110	; WHIMSEY
    315  1bee				  -	      .byte	%01111110	; WHIMSEY
    316  1bee				  -	      .byte	%01111000	; WHIMSEY
    317  1bee				  -	      .byte	%00111100	; WHIMSEY
    318  1bee				  -	      .byte	%00001110	; WHIMSEY
    319  1bee				  -	      .byte	%01100110	; WHIMSEY
    320  1bee				  -	      .byte	%00111100	; WHIMSEY
    321  1bee				  -
    322  1bee				  -			;byte %00000000 ; WHIMSEY
    323  1bee				  -
    324  1bee				  -	      .byte	%00111100	; WHIMSEY
    325  1bee				  -	      .byte	%01111110	; WHIMSEY
    326  1bee				  -	      .byte	%01111110	; WHIMSEY
    327  1bee				  -	      .byte	%01101110	; WHIMSEY
    328  1bee				  -	      .byte	%00001110	; WHIMSEY
    329  1bee				  -	      .byte	%00111100	; WHIMSEY
    330  1bee				  -	      .byte	%00011100	; WHIMSEY
    331  1bee				  -	      .byte	%01111110	; WHIMSEY
    332  1bee				  -
    333  1bee				  -			;byte %00000000 ; WHIMSEY
    334  1bee				  -
    335  1bee				  -	      .byte	%00011100	; WHIMSEY
    336  1bee				  -	      .byte	%00011100	; WHIMSEY
    337  1bee				  -	      .byte	%01111110	; WHIMSEY
    338  1bee				  -	      .byte	%01011100	; WHIMSEY
    339  1bee				  -	      .byte	%01011100	; WHIMSEY
    340  1bee				  -	      .byte	%00011100	; WHIMSEY
    341  1bee				  -	      .byte	%00011100	; WHIMSEY
    342  1bee				  -	      .byte	%00011100	; WHIMSEY
    343  1bee				  -
    344  1bee				  -			;byte %00000000 ; WHIMSEY
    345  1bee				  -
    346  1bee				  -	      .byte	%00111100	; WHIMSEY
    347  1bee				  -	      .byte	%01111110	; WHIMSEY
    348  1bee				  -	      .byte	%01111110	; WHIMSEY
    349  1bee				  -	      .byte	%01101110	; WHIMSEY
    350  1bee				  -	      .byte	%00001110	; WHIMSEY
    351  1bee				  -	      .byte	%01111100	; WHIMSEY
    352  1bee				  -	      .byte	%01110000	; WHIMSEY
    353  1bee				  -	      .byte	%01111110	; WHIMSEY
    354  1bee				  -
    355  1bee				  -			;byte %00000000 ; WHIMSEY
    356  1bee				  -
    357  1bee				  -	      .byte	%00111100	; WHIMSEY
    358  1bee				  -	      .byte	%01111110	; WHIMSEY
    359  1bee				  -	      .byte	%01111110	; WHIMSEY
    360  1bee				  -	      .byte	%01110110	; WHIMSEY
    361  1bee				  -	      .byte	%01110110	; WHIMSEY
    362  1bee				  -	      .byte	%01111100	; WHIMSEY
    363  1bee				  -	      .byte	%01110000	; WHIMSEY
    364  1bee				  -	      .byte	%00111110	; WHIMSEY
    365  1bee				  -
    366  1bee				  -			;byte %00000000 ; WHIMSEY
    367  1bee				  -
    368  1bee				  -	      .byte	%01111000	; WHIMSEY
    369  1bee				  -	      .byte	%01111000	; WHIMSEY
    370  1bee				  -	      .byte	%01111000	; WHIMSEY
    371  1bee				  -	      .byte	%00111100	; WHIMSEY
    372  1bee				  -	      .byte	%00011100	; WHIMSEY
    373  1bee				  -	      .byte	%00001110	; WHIMSEY
    374  1bee				  -	      .byte	%00001110	; WHIMSEY
    375  1bee				  -	      .byte	%01111110	; WHIMSEY
    376  1bee				  -
    377  1bee				  -			;byte %00000000 ; WHIMSEY
    378  1bee				  -
    379  1bee				  -	      .byte	%00111100	; WHIMSEY
    380  1bee				  -	      .byte	%01111110	; WHIMSEY
    381  1bee				  -	      .byte	%01111110	; WHIMSEY
    382  1bee				  -	      .byte	%01110110	; WHIMSEY
    383  1bee				  -	      .byte	%01110110	; WHIMSEY
    384  1bee				  -	      .byte	%00111100	; WHIMSEY
    385  1bee				  -	      .byte	%01110110	; WHIMSEY
    386  1bee				  -	      .byte	%00111100	; WHIMSEY
    387  1bee				  -
    388  1bee				  -			;byte %00000000 ; WHIMSEY
    389  1bee				  -
    390  1bee				  -	      .byte	%00111100	; WHIMSEY
    391  1bee				  -	      .byte	%01111110	; WHIMSEY
    392  1bee				  -	      .byte	%01111110	; WHIMSEY
    393  1bee				  -	      .byte	%01110110	; WHIMSEY
    394  1bee				  -	      .byte	%00000110	; WHIMSEY
    395  1bee				  -	      .byte	%00111110	; WHIMSEY
    396  1bee				  -	      .byte	%01110110	; WHIMSEY
    397  1bee				  -	      .byte	%00111100	; WHIMSEY
    398  1bee				  -
    399  1bee					      endif		; WHIMSEY
    400  1bee
    401  1bee				  -	      if	fontstyle == ALARMCLOCK
    402  1bee				  -
    403  1bee				  -			;byte %00000000 ; ALARMCLOCK
    404  1bee				  -
    405  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    406  1bee				  -	      .byte	%01000010	; ALARMCLOCK
    407  1bee				  -	      .byte	%01000010	; ALARMCLOCK
    408  1bee				  -	      .byte	%01000010	; ALARMCLOCK
    409  1bee				  -	      .byte	%00000000	; ALARMCLOCK
    410  1bee				  -	      .byte	%01000010	; ALARMCLOCK
    411  1bee				  -	      .byte	%01000010	; ALARMCLOCK
    412  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    413  1bee				  -
    414  1bee				  -			;byte %00000000 ; ALARMCLOCK
    415  1bee				  -
    416  1bee				  -	      .byte	%00000000	; ALARMCLOCK
    417  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    418  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    419  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    420  1bee				  -	      .byte	%00000000	; ALARMCLOCK
    421  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    422  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    423  1bee				  -	      .byte	%00000000	; ALARMCLOCK
    424  1bee				  -
    425  1bee				  -			;byte %00000000 ; ALARMCLOCK
    426  1bee				  -
    427  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    428  1bee				  -	      .byte	%01000000	; ALARMCLOCK
    429  1bee				  -	      .byte	%01000000	; ALARMCLOCK
    430  1bee				  -	      .byte	%01000000	; ALARMCLOCK
    431  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    432  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    433  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    434  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    435  1bee				  -
    436  1bee				  -			;byte %00000000 ; ALARMCLOCK
    437  1bee				  -
    438  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    439  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    440  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    441  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    442  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    443  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    444  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    445  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    446  1bee				  -
    447  1bee				  -			;byte %00000000 ; ALARMCLOCK
    448  1bee				  -
    449  1bee				  -	      .byte	%00000000	; ALARMCLOCK
    450  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    451  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    452  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    453  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    454  1bee				  -	      .byte	%01000010	; ALARMCLOCK
    455  1bee				  -	      .byte	%01000010	; ALARMCLOCK
    456  1bee				  -	      .byte	%00000000	; ALARMCLOCK
    457  1bee				  -
    458  1bee				  -			;byte %00000000 ; ALARMCLOCK
    459  1bee				  -
    460  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    461  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    462  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    463  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    464  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    465  1bee				  -	      .byte	%01000000	; ALARMCLOCK
    466  1bee				  -	      .byte	%01000000	; ALARMCLOCK
    467  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    468  1bee				  -
    469  1bee				  -			;byte %00000000 ; ALARMCLOCK
    470  1bee				  -
    471  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    472  1bee				  -	      .byte	%01000010	; ALARMCLOCK
    473  1bee				  -	      .byte	%01000010	; ALARMCLOCK
    474  1bee				  -	      .byte	%01000010	; ALARMCLOCK
    475  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    476  1bee				  -	      .byte	%01000000	; ALARMCLOCK
    477  1bee				  -	      .byte	%01000000	; ALARMCLOCK
    478  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    479  1bee				  -
    480  1bee				  -			;byte %00000000 ; ALARMCLOCK
    481  1bee				  -
    482  1bee				  -	      .byte	%00000000	; ALARMCLOCK
    483  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    484  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    485  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    486  1bee				  -	      .byte	%00000000	; ALARMCLOCK
    487  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    488  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    489  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    490  1bee				  -
    491  1bee				  -			;byte %00000000 ; ALARMCLOCK
    492  1bee				  -
    493  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    494  1bee				  -	      .byte	%01000010	; ALARMCLOCK
    495  1bee				  -	      .byte	%01000010	; ALARMCLOCK
    496  1bee				  -	      .byte	%01000010	; ALARMCLOCK
    497  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    498  1bee				  -	      .byte	%01000010	; ALARMCLOCK
    499  1bee				  -	      .byte	%01000010	; ALARMCLOCK
    500  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    501  1bee				  -
    502  1bee				  -			;byte %00000000 ; ALARMCLOCK
    503  1bee				  -
    504  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    505  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    506  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    507  1bee				  -	      .byte	%00000010	; ALARMCLOCK
    508  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    509  1bee				  -	      .byte	%01000010	; ALARMCLOCK
    510  1bee				  -	      .byte	%01000010	; ALARMCLOCK
    511  1bee				  -	      .byte	%00111100	; ALARMCLOCK
    512  1bee				  -
    513  1bee				  -
    514  1bee					      endif		; ALARMCLOCK
    515  1bee
    516  1bee				  -	      if	fontstyle == HANDWRITTEN
    517  1bee				  -
    518  1bee				  -			;byte %00000000 ; HANDWRITTEN
    519  1bee				  -
    520  1bee				  -	      .byte	%00110000	; HANDWRITTEN
    521  1bee				  -	      .byte	%01001000	; HANDWRITTEN
    522  1bee				  -	      .byte	%01001000	; HANDWRITTEN
    523  1bee				  -	      .byte	%01001000	; HANDWRITTEN
    524  1bee				  -	      .byte	%00100100	; HANDWRITTEN
    525  1bee				  -	      .byte	%00100100	; HANDWRITTEN
    526  1bee				  -	      .byte	%00010010	; HANDWRITTEN
    527  1bee				  -	      .byte	%00001100	; HANDWRITTEN
    528  1bee				  -
    529  1bee				  -			;byte %00000000 ; HANDWRITTEN
    530  1bee				  -
    531  1bee				  -	      .byte	%00010000	; HANDWRITTEN
    532  1bee				  -	      .byte	%00010000	; HANDWRITTEN
    533  1bee				  -	      .byte	%00010000	; HANDWRITTEN
    534  1bee				  -	      .byte	%00001000	; HANDWRITTEN
    535  1bee				  -	      .byte	%00001000	; HANDWRITTEN
    536  1bee				  -	      .byte	%00001000	; HANDWRITTEN
    537  1bee				  -	      .byte	%00000100	; HANDWRITTEN
    538  1bee				  -	      .byte	%00000100	; HANDWRITTEN
    539  1bee				  -
    540  1bee				  -			;byte %00000000 ; HANDWRITTEN
    541  1bee				  -
    542  1bee				  -	      .byte	%01110000	; HANDWRITTEN
    543  1bee				  -	      .byte	%01001100	; HANDWRITTEN
    544  1bee				  -	      .byte	%01000000	; HANDWRITTEN
    545  1bee				  -	      .byte	%00100000	; HANDWRITTEN
    546  1bee				  -	      .byte	%00011000	; HANDWRITTEN
    547  1bee				  -	      .byte	%00000100	; HANDWRITTEN
    548  1bee				  -	      .byte	%00100010	; HANDWRITTEN
    549  1bee				  -	      .byte	%00011100	; HANDWRITTEN
    550  1bee				  -
    551  1bee				  -			;byte %00000000 ; HANDWRITTEN
    552  1bee				  -
    553  1bee				  -	      .byte	%00110000	; HANDWRITTEN
    554  1bee				  -	      .byte	%01001000	; HANDWRITTEN
    555  1bee				  -	      .byte	%00000100	; HANDWRITTEN
    556  1bee				  -	      .byte	%00000100	; HANDWRITTEN
    557  1bee				  -	      .byte	%00011000	; HANDWRITTEN
    558  1bee				  -	      .byte	%00000100	; HANDWRITTEN
    559  1bee				  -	      .byte	%00100010	; HANDWRITTEN
    560  1bee				  -	      .byte	%00011100	; HANDWRITTEN
    561  1bee				  -
    562  1bee				  -			;byte %00000000 ; HANDWRITTEN
    563  1bee				  -
    564  1bee				  -	      .byte	%00010000	; HANDWRITTEN
    565  1bee				  -	      .byte	%00010000	; HANDWRITTEN
    566  1bee				  -	      .byte	%00001000	; HANDWRITTEN
    567  1bee				  -	      .byte	%01111000	; HANDWRITTEN
    568  1bee				  -	      .byte	%01000100	; HANDWRITTEN
    569  1bee				  -	      .byte	%00100100	; HANDWRITTEN
    570  1bee				  -	      .byte	%00010010	; HANDWRITTEN
    571  1bee				  -	      .byte	%00000010	; HANDWRITTEN
    572  1bee				  -
    573  1bee				  -			;byte %00000000 ; HANDWRITTEN
    574  1bee				  -
    575  1bee				  -	      .byte	%00110000	; HANDWRITTEN
    576  1bee				  -	      .byte	%01001000	; HANDWRITTEN
    577  1bee				  -	      .byte	%00000100	; HANDWRITTEN
    578  1bee				  -	      .byte	%00000100	; HANDWRITTEN
    579  1bee				  -	      .byte	%00011000	; HANDWRITTEN
    580  1bee				  -	      .byte	%00100000	; HANDWRITTEN
    581  1bee				  -	      .byte	%00010010	; HANDWRITTEN
    582  1bee				  -	      .byte	%00001100	; HANDWRITTEN
    583  1bee				  -
    584  1bee				  -			;byte %00000000 ; HANDWRITTEN
    585  1bee				  -
    586  1bee				  -	      .byte	%00010000	; HANDWRITTEN
    587  1bee				  -	      .byte	%00101000	; HANDWRITTEN
    588  1bee				  -	      .byte	%00100100	; HANDWRITTEN
    589  1bee				  -	      .byte	%00100100	; HANDWRITTEN
    590  1bee				  -	      .byte	%00011000	; HANDWRITTEN
    591  1bee				  -	      .byte	%00010000	; HANDWRITTEN
    592  1bee				  -	      .byte	%00001000	; HANDWRITTEN
    593  1bee				  -	      .byte	%00000110	; HANDWRITTEN
    594  1bee				  -
    595  1bee				  -			;byte %00000000 ; HANDWRITTEN
    596  1bee				  -
    597  1bee				  -	      .byte	%00010000	; HANDWRITTEN
    598  1bee				  -	      .byte	%00010000	; HANDWRITTEN
    599  1bee				  -	      .byte	%00010000	; HANDWRITTEN
    600  1bee				  -	      .byte	%00001000	; HANDWRITTEN
    601  1bee				  -	      .byte	%00000100	; HANDWRITTEN
    602  1bee				  -	      .byte	%00000100	; HANDWRITTEN
    603  1bee				  -	      .byte	%00110010	; HANDWRITTEN
    604  1bee				  -	      .byte	%00001110	; HANDWRITTEN
    605  1bee				  -
    606  1bee				  -			;byte %00000000 ; HANDWRITTEN
    607  1bee				  -
    608  1bee				  -	      .byte	%00110000	; HANDWRITTEN
    609  1bee				  -	      .byte	%01001000	; HANDWRITTEN
    610  1bee				  -	      .byte	%01000100	; HANDWRITTEN
    611  1bee				  -	      .byte	%00100100	; HANDWRITTEN
    612  1bee				  -	      .byte	%00011100	; HANDWRITTEN
    613  1bee				  -	      .byte	%00010010	; HANDWRITTEN
    614  1bee				  -	      .byte	%00001010	; HANDWRITTEN
    615  1bee				  -	      .byte	%00000110	; HANDWRITTEN
    616  1bee				  -
    617  1bee				  -			;byte %00000000 ; HANDWRITTEN
    618  1bee				  -
    619  1bee				  -	      .byte	%00010000	; HANDWRITTEN
    620  1bee				  -	      .byte	%00010000	; HANDWRITTEN
    621  1bee				  -	      .byte	%00001000	; HANDWRITTEN
    622  1bee				  -	      .byte	%00001000	; HANDWRITTEN
    623  1bee				  -	      .byte	%00011100	; HANDWRITTEN
    624  1bee				  -	      .byte	%00100100	; HANDWRITTEN
    625  1bee				  -	      .byte	%00010010	; HANDWRITTEN
    626  1bee				  -	      .byte	%00001100	; HANDWRITTEN
    627  1bee				  -
    628  1bee					      endif		; HANDWRITTEN
    629  1bee
    630  1bee				  -	      if	fontstyle == INTERRUPTED
    631  1bee				  -
    632  1bee				  -			;byte %00000000 ; INTERRUPTED
    633  1bee				  -
    634  1bee				  -	      .byte	%00110100	; INTERRUPTED
    635  1bee				  -	      .byte	%01100110	; INTERRUPTED
    636  1bee				  -	      .byte	%01100110	; INTERRUPTED
    637  1bee				  -	      .byte	%01100110	; INTERRUPTED
    638  1bee				  -	      .byte	%01100110	; INTERRUPTED
    639  1bee				  -	      .byte	%01100110	; INTERRUPTED
    640  1bee				  -	      .byte	%01100110	; INTERRUPTED
    641  1bee				  -	      .byte	%00110100	; INTERRUPTED
    642  1bee				  -
    643  1bee				  -			;byte %00000000 ; INTERRUPTED
    644  1bee				  -
    645  1bee				  -	      .byte	%00111100	; INTERRUPTED
    646  1bee				  -	      .byte	%00000000	; INTERRUPTED
    647  1bee				  -	      .byte	%00011000	; INTERRUPTED
    648  1bee				  -	      .byte	%00011000	; INTERRUPTED
    649  1bee				  -	      .byte	%00011000	; INTERRUPTED
    650  1bee				  -	      .byte	%00011000	; INTERRUPTED
    651  1bee				  -	      .byte	%00011000	; INTERRUPTED
    652  1bee				  -	      .byte	%00111000	; INTERRUPTED
    653  1bee				  -
    654  1bee				  -			;byte %00000000 ; INTERRUPTED
    655  1bee				  -
    656  1bee				  -	      .byte	%01101110	; INTERRUPTED
    657  1bee				  -	      .byte	%01100000	; INTERRUPTED
    658  1bee				  -	      .byte	%00110000	; INTERRUPTED
    659  1bee				  -	      .byte	%00011000	; INTERRUPTED
    660  1bee				  -	      .byte	%00001100	; INTERRUPTED
    661  1bee				  -	      .byte	%00000110	; INTERRUPTED
    662  1bee				  -	      .byte	%01000110	; INTERRUPTED
    663  1bee				  -	      .byte	%00111100	; INTERRUPTED
    664  1bee				  -
    665  1bee				  -			;byte %00000000 ; INTERRUPTED
    666  1bee				  -
    667  1bee				  -	      .byte	%01111100	; INTERRUPTED
    668  1bee				  -	      .byte	%00000110	; INTERRUPTED
    669  1bee				  -	      .byte	%00000110	; INTERRUPTED
    670  1bee				  -	      .byte	%00000110	; INTERRUPTED
    671  1bee				  -	      .byte	%01110110	; INTERRUPTED
    672  1bee				  -	      .byte	%00000110	; INTERRUPTED
    673  1bee				  -	      .byte	%00000110	; INTERRUPTED
    674  1bee				  -	      .byte	%01110100	; INTERRUPTED
    675  1bee				  -
    676  1bee				  -			;byte %00000000 ; INTERRUPTED
    677  1bee				  -
    678  1bee				  -	      .byte	%00000110	; INTERRUPTED
    679  1bee				  -	      .byte	%00000110	; INTERRUPTED
    680  1bee				  -	      .byte	%00000110	; INTERRUPTED
    681  1bee				  -	      .byte	%00000110	; INTERRUPTED
    682  1bee				  -	      .byte	%01110110	; INTERRUPTED
    683  1bee				  -	      .byte	%01100110	; INTERRUPTED
    684  1bee				  -	      .byte	%01100110	; INTERRUPTED
    685  1bee				  -	      .byte	%01100110	; INTERRUPTED
    686  1bee				  -
    687  1bee				  -			;byte %00000000 ; INTERRUPTED
    688  1bee				  -
    689  1bee				  -	      .byte	%01111100	; INTERRUPTED
    690  1bee				  -	      .byte	%00000110	; INTERRUPTED
    691  1bee				  -	      .byte	%00000110	; INTERRUPTED
    692  1bee				  -	      .byte	%00000110	; INTERRUPTED
    693  1bee				  -	      .byte	%01111100	; INTERRUPTED
    694  1bee				  -	      .byte	%01100000	; INTERRUPTED
    695  1bee				  -	      .byte	%01100000	; INTERRUPTED
    696  1bee				  -	      .byte	%01101110	; INTERRUPTED
    697  1bee				  -
    698  1bee				  -			;byte %00000000 ; INTERRUPTED
    699  1bee				  -
    700  1bee				  -	      .byte	%00101100	; INTERRUPTED
    701  1bee				  -	      .byte	%01100110	; INTERRUPTED
    702  1bee				  -	      .byte	%01100110	; INTERRUPTED
    703  1bee				  -	      .byte	%01100110	; INTERRUPTED
    704  1bee				  -	      .byte	%01101100	; INTERRUPTED
    705  1bee				  -	      .byte	%01100000	; INTERRUPTED
    706  1bee				  -	      .byte	%00110000	; INTERRUPTED
    707  1bee				  -	      .byte	%00011100	; INTERRUPTED
    708  1bee				  -
    709  1bee				  -			;byte %00000000 ; INTERRUPTED
    710  1bee				  -
    711  1bee				  -	      .byte	%00011000	; INTERRUPTED
    712  1bee				  -	      .byte	%00011000	; INTERRUPTED
    713  1bee				  -	      .byte	%00011000	; INTERRUPTED
    714  1bee				  -	      .byte	%00011100	; INTERRUPTED
    715  1bee				  -	      .byte	%00001110	; INTERRUPTED
    716  1bee				  -	      .byte	%00000110	; INTERRUPTED
    717  1bee				  -	      .byte	%00000000	; INTERRUPTED
    718  1bee				  -	      .byte	%01111110	; INTERRUPTED
    719  1bee				  -
    720  1bee				  -			;byte %00000000 ; INTERRUPTED
    721  1bee				  -
    722  1bee				  -	      .byte	%00110100	; INTERRUPTED
    723  1bee				  -	      .byte	%01100110	; INTERRUPTED
    724  1bee				  -	      .byte	%01100110	; INTERRUPTED
    725  1bee				  -	      .byte	%01100110	; INTERRUPTED
    726  1bee				  -	      .byte	%00110100	; INTERRUPTED
    727  1bee				  -	      .byte	%01100110	; INTERRUPTED
    728  1bee				  -	      .byte	%01100110	; INTERRUPTED
    729  1bee				  -	      .byte	%00110100	; INTERRUPTED
    730  1bee				  -
    731  1bee				  -			;byte %00000000 ; INTERRUPTED
    732  1bee				  -
    733  1bee				  -	      .byte	%00111000	; INTERRUPTED
    734  1bee				  -	      .byte	%00001100	; INTERRUPTED
    735  1bee				  -	      .byte	%00000110	; INTERRUPTED
    736  1bee				  -	      .byte	%00110110	; INTERRUPTED
    737  1bee				  -	      .byte	%01100110	; INTERRUPTED
    738  1bee				  -	      .byte	%01100110	; INTERRUPTED
    739  1bee				  -	      .byte	%01100110	; INTERRUPTED
    740  1bee				  -	      .byte	%00110100	; INTERRUPTED
    741  1bee				  -
    742  1bee					      endif		; INTERRUPTED
    743  1bee
    744  1bee
    745  1bee				  -	      if	fontstyle == TINY
    746  1bee				  -
    747  1bee				  -			;byte %00000000 ; TINY
    748  1bee				  -
    749  1bee				  -	      .byte	%00000000	; TINY
    750  1bee				  -	      .byte	%00111000	; TINY
    751  1bee				  -	      .byte	%00101000	; TINY
    752  1bee				  -	      .byte	%00101000	; TINY
    753  1bee				  -	      .byte	%00101000	; TINY
    754  1bee				  -	      .byte	%00111000	; TINY
    755  1bee				  -	      .byte	%00000000	; TINY
    756  1bee				  -	      .byte	%00000000	; TINY
    757  1bee				  -
    758  1bee				  -			;byte %00000000 ; TINY
    759  1bee				  -
    760  1bee				  -	      .byte	%00000000	; TINY
    761  1bee				  -	      .byte	%00010000	; TINY
    762  1bee				  -	      .byte	%00010000	; TINY
    763  1bee				  -	      .byte	%00010000	; TINY
    764  1bee				  -	      .byte	%00010000	; TINY
    765  1bee				  -	      .byte	%00010000	; TINY
    766  1bee				  -	      .byte	%00000000	; TINY
    767  1bee				  -	      .byte	%00000000	; TINY
    768  1bee				  -
    769  1bee				  -			;byte %00000000 ; TINY
    770  1bee				  -
    771  1bee				  -	      .byte	%00000000	; TINY
    772  1bee				  -	      .byte	%00111000	; TINY
    773  1bee				  -	      .byte	%00100000	; TINY
    774  1bee				  -	      .byte	%00111000	; TINY
    775  1bee				  -	      .byte	%00001000	; TINY
    776  1bee				  -	      .byte	%00111000	; TINY
    777  1bee				  -	      .byte	%00000000	; TINY
    778  1bee				  -	      .byte	%00000000	; TINY
    779  1bee				  -
    780  1bee				  -			;byte %00000000 ; TINY
    781  1bee				  -
    782  1bee				  -	      .byte	%00000000	; TINY
    783  1bee				  -	      .byte	%00111000	; TINY
    784  1bee				  -	      .byte	%00001000	; TINY
    785  1bee				  -	      .byte	%00111000	; TINY
    786  1bee				  -	      .byte	%00001000	; TINY
    787  1bee				  -	      .byte	%00111000	; TINY
    788  1bee				  -	      .byte	%00000000	; TINY
    789  1bee				  -	      .byte	%00000000	; TINY
    790  1bee				  -
    791  1bee				  -			;byte %00000000 ; TINY
    792  1bee				  -
    793  1bee				  -	      .byte	%00000000	; TINY
    794  1bee				  -	      .byte	%00001000	; TINY
    795  1bee				  -	      .byte	%00001000	; TINY
    796  1bee				  -	      .byte	%00111000	; TINY
    797  1bee				  -	      .byte	%00101000	; TINY
    798  1bee				  -	      .byte	%00101000	; TINY
    799  1bee				  -	      .byte	%00000000	; TINY
    800  1bee				  -	      .byte	%00000000	; TINY
    801  1bee				  -
    802  1bee				  -			;byte %00000000 ; TINY
    803  1bee				  -
    804  1bee				  -	      .byte	%00000000	; TINY
    805  1bee				  -	      .byte	%00111000	; TINY
    806  1bee				  -	      .byte	%00001000	; TINY
    807  1bee				  -	      .byte	%00111000	; TINY
    808  1bee				  -	      .byte	%00100000	; TINY
    809  1bee				  -	      .byte	%00111000	; TINY
    810  1bee				  -	      .byte	%00000000	; TINY
    811  1bee				  -	      .byte	%00000000	; TINY
    812  1bee				  -
    813  1bee				  -			;byte %00000000 ; TINY
    814  1bee				  -
    815  1bee				  -	      .byte	%00000000	; TINY
    816  1bee				  -	      .byte	%00111000	; TINY
    817  1bee				  -	      .byte	%00101000	; TINY
    818  1bee				  -	      .byte	%00111000	; TINY
    819  1bee				  -	      .byte	%00100000	; TINY
    820  1bee				  -	      .byte	%00111000	; TINY
    821  1bee				  -	      .byte	%00000000	; TINY
    822  1bee				  -	      .byte	%00000000	; TINY
    823  1bee				  -
    824  1bee				  -			;byte %00000000 ; TINY
    825  1bee				  -
    826  1bee				  -	      .byte	%00000000	; TINY
    827  1bee				  -	      .byte	%00001000	; TINY
    828  1bee				  -	      .byte	%00001000	; TINY
    829  1bee				  -	      .byte	%00001000	; TINY
    830  1bee				  -	      .byte	%00001000	; TINY
    831  1bee				  -	      .byte	%00111000	; TINY
    832  1bee				  -	      .byte	%00000000	; TINY
    833  1bee				  -	      .byte	%00000000	; TINY
    834  1bee				  -
    835  1bee				  -			;byte %00000000 ; TINY
    836  1bee				  -
    837  1bee				  -	      .byte	%00000000	; TINY
    838  1bee				  -	      .byte	%00111000	; TINY
    839  1bee				  -	      .byte	%00101000	; TINY
    840  1bee				  -	      .byte	%00111000	; TINY
    841  1bee				  -	      .byte	%00101000	; TINY
    842  1bee				  -	      .byte	%00111000	; TINY
    843  1bee				  -	      .byte	%00000000	; TINY
    844  1bee				  -	      .byte	%00000000	; TINY
    845  1bee				  -
    846  1bee				  -			;byte %00000000 ; TINY
    847  1bee				  -
    848  1bee				  -	      .byte	%00000000	; TINY
    849  1bee				  -	      .byte	%00001000	; TINY
    850  1bee				  -	      .byte	%00001000	; TINY
    851  1bee				  -	      .byte	%00111000	; TINY
    852  1bee				  -	      .byte	%00101000	; TINY
    853  1bee				  -	      .byte	%00111000	; TINY
    854  1bee				  -	      .byte	%00000000	; TINY
    855  1bee				  -	      .byte	%00000000	; TINY
    856  1bee				  -
    857  1bee					      endif		; TINY
    858  1bee
    859  1bee				  -	      if	fontstyle == RETROPUTER
    860  1bee				  -
    861  1bee				  -			;byte %00000000 ; RETROPUTER
    862  1bee				  -
    863  1bee				  -	      .byte	%01111110	; RETROPUTER
    864  1bee				  -	      .byte	%01000110	; RETROPUTER
    865  1bee				  -	      .byte	%01000110	; RETROPUTER
    866  1bee				  -	      .byte	%01000110	; RETROPUTER
    867  1bee				  -	      .byte	%01100010	; RETROPUTER
    868  1bee				  -	      .byte	%01100010	; RETROPUTER
    869  1bee				  -	      .byte	%01100010	; RETROPUTER
    870  1bee				  -	      .byte	%01111110	; RETROPUTER
    871  1bee				  -
    872  1bee				  -			;byte %00000000 ; RETROPUTER
    873  1bee				  -
    874  1bee				  -	      .byte	%00111000	; RETROPUTER
    875  1bee				  -	      .byte	%00111000	; RETROPUTER
    876  1bee				  -	      .byte	%00111000	; RETROPUTER
    877  1bee				  -	      .byte	%00111000	; RETROPUTER
    878  1bee				  -	      .byte	%00011000	; RETROPUTER
    879  1bee				  -	      .byte	%00011000	; RETROPUTER
    880  1bee				  -	      .byte	%00011000	; RETROPUTER
    881  1bee				  -	      .byte	%00011000	; RETROPUTER
    882  1bee				  -
    883  1bee				  -			;byte %00000000 ; RETROPUTER
    884  1bee				  -
    885  1bee				  -	      .byte	%01111110	; RETROPUTER
    886  1bee				  -	      .byte	%01100000	; RETROPUTER
    887  1bee				  -	      .byte	%01100000	; RETROPUTER
    888  1bee				  -	      .byte	%01100000	; RETROPUTER
    889  1bee				  -	      .byte	%00111110	; RETROPUTER
    890  1bee				  -	      .byte	%00000010	; RETROPUTER
    891  1bee				  -	      .byte	%01000010	; RETROPUTER
    892  1bee				  -	      .byte	%01111110	; RETROPUTER
    893  1bee				  -
    894  1bee				  -			;byte %00000000 ; RETROPUTER
    895  1bee				  -
    896  1bee				  -	      .byte	%01111110	; RETROPUTER
    897  1bee				  -	      .byte	%01000110	; RETROPUTER
    898  1bee				  -	      .byte	%00000110	; RETROPUTER
    899  1bee				  -	      .byte	%00000110	; RETROPUTER
    900  1bee				  -	      .byte	%00111110	; RETROPUTER
    901  1bee				  -	      .byte	%00000010	; RETROPUTER
    902  1bee				  -	      .byte	%01000010	; RETROPUTER
    903  1bee				  -	      .byte	%01111110	; RETROPUTER
    904  1bee				  -
    905  1bee				  -			;byte %00000000 ; RETROPUTER
    906  1bee				  -
    907  1bee				  -	      .byte	%00001100	; RETROPUTER
    908  1bee				  -	      .byte	%00001100	; RETROPUTER
    909  1bee				  -	      .byte	%00001100	; RETROPUTER
    910  1bee				  -	      .byte	%01111110	; RETROPUTER
    911  1bee				  -	      .byte	%01000100	; RETROPUTER
    912  1bee				  -	      .byte	%01000100	; RETROPUTER
    913  1bee				  -	      .byte	%01000100	; RETROPUTER
    914  1bee				  -	      .byte	%00000100	; RETROPUTER
    915  1bee				  -
    916  1bee				  -			;byte %00000000 ; RETROPUTER
    917  1bee				  -
    918  1bee				  -	      .byte	%01111110	; RETROPUTER
    919  1bee				  -	      .byte	%01000110	; RETROPUTER
    920  1bee				  -	      .byte	%00000110	; RETROPUTER
    921  1bee				  -	      .byte	%00000110	; RETROPUTER
    922  1bee				  -	      .byte	%01111100	; RETROPUTER
    923  1bee				  -	      .byte	%01000000	; RETROPUTER
    924  1bee				  -	      .byte	%01000000	; RETROPUTER
    925  1bee				  -	      .byte	%01111110	; RETROPUTER
    926  1bee				  -
    927  1bee				  -			;byte %00000000 ; RETROPUTER
    928  1bee				  -
    929  1bee				  -	      .byte	%01111110	; RETROPUTER
    930  1bee				  -	      .byte	%01000110	; RETROPUTER
    931  1bee				  -	      .byte	%01000110	; RETROPUTER
    932  1bee				  -	      .byte	%01000110	; RETROPUTER
    933  1bee				  -	      .byte	%01111100	; RETROPUTER
    934  1bee				  -	      .byte	%01000000	; RETROPUTER
    935  1bee				  -	      .byte	%01000010	; RETROPUTER
    936  1bee				  -	      .byte	%01111110	; RETROPUTER
    937  1bee				  -
    938  1bee				  -			;byte %00000000 ; RETROPUTER
    939  1bee				  -
    940  1bee				  -	      .byte	%00001100	; RETROPUTER
    941  1bee				  -	      .byte	%00001100	; RETROPUTER
    942  1bee				  -	      .byte	%00001100	; RETROPUTER
    943  1bee				  -	      .byte	%00001100	; RETROPUTER
    944  1bee				  -	      .byte	%00000100	; RETROPUTER
    945  1bee				  -	      .byte	%00000010	; RETROPUTER
    946  1bee				  -	      .byte	%01000010	; RETROPUTER
    947  1bee				  -	      .byte	%01111110	; RETROPUTER
    948  1bee				  -
    949  1bee				  -			;byte %00000000 ; RETROPUTER
    950  1bee				  -
    951  1bee				  -	      .byte	%01111110	; RETROPUTER
    952  1bee				  -	      .byte	%01000110	; RETROPUTER
    953  1bee				  -	      .byte	%01000110	; RETROPUTER
    954  1bee				  -	      .byte	%01000110	; RETROPUTER
    955  1bee				  -	      .byte	%01111110	; RETROPUTER
    956  1bee				  -	      .byte	%01000010	; RETROPUTER
    957  1bee				  -	      .byte	%01000010	; RETROPUTER
    958  1bee				  -	      .byte	%01111110	; RETROPUTER
    959  1bee				  -
    960  1bee				  -			;byte %00000000 ; RETROPUTER
    961  1bee				  -
    962  1bee				  -	      .byte	%00000110	; RETROPUTER
    963  1bee				  -	      .byte	%00000110	; RETROPUTER
    964  1bee				  -	      .byte	%00000110	; RETROPUTER
    965  1bee				  -	      .byte	%00000010	; RETROPUTER
    966  1bee				  -	      .byte	%01111110	; RETROPUTER
    967  1bee				  -	      .byte	%01000010	; RETROPUTER
    968  1bee				  -	      .byte	%01000010	; RETROPUTER
    969  1bee				  -	      .byte	%01111110	; RETROPUTER
    970  1bee				  -
    971  1bee					      endif		; RETROPUTER
    972  1bee
    973  1bee				  -	      if	fontstyle == CURVES
    974  1bee				  -
    975  1bee				  -			;byte %00000000 ; CURVES
    976  1bee				  -
    977  1bee				  -	      .byte	%00111100	; CURVES
    978  1bee				  -	      .byte	%01111110	; CURVES
    979  1bee				  -	      .byte	%01100110	; CURVES
    980  1bee				  -	      .byte	%01100110	; CURVES
    981  1bee				  -	      .byte	%01100110	; CURVES
    982  1bee				  -	      .byte	%01100110	; CURVES
    983  1bee				  -	      .byte	%01111110	; CURVES
    984  1bee				  -	      .byte	%00111100	; CURVES
    985  1bee				  -
    986  1bee				  -			;byte %00000000 ; CURVES
    987  1bee				  -
    988  1bee				  -	      .byte	%00011000	; CURVES
    989  1bee				  -	      .byte	%00011000	; CURVES
    990  1bee				  -	      .byte	%00011000	; CURVES
    991  1bee				  -	      .byte	%00011000	; CURVES
    992  1bee				  -	      .byte	%00011000	; CURVES
    993  1bee				  -	      .byte	%00011000	; CURVES
    994  1bee				  -	      .byte	%01111000	; CURVES
    995  1bee				  -	      .byte	%01110000	; CURVES
    996  1bee				  -
    997  1bee				  -			;byte %00000000 ; CURVES
    998  1bee				  -
    999  1bee				  -	      .byte	%01111110	; CURVES
   1000  1bee				  -	      .byte	%01111110	; CURVES
   1001  1bee				  -	      .byte	%01100000	; CURVES
   1002  1bee				  -	      .byte	%01111100	; CURVES
   1003  1bee				  -	      .byte	%00111110	; CURVES
   1004  1bee				  -	      .byte	%00000110	; CURVES
   1005  1bee				  -	      .byte	%01111110	; CURVES
   1006  1bee				  -	      .byte	%01111100	; CURVES
   1007  1bee				  -
   1008  1bee				  -			;byte %00000000 ; CURVES
   1009  1bee				  -
   1010  1bee				  -	      .byte	%01111100	; CURVES
   1011  1bee				  -	      .byte	%01111110	; CURVES
   1012  1bee				  -	      .byte	%00001110	; CURVES
   1013  1bee				  -	      .byte	%00111100	; CURVES
   1014  1bee				  -	      .byte	%00111100	; CURVES
   1015  1bee				  -	      .byte	%00001110	; CURVES
   1016  1bee				  -	      .byte	%01111110	; CURVES
   1017  1bee				  -	      .byte	%01111100	; CURVES
   1018  1bee				  -
   1019  1bee				  -			;byte %00000000 ; CURVES
   1020  1bee				  -
   1021  1bee				  -	      .byte	%00000110	; CURVES
   1022  1bee				  -	      .byte	%00000110	; CURVES
   1023  1bee				  -	      .byte	%00111110	; CURVES
   1024  1bee				  -	      .byte	%01111110	; CURVES
   1025  1bee				  -	      .byte	%01100110	; CURVES
   1026  1bee				  -	      .byte	%01100110	; CURVES
   1027  1bee				  -	      .byte	%01100110	; CURVES
   1028  1bee				  -	      .byte	%01100110	; CURVES
   1029  1bee				  -
   1030  1bee				  -			;byte %00000000 ; CURVES
   1031  1bee				  -
   1032  1bee				  -	      .byte	%01111100	; CURVES
   1033  1bee				  -	      .byte	%01111110	; CURVES
   1034  1bee				  -	      .byte	%00000110	; CURVES
   1035  1bee				  -	      .byte	%01111110	; CURVES
   1036  1bee				  -	      .byte	%01111100	; CURVES
   1037  1bee				  -	      .byte	%01100000	; CURVES
   1038  1bee				  -	      .byte	%01111110	; CURVES
   1039  1bee				  -	      .byte	%01111110	; CURVES
   1040  1bee				  -
   1041  1bee				  -			;byte %00000000 ; CURVES
   1042  1bee				  -
   1043  1bee				  -	      .byte	%00111100	; CURVES
   1044  1bee				  -	      .byte	%01111110	; CURVES
   1045  1bee				  -	      .byte	%01100110	; CURVES
   1046  1bee				  -	      .byte	%01111110	; CURVES
   1047  1bee				  -	      .byte	%01111100	; CURVES
   1048  1bee				  -	      .byte	%01100000	; CURVES
   1049  1bee				  -	      .byte	%01111110	; CURVES
   1050  1bee				  -	      .byte	%00111110	; CURVES
   1051  1bee				  -
   1052  1bee				  -			;byte %00000000 ; CURVES
   1053  1bee				  -
   1054  1bee				  -	      .byte	%00000110	; CURVES
   1055  1bee				  -	      .byte	%00000110	; CURVES
   1056  1bee				  -	      .byte	%00000110	; CURVES
   1057  1bee				  -	      .byte	%00000110	; CURVES
   1058  1bee				  -	      .byte	%00000110	; CURVES
   1059  1bee				  -	      .byte	%01100110	; CURVES
   1060  1bee				  -	      .byte	%01111110	; CURVES
   1061  1bee				  -	      .byte	%00111100	; CURVES
   1062  1bee				  -
   1063  1bee				  -			;byte %00000000 ; CURVES
   1064  1bee				  -
   1065  1bee				  -	      .byte	%00111100	; CURVES
   1066  1bee				  -	      .byte	%01111110	; CURVES
   1067  1bee				  -	      .byte	%01100110	; CURVES
   1068  1bee				  -	      .byte	%01111110	; CURVES
   1069  1bee				  -	      .byte	%00111100	; CURVES
   1070  1bee				  -	      .byte	%01100110	; CURVES
   1071  1bee				  -	      .byte	%01111110	; CURVES
   1072  1bee				  -	      .byte	%00111100	; CURVES
   1073  1bee				  -
   1074  1bee				  -			;byte %00000000 ; CURVES
   1075  1bee				  -
   1076  1bee				  -	      .byte	%01111100	; CURVES
   1077  1bee				  -	      .byte	%01111110	; CURVES
   1078  1bee				  -	      .byte	%00000110	; CURVES
   1079  1bee				  -	      .byte	%00111110	; CURVES
   1080  1bee				  -	      .byte	%01111110	; CURVES
   1081  1bee				  -	      .byte	%01100110	; CURVES
   1082  1bee				  -	      .byte	%01111110	; CURVES
   1083  1bee				  -	      .byte	%00111100	; CURVES
   1084  1bee				  -
   1085  1bee					      endif		; CURVES
   1086  1bee
   1087  1bee
   1088  1bee				  -	      if	fontstyle == HUSKY
   1089  1bee				  -
   1090  1bee				  -			;byte %00000000 ; HUSKY
   1091  1bee				  -
   1092  1bee				  -	      .byte	%01111100	; HUSKY
   1093  1bee				  -	      .byte	%11111110	; HUSKY
   1094  1bee				  -	      .byte	%11101110	; HUSKY
   1095  1bee				  -	      .byte	%11101110	; HUSKY
   1096  1bee				  -	      .byte	%11101110	; HUSKY
   1097  1bee				  -	      .byte	%11101110	; HUSKY
   1098  1bee				  -	      .byte	%11111110	; HUSKY
   1099  1bee				  -	      .byte	%01111100	; HUSKY
   1100  1bee				  -
   1101  1bee				  -			;byte %00000000 ; HUSKY
   1102  1bee				  -
   1103  1bee				  -	      .byte	%00111000	; HUSKY
   1104  1bee				  -	      .byte	%00111000	; HUSKY
   1105  1bee				  -	      .byte	%00111000	; HUSKY
   1106  1bee				  -	      .byte	%00111000	; HUSKY
   1107  1bee				  -	      .byte	%00111000	; HUSKY
   1108  1bee				  -	      .byte	%00111000	; HUSKY
   1109  1bee				  -	      .byte	%00111000	; HUSKY
   1110  1bee				  -	      .byte	%00111000	; HUSKY
   1111  1bee				  -
   1112  1bee				  -			;byte %00000000 ; HUSKY
   1113  1bee				  -
   1114  1bee				  -	      .byte	%11111110	; HUSKY
   1115  1bee				  -	      .byte	%11111110	; HUSKY
   1116  1bee				  -	      .byte	%11100000	; HUSKY
   1117  1bee				  -	      .byte	%11111100	; HUSKY
   1118  1bee				  -	      .byte	%01111110	; HUSKY
   1119  1bee				  -	      .byte	%00001110	; HUSKY
   1120  1bee				  -	      .byte	%11111110	; HUSKY
   1121  1bee				  -	      .byte	%11111100	; HUSKY
   1122  1bee				  -
   1123  1bee				  -			;byte %00000000 ; HUSKY
   1124  1bee				  -
   1125  1bee				  -	      .byte	%11111100	; HUSKY
   1126  1bee				  -	      .byte	%11111110	; HUSKY
   1127  1bee				  -	      .byte	%00001110	; HUSKY
   1128  1bee				  -	      .byte	%11111100	; HUSKY
   1129  1bee				  -	      .byte	%11111100	; HUSKY
   1130  1bee				  -	      .byte	%00001110	; HUSKY
   1131  1bee				  -	      .byte	%11111110	; HUSKY
   1132  1bee				  -	      .byte	%11111100	; HUSKY
   1133  1bee				  -
   1134  1bee				  -			;byte %00000000 ; HUSKY
   1135  1bee				  -
   1136  1bee				  -	      .byte	%00011100	; HUSKY
   1137  1bee				  -	      .byte	%00011100	; HUSKY
   1138  1bee				  -	      .byte	%11111110	; HUSKY
   1139  1bee				  -	      .byte	%11111110	; HUSKY
   1140  1bee				  -	      .byte	%11011100	; HUSKY
   1141  1bee				  -	      .byte	%11011100	; HUSKY
   1142  1bee				  -	      .byte	%00011100	; HUSKY
   1143  1bee				  -	      .byte	%00011100	; HUSKY
   1144  1bee				  -
   1145  1bee				  -			;byte %00000000 ; HUSKY
   1146  1bee				  -
   1147  1bee				  -	      .byte	%11111100	; HUSKY
   1148  1bee				  -	      .byte	%11111110	; HUSKY
   1149  1bee				  -	      .byte	%00001110	; HUSKY
   1150  1bee				  -	      .byte	%11111110	; HUSKY
   1151  1bee				  -	      .byte	%11111100	; HUSKY
   1152  1bee				  -	      .byte	%11100000	; HUSKY
   1153  1bee				  -	      .byte	%11111110	; HUSKY
   1154  1bee				  -	      .byte	%11111110	; HUSKY
   1155  1bee				  -
   1156  1bee				  -			;byte %00000000 ; HUSKY
   1157  1bee				  -
   1158  1bee				  -	      .byte	%01111100	; HUSKY
   1159  1bee				  -	      .byte	%11111110	; HUSKY
   1160  1bee				  -	      .byte	%11101110	; HUSKY
   1161  1bee				  -	      .byte	%11111110	; HUSKY
   1162  1bee				  -	      .byte	%11111100	; HUSKY
   1163  1bee				  -	      .byte	%11100000	; HUSKY
   1164  1bee				  -	      .byte	%11111110	; HUSKY
   1165  1bee				  -	      .byte	%01111110	; HUSKY
   1166  1bee				  -
   1167  1bee				  -			;byte %00000000 ; HUSKY
   1168  1bee				  -
   1169  1bee				  -	      .byte	%00111000	; HUSKY
   1170  1bee				  -	      .byte	%00111000	; HUSKY
   1171  1bee				  -	      .byte	%00111000	; HUSKY
   1172  1bee				  -	      .byte	%00111000	; HUSKY
   1173  1bee				  -	      .byte	%00011100	; HUSKY
   1174  1bee				  -	      .byte	%00001110	; HUSKY
   1175  1bee				  -	      .byte	%11111110	; HUSKY
   1176  1bee				  -	      .byte	%11111110	; HUSKY
   1177  1bee				  -
   1178  1bee				  -			;byte %00000000 ; HUSKY
   1179  1bee				  -
   1180  1bee				  -	      .byte	%01111100	; HUSKY
   1181  1bee				  -	      .byte	%11111110	; HUSKY
   1182  1bee				  -	      .byte	%11101110	; HUSKY
   1183  1bee				  -	      .byte	%11111110	; HUSKY
   1184  1bee				  -	      .byte	%01111100	; HUSKY
   1185  1bee				  -	      .byte	%11101110	; HUSKY
   1186  1bee				  -	      .byte	%11111110	; HUSKY
   1187  1bee				  -	      .byte	%01111100	; HUSKY
   1188  1bee				  -
   1189  1bee				  -			;byte %00000000 ; HUSKY
   1190  1bee				  -
   1191  1bee				  -	      .byte	%11111100	; HUSKY
   1192  1bee				  -	      .byte	%11111110	; HUSKY
   1193  1bee				  -	      .byte	%00001110	; HUSKY
   1194  1bee				  -	      .byte	%01111110	; HUSKY
   1195  1bee				  -	      .byte	%11111110	; HUSKY
   1196  1bee				  -	      .byte	%11101110	; HUSKY
   1197  1bee				  -	      .byte	%11111110	; HUSKY
   1198  1bee				  -	      .byte	%01111100	; HUSKY
   1199  1bee				  -
   1200  1bee					      endif		; HUSKY
   1201  1bee
   1202  1bee
   1203  1bee				  -	      if	fontstyle == SNAKE
   1204  1bee				  -
   1205  1bee				  -			;byte %00000000 ; SNAKE
   1206  1bee				  -
   1207  1bee				  -	      .byte	%01111110	; SNAKE
   1208  1bee				  -	      .byte	%01000010	; SNAKE
   1209  1bee				  -	      .byte	%01000010	; SNAKE
   1210  1bee				  -	      .byte	%01000010	; SNAKE
   1211  1bee				  -	      .byte	%01000010	; SNAKE
   1212  1bee				  -	      .byte	%01000010	; SNAKE
   1213  1bee				  -	      .byte	%01000010	; SNAKE
   1214  1bee				  -	      .byte	%01111110	; SNAKE
   1215  1bee				  -
   1216  1bee				  -			;byte %00000000 ; SNAKE
   1217  1bee				  -
   1218  1bee				  -	      .byte	%00111000	; SNAKE
   1219  1bee				  -	      .byte	%00101000	; SNAKE
   1220  1bee				  -	      .byte	%00001000	; SNAKE
   1221  1bee				  -	      .byte	%00001000	; SNAKE
   1222  1bee				  -	      .byte	%00001000	; SNAKE
   1223  1bee				  -	      .byte	%00001000	; SNAKE
   1224  1bee				  -	      .byte	%00001000	; SNAKE
   1225  1bee				  -	      .byte	%00111000	; SNAKE
   1226  1bee				  -
   1227  1bee				  -			;byte %00000000 ; SNAKE
   1228  1bee				  -
   1229  1bee				  -	      .byte	%01111110	; SNAKE
   1230  1bee				  -	      .byte	%01000010	; SNAKE
   1231  1bee				  -	      .byte	%01000110	; SNAKE
   1232  1bee				  -	      .byte	%01000000	; SNAKE
   1233  1bee				  -	      .byte	%01111110	; SNAKE
   1234  1bee				  -	      .byte	%00000010	; SNAKE
   1235  1bee				  -	      .byte	%01000010	; SNAKE
   1236  1bee				  -	      .byte	%01111110	; SNAKE
   1237  1bee				  -
   1238  1bee				  -			;byte %00000000 ; SNAKE
   1239  1bee				  -
   1240  1bee				  -	      .byte	%01111110	; SNAKE
   1241  1bee				  -	      .byte	%01000010	; SNAKE
   1242  1bee				  -	      .byte	%01100010	; SNAKE
   1243  1bee				  -	      .byte	%00000010	; SNAKE
   1244  1bee				  -	      .byte	%01111110	; SNAKE
   1245  1bee				  -	      .byte	%00000010	; SNAKE
   1246  1bee				  -	      .byte	%01000010	; SNAKE
   1247  1bee				  -	      .byte	%01111110	; SNAKE
   1248  1bee				  -
   1249  1bee				  -			;byte %00000000 ; SNAKE
   1250  1bee				  -
   1251  1bee				  -	      .byte	%00001110	; SNAKE
   1252  1bee				  -	      .byte	%00001010	; SNAKE
   1253  1bee				  -	      .byte	%00000010	; SNAKE
   1254  1bee				  -	      .byte	%01111110	; SNAKE
   1255  1bee				  -	      .byte	%01000010	; SNAKE
   1256  1bee				  -	      .byte	%01000010	; SNAKE
   1257  1bee				  -	      .byte	%01000010	; SNAKE
   1258  1bee				  -	      .byte	%01100110	; SNAKE
   1259  1bee				  -
   1260  1bee				  -			;byte %00000000 ; SNAKE
   1261  1bee				  -
   1262  1bee				  -	      .byte	%01111110	; SNAKE
   1263  1bee				  -	      .byte	%01000010	; SNAKE
   1264  1bee				  -	      .byte	%01100010	; SNAKE
   1265  1bee				  -	      .byte	%00000010	; SNAKE
   1266  1bee				  -	      .byte	%01111110	; SNAKE
   1267  1bee				  -	      .byte	%01000000	; SNAKE
   1268  1bee				  -	      .byte	%01000010	; SNAKE
   1269  1bee				  -	      .byte	%01111110	; SNAKE
   1270  1bee				  -
   1271  1bee				  -			;byte %00000000 ; SNAKE
   1272  1bee				  -
   1273  1bee				  -	      .byte	%01111110	; SNAKE
   1274  1bee				  -	      .byte	%01000010	; SNAKE
   1275  1bee				  -	      .byte	%01000010	; SNAKE
   1276  1bee				  -	      .byte	%01111110	; SNAKE
   1277  1bee				  -	      .byte	%01000000	; SNAKE
   1278  1bee				  -	      .byte	%01000110	; SNAKE
   1279  1bee				  -	      .byte	%01000010	; SNAKE
   1280  1bee				  -	      .byte	%01111110	; SNAKE
   1281  1bee				  -
   1282  1bee				  -			;byte %00000000 ; SNAKE
   1283  1bee				  -
   1284  1bee				  -	      .byte	%00000110	; SNAKE
   1285  1bee				  -	      .byte	%00000010	; SNAKE
   1286  1bee				  -	      .byte	%00000010	; SNAKE
   1287  1bee				  -	      .byte	%00000010	; SNAKE
   1288  1bee				  -	      .byte	%00000010	; SNAKE
   1289  1bee				  -	      .byte	%01100010	; SNAKE
   1290  1bee				  -	      .byte	%01000010	; SNAKE
   1291  1bee				  -	      .byte	%01111110	; SNAKE
   1292  1bee				  -
   1293  1bee				  -			;byte %00000000 ; SNAKE
   1294  1bee				  -
   1295  1bee				  -	      .byte	%01111110	; SNAKE
   1296  1bee				  -	      .byte	%01000010	; SNAKE
   1297  1bee				  -	      .byte	%01000010	; SNAKE
   1298  1bee				  -	      .byte	%01000010	; SNAKE
   1299  1bee				  -	      .byte	%01111110	; SNAKE
   1300  1bee				  -	      .byte	%01000010	; SNAKE
   1301  1bee				  -	      .byte	%01000010	; SNAKE
   1302  1bee				  -	      .byte	%01111110	; SNAKE
   1303  1bee				  -
   1304  1bee				  -			;byte %00000000 ; SNAKE
   1305  1bee				  -
   1306  1bee				  -	      .byte	%00001110	; SNAKE
   1307  1bee				  -	      .byte	%00001010	; SNAKE
   1308  1bee				  -	      .byte	%00000010	; SNAKE
   1309  1bee				  -	      .byte	%00000010	; SNAKE
   1310  1bee				  -	      .byte	%01111110	; SNAKE
   1311  1bee				  -	      .byte	%01000010	; SNAKE
   1312  1bee				  -	      .byte	%01000010	; SNAKE
   1313  1bee				  -	      .byte	%01111110	; SNAKE
   1314  1bee				  -
   1315  1bee				  -
   1316  1bee					      endif		; SNAKE
   1317  1bee
   1318  1bee				  -	      if	fontstyle == PLOK
   1319  1bee				  -
   1320  1bee				  -			;byte %00000000 ; PLOK
   1321  1bee				  -
   1322  1bee				  -	      .byte	%00000000	; PLOK
   1323  1bee				  -	      .byte	%00111000	; PLOK
   1324  1bee				  -	      .byte	%01100100	; PLOK
   1325  1bee				  -	      .byte	%01100010	; PLOK
   1326  1bee				  -	      .byte	%01100010	; PLOK
   1327  1bee				  -	      .byte	%00110110	; PLOK
   1328  1bee				  -	      .byte	%00011100	; PLOK
   1329  1bee				  -	      .byte	%00000000	; PLOK
   1330  1bee				  -
   1331  1bee				  -			;byte %00000000 ; PLOK
   1332  1bee				  -
   1333  1bee				  -	      .byte	%00000000	; PLOK
   1334  1bee				  -	      .byte	%00010000	; PLOK
   1335  1bee				  -	      .byte	%00011100	; PLOK
   1336  1bee				  -	      .byte	%00011100	; PLOK
   1337  1bee				  -	      .byte	%00011000	; PLOK
   1338  1bee				  -	      .byte	%00111000	; PLOK
   1339  1bee				  -	      .byte	%00011000	; PLOK
   1340  1bee				  -	      .byte	%00000000	; PLOK
   1341  1bee				  -
   1342  1bee				  -			;byte %00000000 ; PLOK
   1343  1bee				  -
   1344  1bee				  -	      .byte	%00000000	; PLOK
   1345  1bee				  -	      .byte	%00001110	; PLOK
   1346  1bee				  -	      .byte	%01111110	; PLOK
   1347  1bee				  -	      .byte	%00011000	; PLOK
   1348  1bee				  -	      .byte	%00001100	; PLOK
   1349  1bee				  -	      .byte	%00000110	; PLOK
   1350  1bee				  -	      .byte	%00111100	; PLOK
   1351  1bee				  -	      .byte	%00000000	; PLOK
   1352  1bee				  -
   1353  1bee				  -			;byte %00000000 ; PLOK
   1354  1bee				  -
   1355  1bee				  -	      .byte	%00000000	; PLOK
   1356  1bee				  -	      .byte	%00111100	; PLOK
   1357  1bee				  -	      .byte	%01101110	; PLOK
   1358  1bee				  -	      .byte	%00001110	; PLOK
   1359  1bee				  -	      .byte	%00011100	; PLOK
   1360  1bee				  -	      .byte	%00000110	; PLOK
   1361  1bee				  -	      .byte	%01111100	; PLOK
   1362  1bee				  -	      .byte	%00000000	; PLOK
   1363  1bee				  -
   1364  1bee				  -			;byte %00000000 ; PLOK
   1365  1bee				  -
   1366  1bee				  -	      .byte	%00000000	; PLOK
   1367  1bee				  -	      .byte	%00011000	; PLOK
   1368  1bee				  -	      .byte	%01111110	; PLOK
   1369  1bee				  -	      .byte	%01101100	; PLOK
   1370  1bee				  -	      .byte	%00100100	; PLOK
   1371  1bee				  -	      .byte	%00110000	; PLOK
   1372  1bee				  -	      .byte	%00110000	; PLOK
   1373  1bee				  -	      .byte	%00000000	; PLOK
   1374  1bee				  -
   1375  1bee				  -			;byte %00000000 ; PLOK
   1376  1bee				  -
   1377  1bee				  -	      .byte	%00000000	; PLOK
   1378  1bee				  -	      .byte	%00111100	; PLOK
   1379  1bee				  -	      .byte	%01001110	; PLOK
   1380  1bee				  -	      .byte	%00011100	; PLOK
   1381  1bee				  -	      .byte	%01100000	; PLOK
   1382  1bee				  -	      .byte	%01111100	; PLOK
   1383  1bee				  -	      .byte	%00011100	; PLOK
   1384  1bee				  -	      .byte	%00000000	; PLOK
   1385  1bee				  -
   1386  1bee				  -			;byte %00000000 ; PLOK
   1387  1bee				  -
   1388  1bee				  -	      .byte	%00000000	; PLOK
   1389  1bee				  -	      .byte	%00111100	; PLOK
   1390  1bee				  -	      .byte	%01000110	; PLOK
   1391  1bee				  -	      .byte	%01101100	; PLOK
   1392  1bee				  -	      .byte	%01110000	; PLOK
   1393  1bee				  -	      .byte	%00111000	; PLOK
   1394  1bee				  -	      .byte	%00010000	; PLOK
   1395  1bee				  -	      .byte	%00000000	; PLOK
   1396  1bee				  -
   1397  1bee				  -			;byte %00000000 ; PLOK
   1398  1bee				  -
   1399  1bee				  -	      .byte	%00000000	; PLOK
   1400  1bee				  -	      .byte	%00111100	; PLOK
   1401  1bee				  -	      .byte	%00011100	; PLOK
   1402  1bee				  -	      .byte	%00001100	; PLOK
   1403  1bee				  -	      .byte	%00000110	; PLOK
   1404  1bee				  -	      .byte	%01111110	; PLOK
   1405  1bee				  -	      .byte	%00110000	; PLOK
   1406  1bee				  -	      .byte	%00000000	; PLOK
   1407  1bee				  -
   1408  1bee				  -			;byte %00000000 ; PLOK
   1409  1bee				  -
   1410  1bee				  -	      .byte	%00000000	; PLOK
   1411  1bee				  -	      .byte	%00111100	; PLOK
   1412  1bee				  -	      .byte	%01001110	; PLOK
   1413  1bee				  -	      .byte	%01101110	; PLOK
   1414  1bee				  -	      .byte	%00111100	; PLOK
   1415  1bee				  -	      .byte	%01100100	; PLOK
   1416  1bee				  -	      .byte	%00111000	; PLOK
   1417  1bee				  -	      .byte	%00000000	; PLOK
   1418  1bee				  -
   1419  1bee				  -			;byte %00000000 ; PLOK
   1420  1bee				  -
   1421  1bee				  -	      .byte	%00000000	; PLOK
   1422  1bee				  -	      .byte	%00011000	; PLOK
   1423  1bee				  -	      .byte	%00001100	; PLOK
   1424  1bee				  -	      .byte	%00011100	; PLOK
   1425  1bee				  -	      .byte	%00100110	; PLOK
   1426  1bee				  -	      .byte	%01001110	; PLOK
   1427  1bee				  -	      .byte	%00111100	; PLOK
   1428  1bee				  -	      .byte	%00000000	; PLOK
   1429  1bee				  -
   1430  1bee					      endif		; PLOK
   1431  1bee
   1432  1bee							; ### any characters that aren't font specific follow... 
   1433  1bee
   1434  1bee				  -	      ifconst	fontcharSPACE
   1435  1bee				  -			;byte %00000000 ; SYMBOLS
   1436  1bee				  -
   1437  1bee				  -	      .byte	%00000000	; SYMBOLS
   1438  1bee				  -	      .byte	%00000000	; SYMBOLS
   1439  1bee				  -	      .byte	%00000000	; SYMBOLS
   1440  1bee				  -	      .byte	%00000000	; SYMBOLS
   1441  1bee				  -	      .byte	%00000000	; SYMBOLS
   1442  1bee				  -	      .byte	%00000000	; SYMBOLS
   1443  1bee				  -	      .byte	%00000000	; SYMBOLS
   1444  1bee				  -	      .byte	%00000000	; SYMBOLS
   1445  1bee				  -
   1446  1bee				  -			;byte %00000000 ; SYMBOLS
   1447  1bee					      endif		; fontcharSPACE
   1448  1bee
   1449  1bee				  -	      ifconst	fontcharDOLLAR
   1450  1bee				  -			;byte %00000000 ; SYMBOLS
   1451  1bee				  -
   1452  1bee				  -	      .byte	%00000000	; SYMBOLS
   1453  1bee				  -	      .byte	%00010000	; SYMBOLS
   1454  1bee				  -	      .byte	%01111100	; SYMBOLS
   1455  1bee				  -	      .byte	%00010010	; SYMBOLS
   1456  1bee				  -	      .byte	%01111100	; SYMBOLS
   1457  1bee				  -	      .byte	%10010000	; SYMBOLS
   1458  1bee				  -	      .byte	%01111100	; SYMBOLS
   1459  1bee				  -	      .byte	%00010000	; SYMBOLS
   1460  1bee				  -
   1461  1bee				  -			;byte %00000000 ; SYMBOLS
   1462  1bee				  -
   1463  1bee					      endif		; fontcharDOLLAR
   1464  1bee
   1465  1bee				  -	      ifconst	fontcharPOUND
   1466  1bee				  -			;byte %00000000 ; SYMBOLS
   1467  1bee				  -
   1468  1bee				  -	      .byte	%01111110	; SYMBOLS
   1469  1bee				  -	      .byte	%01000000	; SYMBOLS
   1470  1bee				  -	      .byte	%00100000	; SYMBOLS
   1471  1bee				  -	      .byte	%00100000	; SYMBOLS
   1472  1bee				  -	      .byte	%01111000	; SYMBOLS
   1473  1bee				  -	      .byte	%00100000	; SYMBOLS
   1474  1bee				  -	      .byte	%00100010	; SYMBOLS
   1475  1bee				  -	      .byte	%00011100	; SYMBOLS
   1476  1bee				  -
   1477  1bee				  -			;byte %00000000 ; SYMBOLS
   1478  1bee				  -
   1479  1bee					      endif		; fontcharPOUND
   1480  1bee
   1481  1bee
   1482  1bee				  -	      ifconst	fontcharMRHAPPY
   1483  1bee				  -			;byte %00000000 ; SYMBOLS
   1484  1bee				  -
   1485  1bee				  -	      .byte	%00111100	; SYMBOLS
   1486  1bee				  -	      .byte	%01100110	; SYMBOLS
   1487  1bee				  -	      .byte	%01011010	; SYMBOLS
   1488  1bee				  -	      .byte	%01111110	; SYMBOLS
   1489  1bee				  -	      .byte	%01111110	; SYMBOLS
   1490  1bee				  -	      .byte	%01011010	; SYMBOLS
   1491  1bee				  -	      .byte	%01111110	; SYMBOLS
   1492  1bee				  -	      .byte	%00111100	; SYMBOLS
   1493  1bee				  -
   1494  1bee				  -			;byte %00000000 ; SYMBOLS
   1495  1bee				  -
   1496  1bee					      endif		; fontcharMRHAPPY
   1497  1bee
   1498  1bee				  -	      ifconst	fontcharMRSAD
   1499  1bee				  -			;byte %00000000 ; SYMBOLS
   1500  1bee				  -
   1501  1bee				  -	      .byte	%00111100	; SYMBOLS
   1502  1bee				  -	      .byte	%01011010	; SYMBOLS
   1503  1bee				  -	      .byte	%01100110	; SYMBOLS
   1504  1bee				  -	      .byte	%01111110	; SYMBOLS
   1505  1bee				  -	      .byte	%01111110	; SYMBOLS
   1506  1bee				  -	      .byte	%01011010	; SYMBOLS
   1507  1bee				  -	      .byte	%01111110	; SYMBOLS
   1508  1bee				  -	      .byte	%00111100	; SYMBOLS
   1509  1bee				  -
   1510  1bee				  -			;byte %00000000 ; SYMBOLS
   1511  1bee				  -
   1512  1bee					      endif		; fontcharMRSAD
   1513  1bee
   1514  1bee
   1515  1bee				  -	      ifconst	fontcharCOPYRIGHT
   1516  1bee				  -			;byte %00000000 ; SYMBOLS
   1517  1bee				  -
   1518  1bee				  -	      .byte	%00000000	; SYMBOLS
   1519  1bee				  -	      .byte	%00111000	; SYMBOLS
   1520  1bee				  -	      .byte	%01000100	; SYMBOLS
   1521  1bee				  -	      .byte	%10111010	; SYMBOLS
   1522  1bee				  -	      .byte	%10100010	; SYMBOLS
   1523  1bee				  -	      .byte	%10111010	; SYMBOLS
   1524  1bee				  -	      .byte	%01000100	; SYMBOLS
   1525  1bee				  -	      .byte	%00111000	; SYMBOLS
   1526  1bee				  -
   1527  1bee				  -			;byte %00000000 ; SYMBOLS
   1528  1bee				  -
   1529  1bee					      endif		; fontcharCOPYRIGHT
   1530  1bee
   1531  1bee
   1532  1bee				  -	      ifconst	fontcharFUJI
   1533  1bee				  -
   1534  1bee				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   1535  1bee				  -
   1536  1bee				  -	      .byte	%01110000	; SYMBOLS
   1537  1bee				  -	      .byte	%01111001	; SYMBOLS
   1538  1bee				  -	      .byte	%00011101	; SYMBOLS
   1539  1bee				  -	      .byte	%00001101	; SYMBOLS
   1540  1bee				  -	      .byte	%00001101	; SYMBOLS
   1541  1bee				  -	      .byte	%00001101	; SYMBOLS
   1542  1bee				  -	      .byte	%00001101	; SYMBOLS
   1543  1bee				  -	      .byte	%00000000	; SYMBOLS
   1544  1bee				  -
   1545  1bee				  -			;byte %00000000 ; SYMBOLS
   1546  1bee				  -
   1547  1bee				  -	      .byte	%00001110	; SYMBOLS
   1548  1bee				  -	      .byte	%10011110	; SYMBOLS
   1549  1bee				  -	      .byte	%10111000	; SYMBOLS
   1550  1bee				  -	      .byte	%10110000	; SYMBOLS
   1551  1bee				  -	      .byte	%10110000	; SYMBOLS
   1552  1bee				  -	      .byte	%10110000	; SYMBOLS
   1553  1bee				  -	      .byte	%10110000	; SYMBOLS
   1554  1bee				  -	      .byte	%00000000	; SYMBOLS
   1555  1bee				  -
   1556  1bee				  -			;byte %00000000 ; SYMBOLS
   1557  1bee				  -
   1558  1bee					      endif		; fontcharFUJI
   1559  1bee
   1560  1bee
   1561  1bee				  -	      ifconst	fontcharHEART
   1562  1bee				  -			;byte %00000000 ; SYMBOLS
   1563  1bee				  -
   1564  1bee				  -	      .byte	%00010000	; SYMBOLS
   1565  1bee				  -	      .byte	%00111000	; SYMBOLS
   1566  1bee				  -	      .byte	%01111100	; SYMBOLS
   1567  1bee				  -	      .byte	%01111100	; SYMBOLS
   1568  1bee				  -	      .byte	%11111110	; SYMBOLS
   1569  1bee				  -	      .byte	%11111110	; SYMBOLS
   1570  1bee				  -	      .byte	%11101110	; SYMBOLS
   1571  1bee				  -	      .byte	%01000100	; SYMBOLS
   1572  1bee				  -
   1573  1bee				  -			;byte %00000000 ; SYMBOLS
   1574  1bee				  -
   1575  1bee					      endif		; fontcharHEART
   1576  1bee
   1577  1bee				  -	      ifconst	fontcharDIAMOND
   1578  1bee				  -			;byte %00000000 ; SYMBOLS
   1579  1bee				  -
   1580  1bee				  -	      .byte	%00010000	; SYMBOLS
   1581  1bee				  -	      .byte	%00111000	; SYMBOLS
   1582  1bee				  -	      .byte	%01111100	; SYMBOLS
   1583  1bee				  -	      .byte	%11111110	; SYMBOLS
   1584  1bee				  -	      .byte	%11111110	; SYMBOLS
   1585  1bee				  -	      .byte	%01111100	; SYMBOLS
   1586  1bee				  -	      .byte	%00111000	; SYMBOLS
   1587  1bee				  -	      .byte	%00010000	; SYMBOLS
   1588  1bee				  -
   1589  1bee				  -			;byte %00000000 ; SYMBOLS
   1590  1bee				  -
   1591  1bee					      endif		; fontcharDIAMOND
   1592  1bee
   1593  1bee				  -	      ifconst	fontcharSPADE
   1594  1bee				  -			;byte %00000000 ; SYMBOLS
   1595  1bee				  -
   1596  1bee				  -	      .byte	%00111000	; SYMBOLS
   1597  1bee				  -	      .byte	%00010000	; SYMBOLS
   1598  1bee				  -	      .byte	%01010100	; SYMBOLS
   1599  1bee				  -	      .byte	%11111110	; SYMBOLS
   1600  1bee				  -	      .byte	%11111110	; SYMBOLS
   1601  1bee				  -	      .byte	%01111100	; SYMBOLS
   1602  1bee				  -	      .byte	%00111000	; SYMBOLS
   1603  1bee				  -	      .byte	%00010000	; SYMBOLS
   1604  1bee				  -
   1605  1bee				  -			;byte %00000000 ; SYMBOLS
   1606  1bee				  -
   1607  1bee					      endif		; fontcharSPADE
   1608  1bee
   1609  1bee				  -	      ifconst	fontcharCLUB
   1610  1bee				  -			;byte %00000000 ; SYMBOLS
   1611  1bee				  -
   1612  1bee				  -	      .byte	%00111000	; SYMBOLS
   1613  1bee				  -	      .byte	%00010000	; SYMBOLS
   1614  1bee				  -	      .byte	%11010110	; SYMBOLS
   1615  1bee				  -	      .byte	%11111110	; SYMBOLS
   1616  1bee				  -	      .byte	%11010110	; SYMBOLS
   1617  1bee				  -	      .byte	%00111000	; SYMBOLS
   1618  1bee				  -	      .byte	%00111000	; SYMBOLS
   1619  1bee				  -	      .byte	%00000000	; SYMBOLS
   1620  1bee				  -
   1621  1bee				  -			;byte %00000000 ; SYMBOLS
   1622  1bee				  -
   1623  1bee					      endif		; fontcharCLUB
   1624  1bee
   1625  1bee
   1626  1bee				  -	      ifconst	fontcharCOLON
   1627  1bee				  -			;byte %00000000 ; SYMBOLS
   1628  1bee				  -
   1629  1bee				  -	      .byte	%00000000	; SYMBOLS
   1630  1bee				  -	      .byte	%00011000	; SYMBOLS
   1631  1bee				  -	      .byte	%00011000	; SYMBOLS
   1632  1bee				  -	      .byte	%00000000	; SYMBOLS
   1633  1bee				  -	      .byte	%00000000	; SYMBOLS
   1634  1bee				  -	      .byte	%00011000	; SYMBOLS
   1635  1bee				  -	      .byte	%00011000	; SYMBOLS
   1636  1bee				  -	      .byte	%00000000	; SYMBOLS
   1637  1bee				  -
   1638  1bee				  -			;byte %00000000 ; SYMBOLS
   1639  1bee				  -
   1640  1bee					      endif		; fontcharCOLON
   1641  1bee
   1642  1bee
   1643  1bee				  -	      ifconst	fontcharBLOCK
   1644  1bee				  -
   1645  1bee				  -			;byte %00000000 ; SYMBOLS
   1646  1bee				  -
   1647  1bee				  -	      .byte	%11111111	; SYMBOLS
   1648  1bee				  -	      .byte	%11111111	; SYMBOLS
   1649  1bee				  -	      .byte	%11111111	; SYMBOLS
   1650  1bee				  -	      .byte	%11111111	; SYMBOLS
   1651  1bee				  -	      .byte	%11111111	; SYMBOLS
   1652  1bee				  -	      .byte	%11111111	; SYMBOLS
   1653  1bee				  -	      .byte	%11111111	; SYMBOLS
   1654  1bee				  -	      .byte	%11111111	; SYMBOLS
   1655  1bee				  -
   1656  1bee				  -			;byte %00000000 ; SYMBOLS
   1657  1bee				  -
   1658  1bee					      endif		; fontcharBLOCK
   1659  1bee
   1660  1bee				  -	      ifconst	fontcharUNDERLINE
   1661  1bee				  -
   1662  1bee				  -			;byte %00000000 ; SYMBOLS
   1663  1bee				  -
   1664  1bee				  -	      .byte	%11111111	; SYMBOLS
   1665  1bee				  -	      .byte	%00000000	; SYMBOLS
   1666  1bee				  -	      .byte	%00000000	; SYMBOLS
   1667  1bee				  -	      .byte	%00000000	; SYMBOLS
   1668  1bee				  -	      .byte	%00000000	; SYMBOLS
   1669  1bee				  -	      .byte	%00000000	; SYMBOLS
   1670  1bee				  -	      .byte	%00000000	; SYMBOLS
   1671  1bee				  -	      .byte	%00000000	; SYMBOLS
   1672  1bee				  -
   1673  1bee				  -			;byte %00000000 ; SYMBOLS
   1674  1bee				  -
   1675  1bee					      endif		; fontcharUNDERLINE
   1676  1bee
   1677  1bee				  -	      ifconst	fontcharARISIDE
   1678  1bee				  -			;byte %00000000 ; SYMBOLS
   1679  1bee				  -
   1680  1bee				  -	      .byte	%00000000	; SYMBOLS
   1681  1bee				  -	      .byte	%00101010	; SYMBOLS
   1682  1bee				  -	      .byte	%00101010	; SYMBOLS
   1683  1bee				  -	      .byte	%00101100	; SYMBOLS
   1684  1bee				  -	      .byte	%01111111	; SYMBOLS
   1685  1bee				  -	      .byte	%00110111	; SYMBOLS
   1686  1bee				  -	      .byte	%00000010	; SYMBOLS
   1687  1bee				  -	      .byte	%00000001	; SYMBOLS
   1688  1bee				  -
   1689  1bee				  -			;byte %00000000 ; SYMBOLS
   1690  1bee				  -
   1691  1bee					      endif		; fontcharARISIDE
   1692  1bee
   1693  1bee				  -	      ifconst	fontcharARIFACE
   1694  1bee				  -			;byte %00000000 ; SYMBOLS
   1695  1bee				  -
   1696  1bee				  -	      .byte	%00001000	; SYMBOLS
   1697  1bee				  -	      .byte	%00011100	; SYMBOLS
   1698  1bee				  -	      .byte	%00111110	; SYMBOLS
   1699  1bee				  -	      .byte	%00101010	; SYMBOLS
   1700  1bee				  -	      .byte	%00011100	; SYMBOLS
   1701  1bee				  -	      .byte	%01010100	; SYMBOLS
   1702  1bee				  -	      .byte	%00100100	; SYMBOLS
   1703  1bee				  -	      .byte	%00000010	; SYMBOLS
   1704  1bee				  -
   1705  1bee				  -			;byte %00000000 ; SYMBOLS
   1706  1bee				  -
   1707  1bee				  -
   1708  1bee					      endif		; fontcharARIRACE
   1709  1bee
------- FILE titlescreen/asm/titlescreen.asm
    303  1bee					      endif
    304  1bee
    305  1bee				  -	      ifconst	mk_gameselect_on
    306  1bee				  -	      include	"titlescreen/gameselect_image.asm"
    307  1bee					      endif
    308  1bee
    309  1bee				  -	      ifconst	mk_player_on
    310  1bee				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  1bee					      endif		;mk_player_on
    312  1bee
    313  1bee
------- FILE c:\Users\start\OneDrive\Documents\Visual Code Workspace\Atari-2600-Game\Atari2600.bas.asm
    200  1bee
    201  1bee				   .
    202  1bee							; 
    203  1bee
    204  1bee					      if	ECHO1
      998 bytes of ROM space left in bank 1
    205  1bee					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
    206  1bee					      endif
    207  1bee		       00 01	   ECHO1      =	1
    208  1fd4					      ORG	$1FF4-bscode_length
    209  1fd4					      RORG	$9FF4-bscode_length
    210  1fd4		       a2 ff	   start_bank1 ldx	#$ff
    211  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
    212  1fd6				  -	      stx	FASTFETCH
    213  1fd6					      endif
    214  1fd6		       9a		      txs
    215  1fd7				  -	      if	bankswitch == 64
    216  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    217  1fd7					      else
    218  1fd7		       a9 f2		      lda	#>(start-1)
    219  1fd9					      endif
    220  1fd9		       48		      pha
    221  1fda		       a9 4f		      lda	#<(start-1)
    222  1fdc		       48		      pha
    223  1fdd		       48		      pha
    224  1fde		       8a		      txa
    225  1fdf		       48		      pha
    226  1fe0		       ba		      tsx
    227  1fe1					      if	bankswitch != 64
    228  1fe1		       b5 04		      lda	4,x	; get high byte of return address
    229  1fe3		       2a		      rol
    230  1fe4		       2a		      rol
    231  1fe5		       2a		      rol
    232  1fe6		       2a		      rol
    233  1fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    234  1fe9		       aa		      tax
    235  1fea		       e8		      inx
    236  1feb				  -	      else
    237  1feb				  -	      lda	4,x	; get high byte of return address
    238  1feb				  -	      tay
    239  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    240  1feb				  -	      sta	4,x
    241  1feb				  -	      tya
    242  1feb				  -	      lsr
    243  1feb				  -	      lsr
    244  1feb				  -	      lsr
    245  1feb				  -	      lsr
    246  1feb				  -	      tax
    247  1feb				  -	      inx
    248  1feb					      endif
    249  1feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    250  1fee		       68		      pla
    251  1fef		       aa		      tax
    252  1ff0		       68		      pla
    253  1ff1		       60		      rts
    254  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    255  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    256  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    257  1ff2					      endif
    258  1ffc					      ORG	$1FFC
    259  1ffc					      RORG	$9FFC
    260  1ffc		       d4 9f		      .word.w	(start_bank1 & $ffff)
    261  1ffe		       d4 9f		      .word.w	(start_bank1 & $ffff)
    262  2000					      ORG	$2000
    263  2000					      RORG	$B000
    264  2000					      if	ECHO2
      4052 bytes of ROM space left in bank 2
    265  2000					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
    266  2000					      endif
    267  2000		       00 01	   ECHO2      =	1
    268  2fd4					      ORG	$2FF4-bscode_length
    269  2fd4					      RORG	$BFF4-bscode_length
    270  2fd4		       a2 ff	   start_bank2 ldx	#$ff
    271  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
    272  2fd6				  -	      stx	FASTFETCH
    273  2fd6					      endif
    274  2fd6		       9a		      txs
    275  2fd7				  -	      if	bankswitch == 64
    276  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    277  2fd7					      else
    278  2fd7		       a9 f2		      lda	#>(start-1)
    279  2fd9					      endif
    280  2fd9		       48		      pha
    281  2fda		       a9 4f		      lda	#<(start-1)
    282  2fdc		       48		      pha
    283  2fdd		       48		      pha
    284  2fde		       8a		      txa
    285  2fdf		       48		      pha
    286  2fe0		       ba		      tsx
    287  2fe1					      if	bankswitch != 64
    288  2fe1		       b5 04		      lda	4,x	; get high byte of return address
    289  2fe3		       2a		      rol
    290  2fe4		       2a		      rol
    291  2fe5		       2a		      rol
    292  2fe6		       2a		      rol
    293  2fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    294  2fe9		       aa		      tax
    295  2fea		       e8		      inx
    296  2feb				  -	      else
    297  2feb				  -	      lda	4,x	; get high byte of return address
    298  2feb				  -	      tay
    299  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    300  2feb				  -	      sta	4,x
    301  2feb				  -	      tya
    302  2feb				  -	      lsr
    303  2feb				  -	      lsr
    304  2feb				  -	      lsr
    305  2feb				  -	      lsr
    306  2feb				  -	      tax
    307  2feb				  -	      inx
    308  2feb					      endif
    309  2feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    310  2fee		       68		      pla
    311  2fef		       aa		      tax
    312  2ff0		       68		      pla
    313  2ff1		       60		      rts
    314  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    315  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    316  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    317  2ff2					      endif
    318  2ffc					      ORG	$2FFC
    319  2ffc					      RORG	$BFFC
    320  2ffc		       d4 bf		      .word.w	(start_bank2 & $ffff)
    321  2ffe		       d4 bf		      .word.w	(start_bank2 & $ffff)
    322  3000					      ORG	$3000
    323  3000					      RORG	$D000
    324  3000					      if	ECHO3
      4052 bytes of ROM space left in bank 3
    325  3000					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
    326  3000					      endif
    327  3000		       00 01	   ECHO3      =	1
    328  3fd4					      ORG	$3FF4-bscode_length
    329  3fd4					      RORG	$DFF4-bscode_length
    330  3fd4		       a2 ff	   start_bank3 ldx	#$ff
    331  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
    332  3fd6				  -	      stx	FASTFETCH
    333  3fd6					      endif
    334  3fd6		       9a		      txs
    335  3fd7				  -	      if	bankswitch == 64
    336  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    337  3fd7					      else
    338  3fd7		       a9 f2		      lda	#>(start-1)
    339  3fd9					      endif
    340  3fd9		       48		      pha
    341  3fda		       a9 4f		      lda	#<(start-1)
    342  3fdc		       48		      pha
    343  3fdd		       48		      pha
    344  3fde		       8a		      txa
    345  3fdf		       48		      pha
    346  3fe0		       ba		      tsx
    347  3fe1					      if	bankswitch != 64
    348  3fe1		       b5 04		      lda	4,x	; get high byte of return address
    349  3fe3		       2a		      rol
    350  3fe4		       2a		      rol
    351  3fe5		       2a		      rol
    352  3fe6		       2a		      rol
    353  3fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    354  3fe9		       aa		      tax
    355  3fea		       e8		      inx
    356  3feb				  -	      else
    357  3feb				  -	      lda	4,x	; get high byte of return address
    358  3feb				  -	      tay
    359  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    360  3feb				  -	      sta	4,x
    361  3feb				  -	      tya
    362  3feb				  -	      lsr
    363  3feb				  -	      lsr
    364  3feb				  -	      lsr
    365  3feb				  -	      lsr
    366  3feb				  -	      tax
    367  3feb				  -	      inx
    368  3feb					      endif
    369  3feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    370  3fee		       68		      pla
    371  3fef		       aa		      tax
    372  3ff0		       68		      pla
    373  3ff1		       60		      rts
    374  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    375  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    376  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    377  3ff2					      endif
    378  3ffc					      ORG	$3FFC
    379  3ffc					      RORG	$DFFC
    380  3ffc		       d4 df		      .word.w	(start_bank3 & $ffff)
    381  3ffe		       d4 df		      .word.w	(start_bank3 & $ffff)
    382  4000					      ORG	$4000
    383  4000					      RORG	$F000
    384  4000							; Provided under the CC0 license. See the included LICENSE.txt for details.
    385  4000
    386  4000							; This is a 2-line kernel!
    387  4000					      ifnconst	vertical_reflect
    388  4000				   kernel
    389  4000					      endif
    390  4000		       85 02		      sta	WSYNC
    391  4002		       a9 ff		      lda	#255
    392  4004		       8d 96 02 	      sta	TIM64T
    393  4007
    394  4007		       a9 01		      lda	#1
    395  4009		       85 27		      sta	VDELBL
    396  400b		       85 25		      sta	VDELP0
    397  400d		       a6 92		      ldx	ballheight
    398  400f		       e8		      inx
    399  4010		       e8		      inx
    400  4011		       86 9f		      stx	temp4
    401  4013		       a5 86		      lda	player1y
    402  4015		       85 9e		      sta	temp3
    403  4017
    404  4017				  -	      ifconst	shakescreen
    405  4017				  -	      jsr	doshakescreen
    406  4017					      else
    407  4017		       a6 90		      ldx	missile0height
    408  4019		       e8		      inx
    409  401a					      endif
    410  401a
    411  401a		       e8		      inx
    412  401b		       86 f6		      stx	stack1
    413  401d
    414  401d		       a5 89		      lda	bally
    415  401f		       85 f7		      sta	stack2
    416  4021
    417  4021		       a5 85		      lda	player0y
    418  4023		       a2 00		      ldx	#0
    419  4025		       85 02		      sta	WSYNC
    420  4027		       86 1b		      stx	GRP0
    421  4029		       86 1c		      stx	GRP1
    422  402b		       86 0e		      stx	PF1L
    423  402d		       86 0f		      stx	PF2
    424  402f		       86 2c		      stx	CXCLR
    425  4031				  -	      ifconst	readpaddle
    426  4031				  -	      stx	paddle
    427  4031					      else
      0  4031					      sleep	3
      1  4031				   .CYCLES    SET	3
      2  4031
      3  4031				  -	      IF	.CYCLES < 2
      4  4031				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4031				  -	      ERR
      6  4031					      ENDIF
      7  4031
      8  4031					      IF	.CYCLES & 1
      9  4031					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4031		       04 00		      nop	0
     11  4033				  -	      ELSE
     12  4033				  -	      bit	VSYNC
     13  4033					      ENDIF
     14  4033				   .CYCLES    SET	.CYCLES - 3
     15  4033					      ENDIF
     16  4033
     17  4033				  -	      REPEAT	.CYCLES / 2
     18  4033				  -	      nop
     19  4033					      REPEND
    429  4033					      endif
    430  4033
    431  4033		       95 9d		      sta	temp2,x
    432  4035
    433  4035							;store these so they can be retrieved later
    434  4035					      ifnconst	pfres
    435  4035		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    436  4037				  -	      else
    437  4037				  -	      ldx	#132-pfres*pfwidth
    438  4037					      endif
    439  4037
    440  4037		       c6 85		      dec	player0y
    441  4039
    442  4039		       a5 91		      lda	missile0y
    443  403b		       85 a0		      sta	temp5
    444  403d		       a5 88		      lda	missile1y
    445  403f		       85 a1		      sta	temp6
    446  4041
    447  4041		       a5 ef		      lda	playfieldpos
    448  4043		       85 9c		      sta	temp1
    449  4045
    450  4045				  -	      ifconst	pfrowheight
    451  4045				  -	      lda	#pfrowheight+2
    452  4045					      else
    453  4045					      ifnconst	pfres
    454  4045		       a9 0a		      lda	#10
    455  4047				  -	      else
    456  4047				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    457  4047					      endif
    458  4047					      endif
    459  4047		       18		      clc
    460  4048		       e5 ef		      sbc	playfieldpos
    461  404a		       85 ef		      sta	playfieldpos
    462  404c		       4c 74 f0 	      jmp	.startkernel
    463  404f
    464  404f				   .skipDrawP0
    465  404f		       a9 00		      lda	#0
    466  4051		       a8		      tay
    467  4052		       4c a3 f0 	      jmp	.continueP0
    468  4055
    469  4055				   .skipDrawP1
    470  4055		       a9 00		      lda	#0
    471  4057		       a8		      tay
    472  4058		       4c 7e f0 	      jmp	.continueP1
    473  405b
    474  405b				   .kerloop		; enter at cycle 59??
    475  405b
    476  405b				   continuekernel
      0  405b					      sleep	2
      1  405b				   .CYCLES    SET	2
      2  405b
      3  405b				  -	      IF	.CYCLES < 2
      4  405b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  405b				  -	      ERR
      6  405b					      ENDIF
      7  405b
      8  405b				  -	      IF	.CYCLES & 1
      9  405b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  405b				  -	      nop	0
     11  405b				  -	      ELSE
     12  405b				  -	      bit	VSYNC
     13  405b				  -	      ENDIF
     14  405b				  -.CYCLES    SET	.CYCLES - 3
     15  405b					      ENDIF
     16  405b
     17  405b					      REPEAT	.CYCLES / 2
     18  405b		       ea		      nop
     19  405c					      REPEND
    478  405c				   continuekernel2
    479  405c		       a5 92		      lda	ballheight
    480  405e
    481  405e				  -	      ifconst	pfres
    482  405e				  -	      ldy	playfield+pfres*pfwidth-132,x
    483  405e				  -	      sty	PF1L	;3
    484  405e				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    485  405e				  -	      sty	PF2L	;3
    486  405e				  -	      ldy	playfield+pfres*pfwidth-129,x
    487  405e				  -	      sty	PF1R	; 3 too early?
    488  405e				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    489  405e				  -	      sty	PF2R	;3
    490  405e					      else
    491  405e		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    492  4060		       84 0e		      sty	PF1L	;3
    493  4062		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    494  4064		       84 0f		      sty	PF2L	;3
    495  4066		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    496  4068		       84 0e		      sty	PF1R	; 3 too early?
    497  406a		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    498  406c		       84 0f		      sty	PF2R	;3
    499  406e					      endif
    500  406e
    501  406e							; should be playfield+$38 for width=2
    502  406e
    503  406e		       c7 89		      dcp	bally
    504  4070		       2a		      rol
    505  4071		       2a		      rol
    506  4072							; rol
    507  4072							; rol
    508  4072				   goback
    509  4072		       85 1f		      sta	ENABL
    510  4074				   .startkernel
    511  4074		       a5 8f		      lda	player1height	;3
    512  4076		       c7 86		      dcp	player1y	;5
    513  4078		       90 db		      bcc	.skipDrawP1	;2
    514  407a		       a4 86		      ldy	player1y	;3
    515  407c		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    516  407e							; so it doesn't cross a page boundary!
    517  407e
    518  407e				   .continueP1
    519  407e		       85 1c		      sta	GRP1	;3
    520  4080
    521  4080				  -	      ifnconst	player1colors
    522  4080				  -	      lda	missile1height	;3
    523  4080				  -	      dcp	missile1y	;5
    524  4080				  -	      rol		;2
    525  4080				  -	      rol		;2
    526  4080				  -	      sta	ENAM1	;3
    527  4080					      else
    528  4080		       b1 87		      lda	(player1color),y
    529  4082		       85 07		      sta	COLUP1
    530  4084				  -	      ifnconst	playercolors
    531  4084				  -	      sleep	7
    532  4084					      else
    533  4084		       ad 82 00 	      lda.w	player0colorstore
    534  4087		       85 06		      sta	COLUP0
    535  4089					      endif
    536  4089					      endif
    537  4089
    538  4089				  -	      ifconst	pfres
    539  4089				  -	      lda	playfield+pfres*pfwidth-132,x
    540  4089				  -	      sta	PF1L	;3
    541  4089				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    542  4089				  -	      sta	PF2L	;3
    543  4089				  -	      lda	playfield+pfres*pfwidth-129,x
    544  4089				  -	      sta	PF1R	; 3 too early?
    545  4089				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    546  4089				  -	      sta	PF2R	;3
    547  4089					      else
    548  4089		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    549  408b		       85 0e		      sta	PF1L	;3
    550  408d		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    551  408f		       85 0f		      sta	PF2L	;3
    552  4091		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    553  4093		       85 0e		      sta	PF1R	; 3 too early?
    554  4095		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    555  4097		       85 0f		      sta	PF2R	;3
    556  4099					      endif
    557  4099							; sleep 3
    558  4099
    559  4099		       a5 8e		      lda	player0height
    560  409b		       c7 85		      dcp	player0y
    561  409d		       90 b0		      bcc	.skipDrawP0
    562  409f		       a4 85		      ldy	player0y
    563  40a1		       b1 8a		      lda	(player0pointer),y
    564  40a3				   .continueP0
    565  40a3		       85 1b		      sta	GRP0
    566  40a5
    567  40a5					      ifnconst	no_blank_lines
    568  40a5				  -	      ifnconst	playercolors
    569  40a5				  -	      lda	missile0height	;3
    570  40a5				  -	      dcp	missile0y	;5
    571  40a5				  -	      sbc	stack1
    572  40a5				  -	      sta	ENAM0	;3
    573  40a5					      else
    574  40a5		       b1 90		      lda	(player0color),y
    575  40a7		       85 82		      sta	player0colorstore
      0  40a9					      sleep	6
      1  40a9				   .CYCLES    SET	6
      2  40a9
      3  40a9				  -	      IF	.CYCLES < 2
      4  40a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40a9				  -	      ERR
      6  40a9					      ENDIF
      7  40a9
      8  40a9				  -	      IF	.CYCLES & 1
      9  40a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40a9				  -	      nop	0
     11  40a9				  -	      ELSE
     12  40a9				  -	      bit	VSYNC
     13  40a9				  -	      ENDIF
     14  40a9				  -.CYCLES    SET	.CYCLES - 3
     15  40a9					      ENDIF
     16  40a9
     17  40a9					      REPEAT	.CYCLES / 2
     18  40a9		       ea		      nop
     17  40a9					      REPEND
     18  40aa		       ea		      nop
     17  40aa					      REPEND
     18  40ab		       ea		      nop
     19  40ac					      REPEND
    577  40ac					      endif
    578  40ac		       c6 9c		      dec	temp1
    579  40ae		       d0 ab		      bne	continuekernel
    580  40b0				  -	      else
    581  40b0				  -	      dec	temp1
    582  40b0				  -	      beq	altkernel2
    583  40b0				  -	      ifconst	readpaddle
    584  40b0				  -	      ldy	currentpaddle
    585  40b0				  -	      lda	INPT0,y
    586  40b0				  -	      bpl	noreadpaddle
    587  40b0				  -	      inc	paddle
    588  40b0				  -	      jmp	continuekernel2
    589  40b0				  -noreadpaddle
    590  40b0				  -	      sleep	2
    591  40b0				  -	      jmp	continuekernel
    592  40b0				  -	      else
    593  40b0				  -	      ifnconst	playercolors
    594  40b0				  -	      ifconst	PFcolors
    595  40b0				  -	      txa
    596  40b0				  -	      tay
    597  40b0				  -	      lda	(pfcolortable),y
    598  40b0				  -	      ifnconst	backgroundchange
    599  40b0				  -	      sta	COLUPF
    600  40b0				  -	      else
    601  40b0				  -	      sta	COLUBK
    602  40b0				  -	      endif
    603  40b0				  -	      jmp	continuekernel
    604  40b0				  -	      else
    605  40b0				  -	      ifconst	kernelmacrodef
    606  40b0				  -	      kernelmacro
    607  40b0				  -	      else
    608  40b0				  -	      sleep	12
    609  40b0				  -	      endif
    610  40b0				  -	      endif
    611  40b0				  -	      else
    612  40b0				  -	      lda	(player0color),y
    613  40b0				  -	      sta	player0colorstore
    614  40b0				  -	      sleep	4
    615  40b0				  -	      endif
    616  40b0				  -	      jmp	continuekernel
    617  40b0				  -	      endif
    618  40b0				  -altkernel2
    619  40b0				  -	      txa
    620  40b0				  -	      ifnconst	vertical_reflect
    621  40b0				  -	      sbx	#256-pfwidth
    622  40b0				  -	      else
    623  40b0				  -	      sbx	#256-pfwidth/2
    624  40b0				  -	      endif
    625  40b0				  -	      bmi	lastkernelline
    626  40b0				  -	      ifconst	pfrowheight
    627  40b0				  -	      lda	#pfrowheight
    628  40b0				  -	      else
    629  40b0				  -	      ifnconst	pfres
    630  40b0				  -	      lda	#8
    631  40b0				  -	      else
    632  40b0				  -	      lda	#(96/pfres)	; try to come close to the real size
    633  40b0				  -	      endif
    634  40b0				  -	      endif
    635  40b0				  -	      sta	temp1
    636  40b0				  -	      jmp	continuekernel
    637  40b0					      endif
    638  40b0
    639  40b0				   altkernel
    640  40b0
    641  40b0				  -	      ifconst	PFmaskvalue
    642  40b0				  -	      lda	#PFmaskvalue
    643  40b0					      else
    644  40b0		       a9 00		      lda	#0
    645  40b2					      endif
    646  40b2		       85 0e		      sta	PF1L
    647  40b4		       85 0f		      sta	PF2
    648  40b6
    649  40b6
    650  40b6							;sleep 3
    651  40b6
    652  40b6							;28 cycles to fix things
    653  40b6							;minus 11=17
    654  40b6
    655  40b6							; lax temp4
    656  40b6							; clc
    657  40b6		       8a		      txa
    658  40b7					      ifnconst	vertical_reflect
    659  40b7		       cb fc		      sbx	#256-pfwidth
    660  40b9				  -	      else
    661  40b9				  -	      sbx	#256-pfwidth/2
    662  40b9					      endif
    663  40b9
    664  40b9		       30 12		      bmi	lastkernelline
    665  40bb
    666  40bb				  -	      ifconst	PFcolorandheight
    667  40bb				  -	      ifconst	pfres
    668  40bb				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    669  40bb				  -	      else
    670  40bb				  -	      ldy	playfieldcolorandheight-87,x
    671  40bb				  -	      endif
    672  40bb				  -	      ifnconst	backgroundchange
    673  40bb				  -	      sty	COLUPF
    674  40bb				  -	      else
    675  40bb				  -	      sty	COLUBK
    676  40bb				  -	      endif
    677  40bb				  -	      ifconst	pfres
    678  40bb				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    679  40bb				  -	      else
    680  40bb				  -	      lda	playfieldcolorandheight-88,x
    681  40bb				  -	      endif
    682  40bb				  -	      sta.w	temp1
    683  40bb					      endif
    684  40bb				  -	      ifconst	PFheights
    685  40bb				  -	      lsr
    686  40bb				  -	      lsr
    687  40bb				  -	      tay
    688  40bb				  -	      lda	(pfheighttable),y
    689  40bb				  -	      sta.w	temp1
    690  40bb					      endif
    691  40bb					      ifconst	PFcolors
    692  40bb		       a8		      tay
    693  40bc		       b1 f0		      lda	(pfcolortable),y
    694  40be				  -	      ifnconst	backgroundchange
    695  40be				  -	      sta	COLUPF
    696  40be					      else
    697  40be		       85 09		      sta	COLUBK
    698  40c0					      endif
    699  40c0				  -	      ifconst	pfrowheight
    700  40c0				  -	      lda	#pfrowheight
    701  40c0					      else
    702  40c0					      ifnconst	pfres
    703  40c0		       a9 08		      lda	#8
    704  40c2				  -	      else
    705  40c2				  -	      lda	#(96/pfres)	; try to come close to the real size
    706  40c2					      endif
    707  40c2					      endif
    708  40c2		       85 9c		      sta	temp1
    709  40c4					      endif
    710  40c4					      ifnconst	PFcolorandheight
    711  40c4				  -	      ifnconst	PFcolors
    712  40c4				  -	      ifnconst	PFheights
    713  40c4				  -	      ifnconst	no_blank_lines
    714  40c4				  -			; read paddle 0
    715  40c4				  -			; lo-res paddle read
    716  40c4				  -			; bit INPT0
    717  40c4				  -			; bmi paddleskipread
    718  40c4				  -			; inc paddle0
    719  40c4				  -			;donepaddleskip
    720  40c4				  -	      sleep	10
    721  40c4				  -	      ifconst	pfrowheight
    722  40c4				  -	      lda	#pfrowheight
    723  40c4				  -	      else
    724  40c4				  -	      ifnconst	pfres
    725  40c4				  -	      lda	#8
    726  40c4				  -	      else
    727  40c4				  -	      lda	#(96/pfres)	; try to come close to the real size
    728  40c4				  -	      endif
    729  40c4				  -	      endif
    730  40c4				  -	      sta	temp1
    731  40c4				  -	      endif
    732  40c4				  -	      endif
    733  40c4					      endif
    734  40c4					      endif
    735  40c4
    736  40c4
    737  40c4		       a5 92		      lda	ballheight
    738  40c6		       c7 89		      dcp	bally
    739  40c8		       e5 9f		      sbc	temp4
    740  40ca
    741  40ca
    742  40ca		       4c 72 f0 	      jmp	goback
    743  40cd
    744  40cd
    745  40cd					      ifnconst	no_blank_lines
    746  40cd				   lastkernelline
    747  40cd				  -	      ifnconst	PFcolors
    748  40cd				  -	      sleep	10
    749  40cd					      else
    750  40cd		       a0 7c		      ldy	#124
    751  40cf		       b1 f0		      lda	(pfcolortable),y
    752  40d1		       85 08		      sta	COLUPF
    753  40d3					      endif
    754  40d3
    755  40d3				  -	      ifconst	PFheights
    756  40d3				  -	      ldx	#1
    757  40d3				  -			;sleep 4
    758  40d3				  -	      sleep	3	; this was over 1 cycle
    759  40d3					      else
    760  40d3		       a6 ef		      ldx	playfieldpos
    761  40d5							;sleep 3
      0  40d5					      sleep	2	; this was over 1 cycle
      1  40d5				   .CYCLES    SET	2
      2  40d5
      3  40d5				  -	      IF	.CYCLES < 2
      4  40d5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40d5				  -	      ERR
      6  40d5					      ENDIF
      7  40d5
      8  40d5				  -	      IF	.CYCLES & 1
      9  40d5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40d5				  -	      nop	0
     11  40d5				  -	      ELSE
     12  40d5				  -	      bit	VSYNC
     13  40d5				  -	      ENDIF
     14  40d5				  -.CYCLES    SET	.CYCLES - 3
     15  40d5					      ENDIF
     16  40d5
     17  40d5					      REPEAT	.CYCLES / 2
     18  40d5		       ea		      nop
     19  40d6					      REPEND
    763  40d6					      endif
    764  40d6
    765  40d6		       4c 1b f1 	      jmp	enterlastkernel
    766  40d9
    767  40d9				  -	      else
    768  40d9				  -lastkernelline
    769  40d9				  -
    770  40d9				  -	      ifconst	PFheights
    771  40d9				  -	      ldx	#1
    772  40d9				  -			;sleep 5
    773  40d9				  -	      sleep	4	; this was over 1 cycle
    774  40d9				  -	      else
    775  40d9				  -	      ldx	playfieldpos
    776  40d9				  -			;sleep 4
    777  40d9				  -	      sleep	3	; this was over 1 cycle
    778  40d9				  -	      endif
    779  40d9				  -
    780  40d9				  -	      cpx	#0
    781  40d9				  -	      bne	.enterfromNBL
    782  40d9				  -	      jmp	no_blank_lines_bailout
    783  40d9					      endif
    784  40d9
    785  40d9					      if	((<*)>$d5)
    786  4100		       00 00 00 00*	      align	256
    787  4100					      endif
    788  4100							; this is a kludge to prevent page wrapping - fix!!!
    789  4100
    790  4100				   .skipDrawlastP1
    791  4100		       a9 00		      lda	#0
    792  4102		       a8		      tay		; added so we don't cross a page
    793  4103		       4c 2d f1 	      jmp	.continuelastP1
    794  4106
    795  4106				   .endkerloop		; enter at cycle 59??
    796  4106
    797  4106		       ea		      nop
    798  4107
    799  4107				   .enterfromNBL
    800  4107				  -	      ifconst	pfres
    801  4107				  -	      ldy.w	playfield+pfres*pfwidth-4
    802  4107				  -	      sty	PF1L	;3
    803  4107				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    804  4107				  -	      sty	PF2L	;3
    805  4107				  -	      ldy.w	playfield+pfres*pfwidth-1
    806  4107				  -	      sty	PF1R	; possibly too early?
    807  4107				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    808  4107				  -	      sty	PF2R	;3
    809  4107					      else
    810  4107		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    811  410a		       84 0e		      sty	PF1L	;3
    812  410c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    813  410f		       84 0f		      sty	PF2L	;3
    814  4111		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    815  4114		       84 0e		      sty	PF1R	; possibly too early?
    816  4116		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    817  4119		       84 0f		      sty	PF2R	;3
    818  411b					      endif
    819  411b
    820  411b				   enterlastkernel
    821  411b		       a5 92		      lda	ballheight
    822  411d
    823  411d							; tya
    824  411d		       c7 89		      dcp	bally
    825  411f							; sleep 4
    826  411f
    827  411f							; sbc stack3
    828  411f		       2a		      rol
    829  4120		       2a		      rol
    830  4121		       85 1f		      sta	ENABL
    831  4123
    832  4123		       a5 8f		      lda	player1height	;3
    833  4125		       c7 86		      dcp	player1y	;5
    834  4127		       90 d7		      bcc	.skipDrawlastP1
    835  4129		       a4 86		      ldy	player1y	;3
    836  412b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    837  412d							; so it doesn't cross a page boundary!
    838  412d
    839  412d				   .continuelastP1
    840  412d		       85 1c		      sta	GRP1	;3
    841  412f
    842  412f				  -	      ifnconst	player1colors
    843  412f				  -	      lda	missile1height	;3
    844  412f				  -	      dcp	missile1y	;5
    845  412f					      else
    846  412f		       b1 87		      lda	(player1color),y
    847  4131		       85 07		      sta	COLUP1
    848  4133					      endif
    849  4133
    850  4133		       ca		      dex
    851  4134							;dec temp4 ; might try putting this above PF writes
    852  4134		       f0 37		      beq	endkernel
    853  4136
    854  4136
    855  4136				  -	      ifconst	pfres
    856  4136				  -	      ldy.w	playfield+pfres*pfwidth-4
    857  4136				  -	      sty	PF1L	;3
    858  4136				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    859  4136				  -	      sty	PF2L	;3
    860  4136				  -	      ldy.w	playfield+pfres*pfwidth-1
    861  4136				  -	      sty	PF1R	; possibly too early?
    862  4136				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    863  4136				  -	      sty	PF2R	;3
    864  4136					      else
    865  4136		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    866  4139		       84 0e		      sty	PF1L	;3
    867  413b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    868  413e		       84 0f		      sty	PF2L	;3
    869  4140		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    870  4143		       84 0e		      sty	PF1R	; possibly too early?
    871  4145		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    872  4148		       84 0f		      sty	PF2R	;3
    873  414a					      endif
    874  414a
    875  414a				  -	      ifnconst	player1colors
    876  414a				  -	      rol		;2
    877  414a				  -	      rol		;2
    878  414a				  -	      sta	ENAM1	;3
    879  414a					      else
    880  414a				  -	      ifnconst	playercolors
    881  414a				  -	      sleep	7
    882  414a					      else
    883  414a		       ad 82 00 	      lda.w	player0colorstore
    884  414d		       85 06		      sta	COLUP0
    885  414f					      endif
    886  414f					      endif
    887  414f
    888  414f		       ad 8e 00 	      lda.w	player0height
    889  4152		       c7 85		      dcp	player0y
    890  4154		       90 11		      bcc	.skipDrawlastP0
    891  4156		       a4 85		      ldy	player0y
    892  4158		       b1 8a		      lda	(player0pointer),y
    893  415a				   .continuelastP0
    894  415a		       85 1b		      sta	GRP0
    895  415c
    896  415c
    897  415c
    898  415c					      ifnconst	no_blank_lines
    899  415c		       a5 90		      lda	missile0height	;3
    900  415e		       c7 91		      dcp	missile0y	;5
    901  4160		       e5 f6		      sbc	stack1
    902  4162		       85 1d		      sta	ENAM0	;3
    903  4164		       4c 06 f1 	      jmp	.endkerloop
    904  4167				  -	      else
    905  4167				  -	      ifconst	readpaddle
    906  4167				  -	      ldy	currentpaddle
    907  4167				  -	      lda	INPT0,y
    908  4167				  -	      bpl	noreadpaddle2
    909  4167				  -	      inc	paddle
    910  4167				  -	      jmp	.endkerloop
    911  4167				  -noreadpaddle2
    912  4167				  -	      sleep	4
    913  4167				  -	      jmp	.endkerloop
    914  4167				  -	      else		; no_blank_lines and no paddle reading
    915  4167				  -	      pla
    916  4167				  -	      pha		; 14 cycles in 4 bytes
    917  4167				  -	      pla
    918  4167				  -	      pha
    919  4167				  -			; sleep 14
    920  4167				  -	      jmp	.endkerloop
    921  4167				  -	      endif
    922  4167					      endif
    923  4167
    924  4167
    925  4167							; ifconst donepaddleskip
    926  4167							;paddleskipread
    927  4167							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    928  4167							; plus we get a lo-res paddle read
    929  4167							; bmi donepaddleskip
    930  4167							; endif
    931  4167
    932  4167				   .skipDrawlastP0
    933  4167		       a9 00		      lda	#0
    934  4169		       a8		      tay
    935  416a		       4c 5a f1 	      jmp	.continuelastP0
    936  416d
    937  416d				  -	      ifconst	no_blank_lines
    938  416d				  -no_blank_lines_bailout
    939  416d				  -	      ldx	#0
    940  416d					      endif
    941  416d
    942  416d				   endkernel
    943  416d							; 6 digit score routine
    944  416d		       86 0e		      stx	PF1
    945  416f		       86 0f		      stx	PF2
    946  4171		       86 0d		      stx	PF0
    947  4173		       18		      clc
    948  4174
    949  4174				  -	      ifconst	pfrowheight
    950  4174				  -	      lda	#pfrowheight+2
    951  4174					      else
    952  4174					      ifnconst	pfres
    953  4174		       a9 0a		      lda	#10
    954  4176				  -	      else
    955  4176				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    956  4176					      endif
    957  4176					      endif
    958  4176
    959  4176		       e5 ef		      sbc	playfieldpos
    960  4178		       85 ef		      sta	playfieldpos
    961  417a		       8a		      txa
    962  417b
    963  417b				  -	      ifconst	shakescreen
    964  417b				  -	      bit	shakescreen
    965  417b				  -	      bmi	noshakescreen2
    966  417b				  -	      ldx	#$3D
    967  417b				  -noshakescreen2
    968  417b					      endif
    969  417b
    970  417b		       95 02		      sta	WSYNC,x
    971  417d
    972  417d							; STA WSYNC ;first one, need one more
    973  417d		       85 0b		      sta	REFP0
    974  417f		       85 0c		      sta	REFP1
    975  4181		       85 1b		      STA	GRP0
    976  4183		       85 1c		      STA	GRP1
    977  4185							; STA PF1
    978  4185							; STA PF2
    979  4185		       85 2b		      sta	HMCLR
    980  4187		       85 1d		      sta	ENAM0
    981  4189		       85 1e		      sta	ENAM1
    982  418b		       85 1f		      sta	ENABL
    983  418d
    984  418d		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    985  418f		       85 85		      sta	player0y
    986  4191		       a5 9e		      lda	temp3
    987  4193		       85 86		      sta	player1y
    988  4195				  -	      ifnconst	player1colors
    989  4195				  -	      lda	temp6
    990  4195				  -	      sta	missile1y
    991  4195					      endif
    992  4195				  -	      ifnconst	playercolors
    993  4195				  -	      ifnconst	readpaddle
    994  4195				  -	      lda	temp5
    995  4195				  -	      sta	missile0y
    996  4195				  -	      endif
    997  4195					      endif
    998  4195		       a5 f7		      lda	stack2
    999  4197		       85 89		      sta	bally
   1000  4199
   1001  4199							; strangely, this isn't required any more. might have
   1002  4199							; resulted from the no_blank_lines score bounce fix
   1003  4199							;ifconst no_blank_lines
   1004  4199							;sta WSYNC
   1005  4199							;endif
   1006  4199
   1007  4199		       ad 84 02 	      lda	INTIM
   1008  419c		       18		      clc
   1009  419d				  -	      ifnconst	vblank_time
   1010  419d				  -	      adc	#43+12+87
   1011  419d					      else
   1012  419d		       69 8e		      adc	#vblank_time+12+87
   1013  419f
   1014  419f					      endif
   1015  419f							; sta WSYNC
   1016  419f		       8d 96 02 	      sta	TIM64T
   1017  41a2
   1018  41a2				  -	      ifconst	minikernel
   1019  41a2				  -	      jsr	minikernel
   1020  41a2					      endif
   1021  41a2
   1022  41a2							; now reassign temp vars for score pointers
   1023  41a2
   1024  41a2							; score pointers contain:
   1025  41a2							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   1026  41a2							; swap lo2->temp1
   1027  41a2							; swap lo4->temp3
   1028  41a2							; swap lo6->temp5
   1029  41a2					      ifnconst	noscore
   1030  41a2		       a5 97		      lda	scorepointers+1
   1031  41a4							; ldy temp1
   1032  41a4		       85 9c		      sta	temp1
   1033  41a6							; sty scorepointers+1
   1034  41a6
   1035  41a6		       a5 99		      lda	scorepointers+3
   1036  41a8							; ldy temp3
   1037  41a8		       85 9e		      sta	temp3
   1038  41aa							; sty scorepointers+3
   1039  41aa
   1040  41aa
   1041  41aa		       85 2b		      sta	HMCLR
   1042  41ac		       ba		      tsx
   1043  41ad		       86 f6		      stx	stack1
   1044  41af		       a2 e0		      ldx	#$E0
   1045  41b1		       86 20		      stx	HMP0
   1046  41b3
   1047  41b3		       a5 a3		      LDA	scorecolor
   1048  41b5		       85 06		      STA	COLUP0
   1049  41b7		       85 07		      STA	COLUP1
   1050  41b9				  -	      ifconst	scorefade
   1051  41b9				  -	      STA	stack2
   1052  41b9					      endif
   1053  41b9				  -	      ifconst	pfscore
   1054  41b9				  -	      lda	pfscorecolor
   1055  41b9				  -	      sta	COLUPF
   1056  41b9					      endif
   1057  41b9		       85 02		      sta	WSYNC
   1058  41bb		       a2 00		      ldx	#0
   1059  41bd		       86 1b		      STx	GRP0
   1060  41bf		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1061  41c1
   1062  41c1		       a5 9b		      lda	scorepointers+5
   1063  41c3							; ldy temp5
   1064  41c3		       95 a0		      sta	temp5,x
   1065  41c5							; sty scorepointers+5
   1066  41c5		       a9 ff		      lda	#>scoretable
   1067  41c7		       85 97		      sta	scorepointers+1
   1068  41c9		       85 99		      sta	scorepointers+3
   1069  41cb		       85 9b		      sta	scorepointers+5
   1070  41cd		       85 9d		      sta	temp2
   1071  41cf		       85 9f		      sta	temp4
   1072  41d1		       85 a1		      sta	temp6
   1073  41d3		       a0 07		      LDY	#7
   1074  41d5		       84 25		      STY	VDELP0
   1075  41d7		       85 10		      STA	RESP0
   1076  41d9		       85 11		      STA	RESP1
   1077  41db
   1078  41db
   1079  41db		       a9 03		      LDA	#$03
   1080  41dd		       85 04		      STA	NUSIZ0
   1081  41df		       85 05		      STA	NUSIZ1
   1082  41e1		       85 26		      STA	VDELP1
   1083  41e3		       a9 f0		      LDA	#$F0
   1084  41e5		       85 21		      STA	HMP1
   1085  41e7		       b1 96		      lda	(scorepointers),y
   1086  41e9		       85 1b		      sta	GRP0
   1087  41eb		       85 2a		      STA	HMOVE	; cycle 73 ?
   1088  41ed		       4c 08 f2 	      jmp	beginscore
   1089  41f0
   1090  41f0
   1091  41f0					      if	((<*)>$d4)
   1092  4200		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   1093  4200					      endif
   1094  4200
   1095  4200				   loop2
   1096  4200		       b1 96		      lda	(scorepointers),y	;+5 68 204
   1097  4202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   1098  4204				  -	      ifconst	pfscore
   1099  4204				  -	      lda.w	pfscore1
   1100  4204				  -	      sta	PF1
   1101  4204					      else
   1102  4204				  -	      ifconst	scorefade
   1103  4204				  -	      sleep	2
   1104  4204				  -	      dec	stack2	; decrement the temporary scorecolor
   1105  4204					      else
      0  4204					      sleep	7
      1  4204				   .CYCLES    SET	7
      2  4204
      3  4204				  -	      IF	.CYCLES < 2
      4  4204				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4204				  -	      ERR
      6  4204					      ENDIF
      7  4204
      8  4204					      IF	.CYCLES & 1
      9  4204					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4204		       04 00		      nop	0
     11  4206				  -	      ELSE
     12  4206				  -	      bit	VSYNC
     13  4206					      ENDIF
     14  4206				   .CYCLES    SET	.CYCLES - 3
     15  4206					      ENDIF
     16  4206
     17  4206					      REPEAT	.CYCLES / 2
     18  4206		       ea		      nop
     17  4206					      REPEND
     18  4207		       ea		      nop
     19  4208					      REPEND
   1107  4208					      endif
   1108  4208					      endif
   1109  4208							; cycle 0
   1110  4208				   beginscore
   1111  4208		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   1112  420a		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   1113  420c		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   1114  420e		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   1115  4210		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   1116  4212		       9a		      txs
   1117  4213		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   1118  4215				  -	      ifconst	scorefade
   1119  4215				  -	      lda	stack2
   1120  4215					      else
      0  4215					      sleep	3
      1  4215				   .CYCLES    SET	3
      2  4215
      3  4215				  -	      IF	.CYCLES < 2
      4  4215				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4215				  -	      ERR
      6  4215					      ENDIF
      7  4215
      8  4215					      IF	.CYCLES & 1
      9  4215					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4215		       04 00		      nop	0
     11  4217				  -	      ELSE
     12  4217				  -	      bit	VSYNC
     13  4217					      ENDIF
     14  4217				   .CYCLES    SET	.CYCLES - 3
     15  4217					      ENDIF
     16  4217
     17  4217				  -	      REPEAT	.CYCLES / 2
     18  4217				  -	      nop
     19  4217					      REPEND
   1122  4217					      endif
   1123  4217
   1124  4217				  -	      ifconst	pfscore
   1125  4217				  -	      lda	pfscore2
   1126  4217				  -	      sta	PF1
   1127  4217					      else
   1128  4217				  -	      ifconst	scorefade
   1129  4217				  -	      sta	COLUP0
   1130  4217				  -	      sta	COLUP1
   1131  4217					      else
      0  4217					      sleep	6
      1  4217				   .CYCLES    SET	6
      2  4217
      3  4217				  -	      IF	.CYCLES < 2
      4  4217				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4217				  -	      ERR
      6  4217					      ENDIF
      7  4217
      8  4217				  -	      IF	.CYCLES & 1
      9  4217				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  4217				  -	      nop	0
     11  4217				  -	      ELSE
     12  4217				  -	      bit	VSYNC
     13  4217				  -	      ENDIF
     14  4217				  -.CYCLES    SET	.CYCLES - 3
     15  4217					      ENDIF
     16  4217
     17  4217					      REPEAT	.CYCLES / 2
     18  4217		       ea		      nop
     17  4217					      REPEND
     18  4218		       ea		      nop
     17  4218					      REPEND
     18  4219		       ea		      nop
     19  421a					      REPEND
   1133  421a					      endif
   1134  421a					      endif
   1135  421a
   1136  421a		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   1137  421c		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   1138  421e		       ba		      tsx
   1139  421f		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   1140  4221		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   1141  4223		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   1142  4225		       88		      dey
   1143  4226		       10 d8		      bpl	loop2	;+2 60 180
   1144  4228
   1145  4228		       a6 f6		      ldx	stack1
   1146  422a		       9a		      txs
   1147  422b							; lda scorepointers+1
   1148  422b		       a4 9c		      ldy	temp1
   1149  422d							; sta temp1
   1150  422d		       84 97		      sty	scorepointers+1
   1151  422f
   1152  422f		       a9 00		      LDA	#0
   1153  4231		       85 0e		      sta	PF1
   1154  4233		       85 1b		      STA	GRP0
   1155  4235		       85 1c		      STA	GRP1
   1156  4237		       85 25		      STA	VDELP0
   1157  4239		       85 26		      STA	VDELP1	;do we need these
   1158  423b		       85 04		      STA	NUSIZ0
   1159  423d		       85 05		      STA	NUSIZ1
   1160  423f
   1161  423f							; lda scorepointers+3
   1162  423f		       a4 9e		      ldy	temp3
   1163  4241							; sta temp3
   1164  4241		       84 99		      sty	scorepointers+3
   1165  4243
   1166  4243							; lda scorepointers+5
   1167  4243		       a4 a0		      ldy	temp5
   1168  4245							; sta temp5
   1169  4245		       84 9b		      sty	scorepointers+5
   1170  4247					      endif		;noscore
   1171  4247				  -	      ifconst	readpaddle
   1172  4247				  -	      lda	#%11000010
   1173  4247					      else
   1174  4247				  -	      ifconst	qtcontroller
   1175  4247				  -	      lda	qtcontroller
   1176  4247				  -	      lsr		; bit 0 in carry
   1177  4247				  -	      lda	#4
   1178  4247				  -	      ror		; carry into top of A
   1179  4247					      else
   1180  4247		       a9 02		      lda	#2
   1181  4249					      endif		; qtcontroller
   1182  4249					      endif		; readpaddle
   1183  4249		       85 02		      sta	WSYNC
   1184  424b		       85 01		      sta	VBLANK
      0  424d					      RETURN
      1  424d				  -	      ifnconst	bankswitch
      2  424d				  -	      rts
      3  424d					      else
      4  424d		       4c dd ff 	      jmp	BS_return
      5  4250					      endif
   1186  4250				  -	      ifconst	shakescreen
   1187  4250				  -doshakescreen
   1188  4250				  -	      bit	shakescreen
   1189  4250				  -	      bmi	noshakescreen
   1190  4250				  -	      sta	WSYNC
   1191  4250				  -noshakescreen
   1192  4250				  -	      ldx	missile0height
   1193  4250				  -	      inx
   1194  4250				  -	      rts
   1195  4250					      endif
   1196  4250
   1197  4250							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1198  4250
   1199  4250				   start
   1200  4250		       78		      sei
   1201  4251		       d8		      cld
   1202  4252		       a0 00		      ldy	#0
   1203  4254		       a5 d0		      lda	$D0
   1204  4256		       c9 2c		      cmp	#$2C	;check RAM location #1
   1205  4258		       d0 07		      bne	MachineIs2600
   1206  425a		       a5 d1		      lda	$D1
   1207  425c		       c9 a9		      cmp	#$A9	;check RAM location #2
   1208  425e		       d0 01		      bne	MachineIs2600
   1209  4260		       88		      dey
   1210  4261				   MachineIs2600
   1211  4261		       a2 00		      ldx	#0
   1212  4263		       8a		      txa
   1213  4264				   clearmem
   1214  4264		       e8		      inx
   1215  4265		       9a		      txs
   1216  4266		       48		      pha
   1217  4267		       d0 fb		      bne	clearmem
   1218  4269		       84 9c		      sty	temp1
   1219  426b					      ifnconst	multisprite
   1220  426b				  -	      ifconst	pfrowheight
   1221  426b				  -	      lda	#pfrowheight
   1222  426b					      else
   1223  426b				  -	      ifconst	pfres
   1224  426b				  -	      lda	#(96/pfres)
   1225  426b					      else
   1226  426b		       a9 08		      lda	#8
   1227  426d					      endif
   1228  426d					      endif
   1229  426d		       85 ef		      sta	playfieldpos
   1230  426f					      endif
   1231  426f		       a2 05		      ldx	#5
   1232  4271				   initscore
   1233  4271		       a9 74		      lda	#<scoretable
   1234  4273		       95 96		      sta	scorepointers,x
   1235  4275		       ca		      dex
   1236  4276		       10 f9		      bpl	initscore
   1237  4278		       a9 01		      lda	#1
   1238  427a		       85 0a		      sta	CTRLPF
   1239  427c		       0d 84 02 	      ora	INTIM
   1240  427f		       85 a2		      sta	rand
   1241  4281
   1242  4281				  -	      ifconst	multisprite
   1243  4281				  -	      jsr	multisprite_setup
   1244  4281					      endif
   1245  4281
   1246  4281				  -	      ifnconst	bankswitch
   1247  4281				  -	      jmp	game
   1248  4281					      else
   1249  4281		       a9 8f		      lda	#>(game-1)
   1250  4283		       48		      pha
   1251  4284		       a9 ff		      lda	#<(game-1)
   1252  4286		       48		      pha
   1253  4287		       48		      pha
   1254  4288		       48		      pha
   1255  4289		       a2 01		      ldx	#1
   1256  428b		       4c eb ff 	      jmp	BS_jsr
   1257  428e					      endif
   1258  428e							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1259  428e
   1260  428e							; playfield drawing routines
   1261  428e							; you get a 32x12 bitmapped display in a single color :)
   1262  428e							; 0-31 and 0-11
   1263  428e
   1264  428e				   pfclear		; clears playfield - or fill with pattern
   1265  428e				  -	      ifconst	pfres
   1266  428e				  -	      ldx	#pfres*pfwidth-1
   1267  428e					      else
   1268  428e		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
   1269  4290					      endif
   1270  4290				   pfclear_loop
   1271  4290					      ifnconst	superchip
   1272  4290		       95 a4		      sta	playfield,x
   1273  4292				  -	      else
   1274  4292				  -	      sta	playfield-128,x
   1275  4292					      endif
   1276  4292		       ca		      dex
   1277  4293		       10 fb		      bpl	pfclear_loop
      0  4295					      RETURN
      1  4295				  -	      ifnconst	bankswitch
      2  4295				  -	      rts
      3  4295					      else
      4  4295		       4c dd ff 	      jmp	BS_return
      5  4298					      endif
   1279  4298
   1280  4298				   setuppointers
   1281  4298		       86 9d		      stx	temp2	; store on.off.flip value
   1282  429a		       aa		      tax		; put x-value in x 
   1283  429b		       4a		      lsr
   1284  429c		       4a		      lsr
   1285  429d		       4a		      lsr		; divide x pos by 8 
   1286  429e		       85 9c		      sta	temp1
   1287  42a0		       98		      tya
   1288  42a1		       0a		      asl
   1289  42a2					      if	pfwidth=4
   1290  42a2		       0a		      asl		; multiply y pos by 4
   1291  42a3					      endif		; else multiply by 2
   1292  42a3		       18		      clc
   1293  42a4		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   1294  42a6		       a8		      tay		; put the value in y
   1295  42a7		       a5 9d		      lda	temp2	; restore on.off.flip value
   1296  42a9		       60		      rts
   1297  42aa
   1298  42aa				   pfread
   1299  42aa							;x=xvalue, y=yvalue
   1300  42aa		       20 98 f2 	      jsr	setuppointers
   1301  42ad		       bd 42 f3 	      lda	setbyte,x
   1302  42b0		       39 a4 00 	      and	playfield,y
   1303  42b3		       5d 42 f3 	      eor	setbyte,x
   1304  42b6							; beq readzero
   1305  42b6							; lda #1
   1306  42b6							; readzero
      0  42b6					      RETURN
      1  42b6				  -	      ifnconst	bankswitch
      2  42b6				  -	      rts
      3  42b6					      else
      4  42b6		       4c dd ff 	      jmp	BS_return
      5  42b9					      endif
   1308  42b9
   1309  42b9				   pfpixel
   1310  42b9							;x=xvalue, y=yvalue, a=0,1,2
   1311  42b9		       20 98 f2 	      jsr	setuppointers
   1312  42bc
   1313  42bc					      ifconst	bankswitch
   1314  42bc		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1315  42be		       f0 0f		      beq	pixelon_r	; if "on" go to on
   1316  42c0		       4a		      lsr
   1317  42c1		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   1318  42c3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1319  42c6		       5d 42 f3 	      eor	setbyte,x
   1320  42c9				  -	      ifconst	superchip
   1321  42c9				  -	      sta	playfield-128,y
   1322  42c9					      else
   1323  42c9		       99 a4 00 	      sta	playfield,y
   1324  42cc					      endif
      0  42cc					      RETURN
      1  42cc				  -	      ifnconst	bankswitch
      2  42cc				  -	      rts
      3  42cc					      else
      4  42cc		       4c dd ff 	      jmp	BS_return
      5  42cf					      endif
   1326  42cf				   pixelon_r
   1327  42cf		       b9 a4 00 	      lda	playfield,y
   1328  42d2		       1d 42 f3 	      ora	setbyte,x
   1329  42d5				  -	      ifconst	superchip
   1330  42d5				  -	      sta	playfield-128,y
   1331  42d5					      else
   1332  42d5		       99 a4 00 	      sta	playfield,y
   1333  42d8					      endif
      0  42d8					      RETURN
      1  42d8				  -	      ifnconst	bankswitch
      2  42d8				  -	      rts
      3  42d8					      else
      4  42d8		       4c dd ff 	      jmp	BS_return
      5  42db					      endif
   1335  42db				   pixeloff_r
   1336  42db		       bd 42 f3 	      lda	setbyte,x
   1337  42de		       49 ff		      eor	#$ff
   1338  42e0		       39 a4 00 	      and	playfield,y
   1339  42e3				  -	      ifconst	superchip
   1340  42e3				  -	      sta	playfield-128,y
   1341  42e3					      else
   1342  42e3		       99 a4 00 	      sta	playfield,y
   1343  42e6					      endif
      0  42e6					      RETURN
      1  42e6				  -	      ifnconst	bankswitch
      2  42e6				  -	      rts
      3  42e6					      else
      4  42e6		       4c dd ff 	      jmp	BS_return
      5  42e9					      endif
   1345  42e9
   1346  42e9				  -	      else
   1347  42e9				  -	      jmp	plotpoint
   1348  42e9					      endif
   1349  42e9
   1350  42e9				   pfhline
   1351  42e9							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1352  42e9		       20 98 f2 	      jsr	setuppointers
   1353  42ec		       4c f6 f2 	      jmp	noinc
   1354  42ef				   keepgoing
   1355  42ef		       e8		      inx
   1356  42f0		       8a		      txa
   1357  42f1		       29 07		      and	#7
   1358  42f3		       d0 01		      bne	noinc
   1359  42f5		       c8		      iny
   1360  42f6				   noinc
   1361  42f6		       20 1b f3 	      jsr	plotpoint
   1362  42f9		       e4 9e		      cpx	temp3
   1363  42fb		       30 f2		      bmi	keepgoing
      0  42fd					      RETURN
      1  42fd				  -	      ifnconst	bankswitch
      2  42fd				  -	      rts
      3  42fd					      else
      4  42fd		       4c dd ff 	      jmp	BS_return
      5  4300					      endif
   1365  4300
   1366  4300				   pfvline
   1367  4300							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1368  4300		       20 98 f2 	      jsr	setuppointers
   1369  4303		       84 9c		      sty	temp1	; store memory location offset
   1370  4305		       e6 9e		      inc	temp3	; increase final x by 1 
   1371  4307		       a5 9e		      lda	temp3
   1372  4309		       0a		      asl
   1373  430a					      if	pfwidth=4
   1374  430a		       0a		      asl		; multiply by 4
   1375  430b					      endif		; else multiply by 2
   1376  430b		       85 9e		      sta	temp3	; store it
   1377  430d							; Thanks to Michael Rideout for fixing a bug in this code
   1378  430d							; right now, temp1=y=starting memory location, temp3=final
   1379  430d							; x should equal original x value
   1380  430d				   keepgoingy
   1381  430d		       20 1b f3 	      jsr	plotpoint
   1382  4310		       c8		      iny
   1383  4311		       c8		      iny
   1384  4312					      if	pfwidth=4
   1385  4312		       c8		      iny
   1386  4313		       c8		      iny
   1387  4314					      endif
   1388  4314		       c4 9e		      cpy	temp3
   1389  4316		       30 f5		      bmi	keepgoingy
      0  4318					      RETURN
      1  4318				  -	      ifnconst	bankswitch
      2  4318				  -	      rts
      3  4318					      else
      4  4318		       4c dd ff 	      jmp	BS_return
      5  431b					      endif
   1391  431b
   1392  431b				   plotpoint
   1393  431b		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1394  431d		       f0 0d		      beq	pixelon	; if "on" go to on
   1395  431f		       4a		      lsr
   1396  4320		       b0 14		      bcs	pixeloff	; value is 1 if true
   1397  4322		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1398  4325		       5d 42 f3 	      eor	setbyte,x
   1399  4328				  -	      ifconst	superchip
   1400  4328				  -	      sta	playfield-128,y
   1401  4328					      else
   1402  4328		       99 a4 00 	      sta	playfield,y
   1403  432b					      endif
   1404  432b		       60		      rts
   1405  432c				   pixelon
   1406  432c		       b9 a4 00 	      lda	playfield,y
   1407  432f		       1d 42 f3 	      ora	setbyte,x
   1408  4332				  -	      ifconst	superchip
   1409  4332				  -	      sta	playfield-128,y
   1410  4332					      else
   1411  4332		       99 a4 00 	      sta	playfield,y
   1412  4335					      endif
   1413  4335		       60		      rts
   1414  4336				   pixeloff
   1415  4336		       bd 42 f3 	      lda	setbyte,x
   1416  4339		       49 ff		      eor	#$ff
   1417  433b		       39 a4 00 	      and	playfield,y
   1418  433e				  -	      ifconst	superchip
   1419  433e				  -	      sta	playfield-128,y
   1420  433e					      else
   1421  433e		       99 a4 00 	      sta	playfield,y
   1422  4341					      endif
   1423  4341		       60		      rts
   1424  4342
   1425  4342				   setbyte
   1426  4342					      ifnconst	pfcenter
   1427  4342		       80		      .byte.b	$80
   1428  4343		       40		      .byte.b	$40
   1429  4344		       20		      .byte.b	$20
   1430  4345		       10		      .byte.b	$10
   1431  4346		       08		      .byte.b	$08
   1432  4347		       04		      .byte.b	$04
   1433  4348		       02		      .byte.b	$02
   1434  4349		       01		      .byte.b	$01
   1435  434a					      endif
   1436  434a		       01		      .byte.b	$01
   1437  434b		       02		      .byte.b	$02
   1438  434c		       04		      .byte.b	$04
   1439  434d		       08		      .byte.b	$08
   1440  434e		       10		      .byte.b	$10
   1441  434f		       20		      .byte.b	$20
   1442  4350		       40		      .byte.b	$40
   1443  4351		       80		      .byte.b	$80
   1444  4352		       80		      .byte.b	$80
   1445  4353		       40		      .byte.b	$40
   1446  4354		       20		      .byte.b	$20
   1447  4355		       10		      .byte.b	$10
   1448  4356		       08		      .byte.b	$08
   1449  4357		       04		      .byte.b	$04
   1450  4358		       02		      .byte.b	$02
   1451  4359		       01		      .byte.b	$01
   1452  435a		       01		      .byte.b	$01
   1453  435b		       02		      .byte.b	$02
   1454  435c		       04		      .byte.b	$04
   1455  435d		       08		      .byte.b	$08
   1456  435e		       10		      .byte.b	$10
   1457  435f		       20		      .byte.b	$20
   1458  4360		       40		      .byte.b	$40
   1459  4361		       80		      .byte.b	$80
   1460  4362							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1461  4362
   1462  4362				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1463  4362		       d0 15		      bne	notleft
   1464  4364							;left
   1465  4364				  -	      ifconst	pfres
   1466  4364				  -	      ldx	#pfres*4
   1467  4364					      else
   1468  4364		       a2 30		      ldx	#48
   1469  4366					      endif
   1470  4366				   leftloop
   1471  4366		       b5 a3		      lda	playfield-1,x
   1472  4368		       4a		      lsr
   1473  4369
   1474  4369				  -	      ifconst	superchip
   1475  4369				  -	      lda	playfield-2,x
   1476  4369				  -	      rol
   1477  4369				  -	      sta	playfield-130,x
   1478  4369				  -	      lda	playfield-3,x
   1479  4369				  -	      ror
   1480  4369				  -	      sta	playfield-131,x
   1481  4369				  -	      lda	playfield-4,x
   1482  4369				  -	      rol
   1483  4369				  -	      sta	playfield-132,x
   1484  4369				  -	      lda	playfield-1,x
   1485  4369				  -	      ror
   1486  4369				  -	      sta	playfield-129,x
   1487  4369					      else
   1488  4369		       36 a2		      rol	playfield-2,x
   1489  436b		       76 a1		      ror	playfield-3,x
   1490  436d		       36 a0		      rol	playfield-4,x
   1491  436f		       76 a3		      ror	playfield-1,x
   1492  4371					      endif
   1493  4371
   1494  4371		       8a		      txa
   1495  4372		       cb 04		      sbx	#4
   1496  4374		       d0 f0		      bne	leftloop
      0  4376					      RETURN
      1  4376				  -	      ifnconst	bankswitch
      2  4376				  -	      rts
      3  4376					      else
      4  4376		       4c dd ff 	      jmp	BS_return
      5  4379					      endif
   1498  4379
   1499  4379				   notleft
   1500  4379		       4a		      lsr
   1501  437a		       90 15		      bcc	notright
   1502  437c							;right
   1503  437c
   1504  437c				  -	      ifconst	pfres
   1505  437c				  -	      ldx	#pfres*4
   1506  437c					      else
   1507  437c		       a2 30		      ldx	#48
   1508  437e					      endif
   1509  437e				   rightloop
   1510  437e		       b5 a0		      lda	playfield-4,x
   1511  4380		       4a		      lsr
   1512  4381				  -	      ifconst	superchip
   1513  4381				  -	      lda	playfield-3,x
   1514  4381				  -	      rol
   1515  4381				  -	      sta	playfield-131,x
   1516  4381				  -	      lda	playfield-2,x
   1517  4381				  -	      ror
   1518  4381				  -	      sta	playfield-130,x
   1519  4381				  -	      lda	playfield-1,x
   1520  4381				  -	      rol
   1521  4381				  -	      sta	playfield-129,x
   1522  4381				  -	      lda	playfield-4,x
   1523  4381				  -	      ror
   1524  4381				  -	      sta	playfield-132,x
   1525  4381					      else
   1526  4381		       36 a1		      rol	playfield-3,x
   1527  4383		       76 a2		      ror	playfield-2,x
   1528  4385		       36 a3		      rol	playfield-1,x
   1529  4387		       76 a0		      ror	playfield-4,x
   1530  4389					      endif
   1531  4389		       8a		      txa
   1532  438a		       cb 04		      sbx	#4
   1533  438c		       d0 f0		      bne	rightloop
      0  438e					      RETURN
      1  438e				  -	      ifnconst	bankswitch
      2  438e				  -	      rts
      3  438e					      else
      4  438e		       4c dd ff 	      jmp	BS_return
      5  4391					      endif
   1535  4391
   1536  4391				   notright
   1537  4391		       4a		      lsr
   1538  4392		       90 4b		      bcc	notup
   1539  4394							;up
   1540  4394		       4a		      lsr
   1541  4395		       90 02		      bcc	onedecup
   1542  4397		       c6 ef		      dec	playfieldpos
   1543  4399				   onedecup
   1544  4399		       c6 ef		      dec	playfieldpos
   1545  439b		       f0 02		      beq	shiftdown
   1546  439d		       10 3d		      bpl	noshiftdown2
   1547  439f				   shiftdown
   1548  439f				  -	      ifconst	pfrowheight
   1549  439f				  -	      lda	#pfrowheight
   1550  439f					      else
   1551  439f					      ifnconst	pfres
   1552  439f		       a9 08		      lda	#8
   1553  43a1				  -	      else
   1554  43a1				  -	      lda	#(96/pfres)	; try to come close to the real size
   1555  43a1					      endif
   1556  43a1					      endif
   1557  43a1
   1558  43a1		       85 ef		      sta	playfieldpos
   1559  43a3		       a5 a7		      lda	playfield+3
   1560  43a5		       85 9f		      sta	temp4
   1561  43a7		       a5 a6		      lda	playfield+2
   1562  43a9		       85 9e		      sta	temp3
   1563  43ab		       a5 a5		      lda	playfield+1
   1564  43ad		       85 9d		      sta	temp2
   1565  43af		       a5 a4		      lda	playfield
   1566  43b1		       85 9c		      sta	temp1
   1567  43b3		       a2 00		      ldx	#0
   1568  43b5				   up2
   1569  43b5		       b5 a8		      lda	playfield+4,x
   1570  43b7				  -	      ifconst	superchip
   1571  43b7				  -	      sta	playfield-128,x
   1572  43b7				  -	      lda	playfield+5,x
   1573  43b7				  -	      sta	playfield-127,x
   1574  43b7				  -	      lda	playfield+6,x
   1575  43b7				  -	      sta	playfield-126,x
   1576  43b7				  -	      lda	playfield+7,x
   1577  43b7				  -	      sta	playfield-125,x
   1578  43b7					      else
   1579  43b7		       95 a4		      sta	playfield,x
   1580  43b9		       b5 a9		      lda	playfield+5,x
   1581  43bb		       95 a5		      sta	playfield+1,x
   1582  43bd		       b5 aa		      lda	playfield+6,x
   1583  43bf		       95 a6		      sta	playfield+2,x
   1584  43c1		       b5 ab		      lda	playfield+7,x
   1585  43c3		       95 a7		      sta	playfield+3,x
   1586  43c5					      endif
   1587  43c5		       8a		      txa
   1588  43c6		       cb fc		      sbx	#252
   1589  43c8				  -	      ifconst	pfres
   1590  43c8				  -	      cpx	#(pfres-1)*4
   1591  43c8					      else
   1592  43c8		       e0 2c		      cpx	#44
   1593  43ca					      endif
   1594  43ca		       d0 e9		      bne	up2
   1595  43cc
   1596  43cc		       a5 9f		      lda	temp4
   1597  43ce
   1598  43ce				  -	      ifconst	superchip
   1599  43ce				  -	      ifconst	pfres
   1600  43ce				  -	      sta	playfield+pfres*4-129
   1601  43ce				  -	      lda	temp3
   1602  43ce				  -	      sta	playfield+pfres*4-130
   1603  43ce				  -	      lda	temp2
   1604  43ce				  -	      sta	playfield+pfres*4-131
   1605  43ce				  -	      lda	temp1
   1606  43ce				  -	      sta	playfield+pfres*4-132
   1607  43ce				  -	      else
   1608  43ce				  -	      sta	playfield+47-128
   1609  43ce				  -	      lda	temp3
   1610  43ce				  -	      sta	playfield+46-128
   1611  43ce				  -	      lda	temp2
   1612  43ce				  -	      sta	playfield+45-128
   1613  43ce				  -	      lda	temp1
   1614  43ce				  -	      sta	playfield+44-128
   1615  43ce				  -	      endif
   1616  43ce					      else
   1617  43ce				  -	      ifconst	pfres
   1618  43ce				  -	      sta	playfield+pfres*4-1
   1619  43ce				  -	      lda	temp3
   1620  43ce				  -	      sta	playfield+pfres*4-2
   1621  43ce				  -	      lda	temp2
   1622  43ce				  -	      sta	playfield+pfres*4-3
   1623  43ce				  -	      lda	temp1
   1624  43ce				  -	      sta	playfield+pfres*4-4
   1625  43ce					      else
   1626  43ce		       85 d3		      sta	playfield+47
   1627  43d0		       a5 9e		      lda	temp3
   1628  43d2		       85 d2		      sta	playfield+46
   1629  43d4		       a5 9d		      lda	temp2
   1630  43d6		       85 d1		      sta	playfield+45
   1631  43d8		       a5 9c		      lda	temp1
   1632  43da		       85 d0		      sta	playfield+44
   1633  43dc					      endif
   1634  43dc					      endif
   1635  43dc				   noshiftdown2
      0  43dc					      RETURN
      1  43dc				  -	      ifnconst	bankswitch
      2  43dc				  -	      rts
      3  43dc					      else
      4  43dc		       4c dd ff 	      jmp	BS_return
      5  43df					      endif
   1637  43df
   1638  43df
   1639  43df				   notup
   1640  43df							;down
   1641  43df		       4a		      lsr
   1642  43e0		       b0 02		      bcs	oneincup
   1643  43e2		       e6 ef		      inc	playfieldpos
   1644  43e4				   oneincup
   1645  43e4		       e6 ef		      inc	playfieldpos
   1646  43e6		       a5 ef		      lda	playfieldpos
   1647  43e8
   1648  43e8				  -	      ifconst	pfrowheight
   1649  43e8				  -	      cmp	#pfrowheight+1
   1650  43e8					      else
   1651  43e8					      ifnconst	pfres
   1652  43e8		       c9 09		      cmp	#9
   1653  43ea				  -	      else
   1654  43ea				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1655  43ea					      endif
   1656  43ea					      endif
   1657  43ea
   1658  43ea		       90 3b		      bcc	noshiftdown
   1659  43ec		       a9 01		      lda	#1
   1660  43ee		       85 ef		      sta	playfieldpos
   1661  43f0
   1662  43f0				  -	      ifconst	pfres
   1663  43f0				  -	      lda	playfield+pfres*4-1
   1664  43f0				  -	      sta	temp4
   1665  43f0				  -	      lda	playfield+pfres*4-2
   1666  43f0				  -	      sta	temp3
   1667  43f0				  -	      lda	playfield+pfres*4-3
   1668  43f0				  -	      sta	temp2
   1669  43f0				  -	      lda	playfield+pfres*4-4
   1670  43f0					      else
   1671  43f0		       a5 d3		      lda	playfield+47
   1672  43f2		       85 9f		      sta	temp4
   1673  43f4		       a5 d2		      lda	playfield+46
   1674  43f6		       85 9e		      sta	temp3
   1675  43f8		       a5 d1		      lda	playfield+45
   1676  43fa		       85 9d		      sta	temp2
   1677  43fc		       a5 d0		      lda	playfield+44
   1678  43fe					      endif
   1679  43fe
   1680  43fe		       85 9c		      sta	temp1
   1681  4400
   1682  4400				  -	      ifconst	pfres
   1683  4400				  -	      ldx	#(pfres-1)*4
   1684  4400					      else
   1685  4400		       a2 2c		      ldx	#44
   1686  4402					      endif
   1687  4402				   down2
   1688  4402		       b5 a3		      lda	playfield-1,x
   1689  4404				  -	      ifconst	superchip
   1690  4404				  -	      sta	playfield-125,x
   1691  4404				  -	      lda	playfield-2,x
   1692  4404				  -	      sta	playfield-126,x
   1693  4404				  -	      lda	playfield-3,x
   1694  4404				  -	      sta	playfield-127,x
   1695  4404				  -	      lda	playfield-4,x
   1696  4404				  -	      sta	playfield-128,x
   1697  4404					      else
   1698  4404		       95 a7		      sta	playfield+3,x
   1699  4406		       b5 a2		      lda	playfield-2,x
   1700  4408		       95 a6		      sta	playfield+2,x
   1701  440a		       b5 a1		      lda	playfield-3,x
   1702  440c		       95 a5		      sta	playfield+1,x
   1703  440e		       b5 a0		      lda	playfield-4,x
   1704  4410		       95 a4		      sta	playfield,x
   1705  4412					      endif
   1706  4412		       8a		      txa
   1707  4413		       cb 04		      sbx	#4
   1708  4415		       d0 eb		      bne	down2
   1709  4417
   1710  4417		       a5 9f		      lda	temp4
   1711  4419				  -	      ifconst	superchip
   1712  4419				  -	      sta	playfield-125
   1713  4419				  -	      lda	temp3
   1714  4419				  -	      sta	playfield-126
   1715  4419				  -	      lda	temp2
   1716  4419				  -	      sta	playfield-127
   1717  4419				  -	      lda	temp1
   1718  4419				  -	      sta	playfield-128
   1719  4419					      else
   1720  4419		       85 a7		      sta	playfield+3
   1721  441b		       a5 9e		      lda	temp3
   1722  441d		       85 a6		      sta	playfield+2
   1723  441f		       a5 9d		      lda	temp2
   1724  4421		       85 a5		      sta	playfield+1
   1725  4423		       a5 9c		      lda	temp1
   1726  4425		       85 a4		      sta	playfield
   1727  4427					      endif
   1728  4427				   noshiftdown
      0  4427					      RETURN
      1  4427				  -	      ifnconst	bankswitch
      2  4427				  -	      rts
      3  4427					      else
      4  4427		       4c dd ff 	      jmp	BS_return
      5  442a					      endif
   1730  442a							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1731  442a
   1732  442a							;standard routines needed for pretty much all games
   1733  442a							; just the random number generator is left - maybe we should remove this asm file altogether?
   1734  442a							; repositioning code and score pointer setup moved to overscan
   1735  442a							; read switches, joysticks now compiler generated (more efficient)
   1736  442a
   1737  442a				   randomize
   1738  442a		       a5 a2		      lda	rand
   1739  442c		       4a		      lsr
   1740  442d				  -	      ifconst	rand16
   1741  442d				  -	      rol	rand16
   1742  442d					      endif
   1743  442d		       90 02		      bcc	noeor
   1744  442f		       49 b4		      eor	#$B4
   1745  4431				   noeor
   1746  4431		       85 a2		      sta	rand
   1747  4433				  -	      ifconst	rand16
   1748  4433				  -	      eor	rand16
   1749  4433					      endif
      0  4433					      RETURN
      1  4433				  -	      ifnconst	bankswitch
      2  4433				  -	      rts
      3  4433					      else
      4  4433		       4c dd ff 	      jmp	BS_return
      5  4436					      endif
   1751  4436							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1752  4436
   1753  4436				   drawscreen
   1754  4436				  -	      ifconst	debugscore
   1755  4436				  -	      ldx	#14
   1756  4436				  -	      lda	INTIM	; display # cycles left in the score
   1757  4436				  -
   1758  4436				  -	      ifconst	mincycles
   1759  4436				  -	      lda	mincycles
   1760  4436				  -	      cmp	INTIM
   1761  4436				  -	      lda	mincycles
   1762  4436				  -	      bcc	nochange
   1763  4436				  -	      lda	INTIM
   1764  4436				  -	      sta	mincycles
   1765  4436				  -nochange
   1766  4436				  -	      endif
   1767  4436				  -
   1768  4436				  -			; cmp #$2B
   1769  4436				  -			; bcs no_cycles_left
   1770  4436				  -	      bmi	cycles_left
   1771  4436				  -	      ldx	#64
   1772  4436				  -	      eor	#$ff	;make negative
   1773  4436				  -cycles_left
   1774  4436				  -	      stx	scorecolor
   1775  4436				  -	      and	#$7f	; clear sign bit
   1776  4436				  -	      tax
   1777  4436				  -	      lda	scorebcd,x
   1778  4436				  -	      sta	score+2
   1779  4436				  -	      lda	scorebcd1,x
   1780  4436				  -	      sta	score+1
   1781  4436				  -	      jmp	done_debugscore
   1782  4436				  -scorebcd
   1783  4436				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1784  4436				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1785  4436				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1786  4436				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1787  4436				  -scorebcd1
   1788  4436				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1789  4436				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1790  4436				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1791  4436				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1792  4436				  -done_debugscore
   1793  4436					      endif
   1794  4436
   1795  4436				  -	      ifconst	debugcycles
   1796  4436				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1797  4436				  -			; cmp #$2B
   1798  4436				  -			; BCC overscan
   1799  4436				  -	      bmi	overscan
   1800  4436				  -	      sta	COLUBK
   1801  4436				  -	      bcs	doneoverscan
   1802  4436					      endif
   1803  4436
   1804  4436				   overscan
   1805  4436				  -	      ifconst	interlaced
   1806  4436				  -	      PHP
   1807  4436				  -	      PLA
   1808  4436				  -	      EOR	#4	; flip interrupt bit
   1809  4436				  -	      PHA
   1810  4436				  -	      PLP
   1811  4436				  -	      AND	#4	; isolate the interrupt bit
   1812  4436				  -	      TAX		; save it for later
   1813  4436					      endif
   1814  4436
   1815  4436				   overscanloop
   1816  4436		       ad 84 02 	      lda	INTIM	;wait for sync
   1817  4439		       30 fb		      bmi	overscanloop
   1818  443b				   doneoverscan
   1819  443b
   1820  443b							;do VSYNC
   1821  443b
   1822  443b				  -	      ifconst	interlaced
   1823  443b				  -	      CPX	#4
   1824  443b				  -	      BNE	oddframevsync
   1825  443b					      endif
   1826  443b
   1827  443b		       a9 02		      lda	#2
   1828  443d		       85 02		      sta	WSYNC
   1829  443f		       85 00		      sta	VSYNC
   1830  4441		       85 02		      STA	WSYNC
   1831  4443		       85 02		      STA	WSYNC
   1832  4445		       4a		      lsr
   1833  4446		       85 02		      STA	WSYNC
   1834  4448		       85 00		      STA	VSYNC
   1835  444a		       85 01		      sta	VBLANK
   1836  444c				  -	      ifnconst	overscan_time
   1837  444c				  -	      lda	#37+128
   1838  444c					      else
   1839  444c		       a9 a5		      lda	#overscan_time+128
   1840  444e					      endif
   1841  444e		       8d 96 02 	      sta	TIM64T
   1842  4451
   1843  4451				  -	      ifconst	interlaced
   1844  4451				  -	      jmp	postsync
   1845  4451				  -
   1846  4451				  -oddframevsync
   1847  4451				  -	      sta	WSYNC
   1848  4451				  -
   1849  4451				  -	      LDA	($80,X)	; 11 waste
   1850  4451				  -	      LDA	($80,X)	; 11 waste
   1851  4451				  -	      LDA	($80,X)	; 11 waste
   1852  4451				  -
   1853  4451				  -	      lda	#2
   1854  4451				  -	      sta	VSYNC
   1855  4451				  -	      sta	WSYNC
   1856  4451				  -	      sta	WSYNC
   1857  4451				  -	      sta	WSYNC
   1858  4451				  -
   1859  4451				  -	      LDA	($80,X)	; 11 waste
   1860  4451				  -	      LDA	($80,X)	; 11 waste
   1861  4451				  -	      LDA	($80,X)	; 11 waste
   1862  4451				  -
   1863  4451				  -	      lda	#0
   1864  4451				  -	      sta	VSYNC
   1865  4451				  -	      sta	VBLANK
   1866  4451				  -	      ifnconst	overscan_time
   1867  4451				  -	      lda	#37+128
   1868  4451				  -	      else
   1869  4451				  -	      lda	#overscan_time+128
   1870  4451				  -	      endif
   1871  4451				  -	      sta	TIM64T
   1872  4451				  -
   1873  4451				  -postsync
   1874  4451					      endif
   1875  4451
   1876  4451				  -	      ifconst	legacy
   1877  4451				  -	      if	legacy < 100
   1878  4451				  -	      ldx	#4
   1879  4451				  -adjustloop
   1880  4451				  -	      lda	player0x,x
   1881  4451				  -	      sec
   1882  4451				  -	      sbc	#14	;?
   1883  4451				  -	      sta	player0x,x
   1884  4451				  -	      dex
   1885  4451				  -	      bpl	adjustloop
   1886  4451				  -	      endif
   1887  4451					      endif
   1888  4451				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1889  4451				  -	      repeat	($fa-(<*))
   1890  4451				  -	      nop
   1891  4451				  -	      repend
   1892  4451					      endif
   1893  4451		       85 02		      sta	WSYNC
   1894  4453		       a2 04		      ldx	#4
      0  4455					      SLEEP	3
      1  4455				   .CYCLES    SET	3
      2  4455
      3  4455				  -	      IF	.CYCLES < 2
      4  4455				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4455				  -	      ERR
      6  4455					      ENDIF
      7  4455
      8  4455					      IF	.CYCLES & 1
      9  4455					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4455		       04 00		      nop	0
     11  4457				  -	      ELSE
     12  4457				  -	      bit	VSYNC
     13  4457					      ENDIF
     14  4457				   .CYCLES    SET	.CYCLES - 3
     15  4457					      ENDIF
     16  4457
     17  4457				  -	      REPEAT	.CYCLES / 2
     18  4457				  -	      nop
     19  4457					      REPEND
   1896  4457				   HorPosLoop		; 5
   1897  4457		       b5 80		      lda	player0x,X	;+4 9
   1898  4459		       38		      sec		;+2 11
   1899  445a				   DivideLoop
   1900  445a		       e9 0f		      sbc	#15
   1901  445c		       b0 fc		      bcs	DivideLoop	;+4 15
   1902  445e		       95 9c		      sta	temp1,X	;+4 19
   1903  4460		       95 10		      sta	RESP0,X	;+4 23
   1904  4462		       85 02		      sta	WSYNC
   1905  4464		       ca		      dex
   1906  4465		       10 f0		      bpl	HorPosLoop	;+5 5
   1907  4467							; 4
   1908  4467
   1909  4467		       a2 04		      ldx	#4
   1910  4469		       b4 9c		      ldy	temp1,X
   1911  446b		       b9 c7 f3 	      lda	repostable-256,Y
   1912  446e		       95 20		      sta	HMP0,X	;+14 18
   1913  4470
   1914  4470		       ca		      dex
   1915  4471		       b4 9c		      ldy	temp1,X
   1916  4473		       b9 c7 f3 	      lda	repostable-256,Y
   1917  4476		       95 20		      sta	HMP0,X	;+14 32
   1918  4478
   1919  4478		       ca		      dex
   1920  4479		       b4 9c		      ldy	temp1,X
   1921  447b		       b9 c7 f3 	      lda	repostable-256,Y
   1922  447e		       95 20		      sta	HMP0,X	;+14 46
   1923  4480
   1924  4480		       ca		      dex
   1925  4481		       b4 9c		      ldy	temp1,X
   1926  4483		       b9 c7 f3 	      lda	repostable-256,Y
   1927  4486		       95 20		      sta	HMP0,X	;+14 60
   1928  4488
   1929  4488		       ca		      dex
   1930  4489		       b4 9c		      ldy	temp1,X
   1931  448b		       b9 c7 f3 	      lda	repostable-256,Y
   1932  448e		       95 20		      sta	HMP0,X	;+14 74
   1933  4490
   1934  4490		       85 02		      sta	WSYNC
   1935  4492
   1936  4492		       85 2a		      sta	HMOVE	;+3 3
   1937  4494
   1938  4494
   1939  4494				  -	      ifconst	legacy
   1940  4494				  -	      if	legacy < 100
   1941  4494				  -	      ldx	#4
   1942  4494				  -adjustloop2
   1943  4494				  -	      lda	player0x,x
   1944  4494				  -	      clc
   1945  4494				  -	      adc	#14	;?
   1946  4494				  -	      sta	player0x,x
   1947  4494				  -	      dex
   1948  4494				  -	      bpl	adjustloop2
   1949  4494				  -	      endif
   1950  4494					      endif
   1951  4494
   1952  4494
   1953  4494
   1954  4494
   1955  4494							;set score pointers
   1956  4494		       a7 95		      lax	score+2
   1957  4496		       20 c7 f4 	      jsr	scorepointerset
   1958  4499		       84 9b		      sty	scorepointers+5
   1959  449b		       86 98		      stx	scorepointers+2
   1960  449d		       a7 94		      lax	score+1
   1961  449f		       20 c7 f4 	      jsr	scorepointerset
   1962  44a2		       84 9a		      sty	scorepointers+4
   1963  44a4		       86 97		      stx	scorepointers+1
   1964  44a6		       a7 93		      lax	score
   1965  44a8		       20 c7 f4 	      jsr	scorepointerset
   1966  44ab		       84 99		      sty	scorepointers+3
   1967  44ad		       86 96		      stx	scorepointers
   1968  44af
   1969  44af				   vblk
   1970  44af							; run possible vblank bB code
   1971  44af				  -	      ifconst	vblank_bB_code
   1972  44af				  -	      jsr	vblank_bB_code
   1973  44af					      endif
   1974  44af				   vblk2
   1975  44af		       ad 84 02 	      LDA	INTIM
   1976  44b2		       30 fb		      bmi	vblk2
   1977  44b4		       4c 00 f0 	      jmp	kernel
   1978  44b7
   1979  44b7
   1980  44b7		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1981  44c0		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1982  44c7				   repostable
   1983  44c7
   1984  44c7				   scorepointerset
   1985  44c7		       29 0f		      and	#$0F
   1986  44c9		       0a		      asl
   1987  44ca		       0a		      asl
   1988  44cb		       0a		      asl
   1989  44cc		       69 74		      adc	#<scoretable
   1990  44ce		       a8		      tay
   1991  44cf		       8a		      txa
   1992  44d0							; and #$F0
   1993  44d0							; lsr
   1994  44d0		       4b f0		      asr	#$F0
   1995  44d2		       69 74		      adc	#<scoretable
   1996  44d4		       aa		      tax
   1997  44d5		       60		      rts
   1998  44d6							;bB.asm
   1999  44d6							; bB.asm file is split here
   2000  44d6					      if	ECHOFIRST
      2718 bytes of ROM space left in bank 4
   2001  44d6					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 4")
   2002  44d6					      endif
   2003  44d6		       00 01	   ECHOFIRST  =	1
   2004  44d6
   2005  44d6
   2006  44d6							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2007  44d6
   2008  44d6							; feel free to modify the score graphics - just keep each digit 8 high
   2009  44d6							; and keep the conditional compilation stuff intact
   2010  44d6				  -	      ifconst	ROM2k
   2011  44d6				  -	      ORG	$F7AC-8
   2012  44d6					      else
   2013  44d6					      ifconst	bankswitch
   2014  44d6				  -	      if	bankswitch == 8
   2015  44d6				  -	      ORG	$2F94-bscode_length
   2016  44d6				  -	      RORG	$FF94-bscode_length
   2017  44d6					      endif
   2018  44d6					      if	bankswitch == 16
   2019  4f74					      ORG	$4F94-bscode_length
   2020  4f74					      RORG	$FF94-bscode_length
   2021  4f74					      endif
   2022  4f74				  -	      if	bankswitch == 32
   2023  4f74				  -	      ORG	$8F94-bscode_length
   2024  4f74				  -	      RORG	$FF94-bscode_length
   2025  4f74					      endif
   2026  4f74				  -	      if	bankswitch == 64
   2027  4f74				  -	      ORG	$10F80-bscode_length
   2028  4f74				  -	      RORG	$1FF80-bscode_length
   2029  4f74					      endif
   2030  4f74				  -	      else
   2031  4f74				  -	      ORG	$FF9C
   2032  4f74					      endif
   2033  4f74					      endif
   2034  4f74
   2035  4f74							; font equates
   2036  4f74		       00 01	   .21stcentury =	1
   2037  4f74		       00 02	   alarmclock =	2
   2038  4f74		       00 03	   handwritten =	3
   2039  4f74		       00 04	   interrupted =	4
   2040  4f74		       00 05	   retroputer =	5
   2041  4f74		       00 06	   whimsey    =	6
   2042  4f74		       00 07	   tiny       =	7
   2043  4f74		       00 08	   hex	      =	8
   2044  4f74
   2045  4f74				  -	      ifconst	font
   2046  4f74				  -	      if	font == hex
   2047  4f74				  -	      ORG	. - 48
   2048  4f74				  -	      endif
   2049  4f74					      endif
   2050  4f74
   2051  4f74				   scoretable
   2052  4f74
   2053  4f74				  -	      ifconst	font
   2054  4f74				  -	      if	font == .21stcentury
   2055  4f74				  -	      include	"score_graphics.asm.21stcentury"
   2056  4f74				  -	      endif
   2057  4f74				  -	      if	font == alarmclock
   2058  4f74				  -	      include	"score_graphics.asm.alarmclock"
   2059  4f74				  -	      endif
   2060  4f74				  -	      if	font == handwritten
   2061  4f74				  -	      include	"score_graphics.asm.handwritten"
   2062  4f74				  -	      endif
   2063  4f74				  -	      if	font == interrupted
   2064  4f74				  -	      include	"score_graphics.asm.interrupted"
   2065  4f74				  -	      endif
   2066  4f74				  -	      if	font == retroputer
   2067  4f74				  -	      include	"score_graphics.asm.retroputer"
   2068  4f74				  -	      endif
   2069  4f74				  -	      if	font == whimsey
   2070  4f74				  -	      include	"score_graphics.asm.whimsey"
   2071  4f74				  -	      endif
   2072  4f74				  -	      if	font == tiny
   2073  4f74				  -	      include	"score_graphics.asm.tiny"
   2074  4f74				  -	      endif
   2075  4f74				  -	      if	font == hex
   2076  4f74				  -	      include	"score_graphics.asm.hex"
   2077  4f74				  -	      endif
   2078  4f74					      else		; default font
   2079  4f74
   2080  4f74		       3c		      .byte.b	%00111100
   2081  4f75		       66		      .byte.b	%01100110
   2082  4f76		       66		      .byte.b	%01100110
   2083  4f77		       66		      .byte.b	%01100110
   2084  4f78		       66		      .byte.b	%01100110
   2085  4f79		       66		      .byte.b	%01100110
   2086  4f7a		       66		      .byte.b	%01100110
   2087  4f7b		       3c		      .byte.b	%00111100
   2088  4f7c
   2089  4f7c		       7e		      .byte.b	%01111110
   2090  4f7d		       18		      .byte.b	%00011000
   2091  4f7e		       18		      .byte.b	%00011000
   2092  4f7f		       18		      .byte.b	%00011000
   2093  4f80		       18		      .byte.b	%00011000
   2094  4f81		       38		      .byte.b	%00111000
   2095  4f82		       18		      .byte.b	%00011000
   2096  4f83		       08		      .byte.b	%00001000
   2097  4f84
   2098  4f84		       7e		      .byte.b	%01111110
   2099  4f85		       60		      .byte.b	%01100000
   2100  4f86		       60		      .byte.b	%01100000
   2101  4f87		       3c		      .byte.b	%00111100
   2102  4f88		       06		      .byte.b	%00000110
   2103  4f89		       06		      .byte.b	%00000110
   2104  4f8a		       46		      .byte.b	%01000110
   2105  4f8b		       3c		      .byte.b	%00111100
   2106  4f8c
   2107  4f8c		       3c		      .byte.b	%00111100
   2108  4f8d		       46		      .byte.b	%01000110
   2109  4f8e		       06		      .byte.b	%00000110
   2110  4f8f		       06		      .byte.b	%00000110
   2111  4f90		       1c		      .byte.b	%00011100
   2112  4f91		       06		      .byte.b	%00000110
   2113  4f92		       46		      .byte.b	%01000110
   2114  4f93		       3c		      .byte.b	%00111100
   2115  4f94
   2116  4f94		       0c		      .byte.b	%00001100
   2117  4f95		       0c		      .byte.b	%00001100
   2118  4f96		       7e		      .byte.b	%01111110
   2119  4f97		       4c		      .byte.b	%01001100
   2120  4f98		       4c		      .byte.b	%01001100
   2121  4f99		       2c		      .byte.b	%00101100
   2122  4f9a		       1c		      .byte.b	%00011100
   2123  4f9b		       0c		      .byte.b	%00001100
   2124  4f9c
   2125  4f9c		       3c		      .byte.b	%00111100
   2126  4f9d		       46		      .byte.b	%01000110
   2127  4f9e		       06		      .byte.b	%00000110
   2128  4f9f		       06		      .byte.b	%00000110
   2129  4fa0		       3c		      .byte.b	%00111100
   2130  4fa1		       60		      .byte.b	%01100000
   2131  4fa2		       60		      .byte.b	%01100000
   2132  4fa3		       7e		      .byte.b	%01111110
   2133  4fa4
   2134  4fa4		       3c		      .byte.b	%00111100
   2135  4fa5		       66		      .byte.b	%01100110
   2136  4fa6		       66		      .byte.b	%01100110
   2137  4fa7		       66		      .byte.b	%01100110
   2138  4fa8		       7c		      .byte.b	%01111100
   2139  4fa9		       60		      .byte.b	%01100000
   2140  4faa		       62		      .byte.b	%01100010
   2141  4fab		       3c		      .byte.b	%00111100
   2142  4fac
   2143  4fac		       30		      .byte.b	%00110000
   2144  4fad		       30		      .byte.b	%00110000
   2145  4fae		       30		      .byte.b	%00110000
   2146  4faf		       18		      .byte.b	%00011000
   2147  4fb0		       0c		      .byte.b	%00001100
   2148  4fb1		       06		      .byte.b	%00000110
   2149  4fb2		       42		      .byte.b	%01000010
   2150  4fb3		       3e		      .byte.b	%00111110
   2151  4fb4
   2152  4fb4		       3c		      .byte.b	%00111100
   2153  4fb5		       66		      .byte.b	%01100110
   2154  4fb6		       66		      .byte.b	%01100110
   2155  4fb7		       66		      .byte.b	%01100110
   2156  4fb8		       3c		      .byte.b	%00111100
   2157  4fb9		       66		      .byte.b	%01100110
   2158  4fba		       66		      .byte.b	%01100110
   2159  4fbb		       3c		      .byte.b	%00111100
   2160  4fbc
   2161  4fbc		       3c		      .byte.b	%00111100
   2162  4fbd		       46		      .byte.b	%01000110
   2163  4fbe		       06		      .byte.b	%00000110
   2164  4fbf		       3e		      .byte.b	%00111110
   2165  4fc0		       66		      .byte.b	%01100110
   2166  4fc1		       66		      .byte.b	%01100110
   2167  4fc2		       66		      .byte.b	%01100110
   2168  4fc3		       3c		      .byte.b	%00111100
   2169  4fc4
   2170  4fc4					      ifnconst	DPC_kernel_options
   2171  4fc4
   2172  4fc4		       00		      .byte.b	%00000000
   2173  4fc5		       00		      .byte.b	%00000000
   2174  4fc6		       00		      .byte.b	%00000000
   2175  4fc7		       00		      .byte.b	%00000000
   2176  4fc8		       00		      .byte.b	%00000000
   2177  4fc9		       00		      .byte.b	%00000000
   2178  4fca		       00		      .byte.b	%00000000
   2179  4fcb		       00		      .byte.b	%00000000
   2180  4fcc
   2181  4fcc					      endif
   2182  4fcc
   2183  4fcc					      endif
   2184  4fcc
   2185  4fcc				  -	      ifconst	ROM2k
   2186  4fcc				  -	      ORG	$F7FC
   2187  4fcc					      else
   2188  4fcc					      ifconst	bankswitch
   2189  4fcc				  -	      if	bankswitch == 8
   2190  4fcc				  -	      ORG	$2FF4-bscode_length
   2191  4fcc				  -	      RORG	$FFF4-bscode_length
   2192  4fcc					      endif
   2193  4fcc					      if	bankswitch == 16
   2194  4fd4					      ORG	$4FF4-bscode_length
   2195  4fd4					      RORG	$FFF4-bscode_length
   2196  4fd4					      endif
   2197  4fd4				  -	      if	bankswitch == 32
   2198  4fd4				  -	      ORG	$8FF4-bscode_length
   2199  4fd4				  -	      RORG	$FFF4-bscode_length
   2200  4fd4					      endif
   2201  4fd4				  -	      if	bankswitch == 64
   2202  4fd4				  -	      ORG	$10FE0-bscode_length
   2203  4fd4				  -	      RORG	$1FFE0-bscode_length
   2204  4fd4					      endif
   2205  4fd4				  -	      else
   2206  4fd4				  -	      ORG	$FFFC
   2207  4fd4					      endif
   2208  4fd4					      endif
   2209  4fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2210  4fd4
   2211  4fd4							; every bank has this stuff at the same place
   2212  4fd4							; this code can switch to/from any bank at any entry point
   2213  4fd4							; and can preserve register values
   2214  4fd4							; note: lines not starting with a space are not placed in all banks
   2215  4fd4							;
   2216  4fd4							; line below tells the compiler how long this is - do not remove
   2217  4fd4							;size=32
   2218  4fd4
   2219  4fd4				   begin_bscode
   2220  4fd4		       a2 ff		      ldx	#$ff
   2221  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
   2222  4fd6				  -	      stx	FASTFETCH
   2223  4fd6					      endif
   2224  4fd6		       9a		      txs
   2225  4fd7				  -	      if	bankswitch == 64
   2226  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2227  4fd7					      else
   2228  4fd7		       a9 f2		      lda	#>(start-1)
   2229  4fd9					      endif
   2230  4fd9		       48		      pha
   2231  4fda		       a9 4f		      lda	#<(start-1)
   2232  4fdc		       48		      pha
   2233  4fdd
   2234  4fdd				   BS_return
   2235  4fdd		       48		      pha
   2236  4fde		       8a		      txa
   2237  4fdf		       48		      pha
   2238  4fe0		       ba		      tsx
   2239  4fe1
   2240  4fe1					      if	bankswitch != 64
   2241  4fe1		       b5 04		      lda	4,x	; get high byte of return address
   2242  4fe3
   2243  4fe3		       2a		      rol
   2244  4fe4		       2a		      rol
   2245  4fe5		       2a		      rol
   2246  4fe6		       2a		      rol
   2247  4fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2248  4fe9		       aa		      tax
   2249  4fea		       e8		      inx
   2250  4feb				  -	      else
   2251  4feb				  -	      lda	4,x	; get high byte of return address
   2252  4feb				  -	      tay
   2253  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2254  4feb				  -	      sta	4,x
   2255  4feb				  -	      tya
   2256  4feb				  -	      lsr
   2257  4feb				  -	      lsr
   2258  4feb				  -	      lsr
   2259  4feb				  -	      lsr
   2260  4feb				  -	      tax
   2261  4feb				  -	      inx
   2262  4feb					      endif
   2263  4feb
   2264  4feb				   BS_jsr
   2265  4feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   2266  4fee		       68		      pla
   2267  4fef		       aa		      tax
   2268  4ff0		       68		      pla
   2269  4ff1		       60		      rts
   2270  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2271  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2272  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2273  4ff2					      endif
   2274  4ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2275  4ff2
   2276  4ff2					      ifconst	bankswitch
   2277  4ff2				  -	      if	bankswitch == 8
   2278  4ff2				  -	      ORG	$2FFC
   2279  4ff2				  -	      RORG	$FFFC
   2280  4ff2					      endif
   2281  4ff2					      if	bankswitch == 16
   2282  4ffc					      ORG	$4FFC
   2283  4ffc					      RORG	$FFFC
   2284  4ffc					      endif
   2285  4ffc				  -	      if	bankswitch == 32
   2286  4ffc				  -	      ORG	$8FFC
   2287  4ffc				  -	      RORG	$FFFC
   2288  4ffc					      endif
   2289  4ffc				  -	      if	bankswitch == 64
   2290  4ffc				  -	      ORG	$10FF0
   2291  4ffc				  -	      RORG	$1FFF0
   2292  4ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2293  4ffc				  -	      ORG	$10FF8
   2294  4ffc				  -	      RORG	$1FFF8
   2295  4ffc				  -	      ifconst	superchip
   2296  4ffc				  -	      .byte	"E","F","S","C"
   2297  4ffc				  -	      else
   2298  4ffc				  -	      .byte	"E","F","E","F"
   2299  4ffc				  -	      endif
   2300  4ffc				  -	      ORG	$10FFC
   2301  4ffc				  -	      RORG	$1FFFC
   2302  4ffc					      endif
   2303  4ffc				  -	      else
   2304  4ffc				  -	      ifconst	ROM2k
   2305  4ffc				  -	      ORG	$F7FC
   2306  4ffc				  -	      else
   2307  4ffc				  -	      ORG	$FFFC
   2308  4ffc				  -	      endif
   2309  4ffc					      endif
   2310  4ffc		       50 f2		      .word.w	(start & $ffff)
   2311  4ffe		       50 f2		      .word.w	(start & $ffff)
